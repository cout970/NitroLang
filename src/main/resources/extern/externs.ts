// -----------------------------------------------------------------------------
// This file was generated by the Nitro compiler, do not edit manually
// Export date: 2024-09-07T12:38:06.935784534Z
// -----------------------------------------------------------------------------
import * as impl from './impl.ts'
// -----------------------------------------------------------------------------
type Nothing = void;
type Boolean = boolean;
type Byte = number;
type Int = number;
type Char = number;
type Long = bigint;
type Float = number;
type Ptr = number;
type RawArray = number;
type String = number;
type Ref = number;
// -----------------------------------------------------------------------------
export const core = {
   // -------------------------------------------------------------------------
   // From check.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/debug/check.nitro(check.nitro:43)
   // @Extern [lib: "core", name: "run_test"]
   // fun run_test(String, String): Boolean
   run_test(internal_function_name: String, test_name: String): Boolean { return impl.run_test(internal_function_name, test_name); },
   //
   // -------------------------------------------------------------------------
   // From debug.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/debug/debug.nitro(debug.nitro:13)
   // @Extern [lib: "core", name: "println_string"]
   // fun println(String): Nothing
   println_string(i: String): Nothing { return impl.println_string(i); },
   //
   // At src/main/nitro/core/debug/debug.nitro(debug.nitro:17)
   // @Extern [lib: "core", name: "println_int"]
   // fun println(Int): Nothing
   println_int(i: Int): Nothing { return impl.println_int(i); },
   //
   // At src/main/nitro/core/debug/debug.nitro(debug.nitro:21)
   // @Extern [lib: "core", name: "println_long"]
   // fun println(Long): Nothing
   println_long(i: Long): Nothing { return impl.println_long(i); },
   //
   // At src/main/nitro/core/debug/debug.nitro(debug.nitro:25)
   // @Extern [lib: "core", name: "println_float"]
   // fun println(Float): Nothing
   println_float(i: Float): Nothing { return impl.println_float(i); },
   //
   // At src/main/nitro/core/debug/debug.nitro(debug.nitro:29)
   // @Extern [lib: "core", name: "println_boolean"]
   // fun println(Boolean): Nothing
   println_boolean(i: Boolean): Nothing { return impl.println_boolean(i); },
   //
   // -------------------------------------------------------------------------
   // From logger.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/debug/logger.nitro(logger.nitro:5)
   // @Extern [lib: "core", name: "logger_get_logger"]
   // fun get_logger(): Logger
   logger_get_logger(): Ref { return impl.logger_get_logger(); },
   //
   // At src/main/nitro/core/debug/logger.nitro(logger.nitro:27)
   // @Extern [lib: "core", name: "logger_log"]
   // fun log(Logger, String, String): Nothing
   logger_log(self: Ref, level: String, message: String): Nothing { return impl.logger_log(self, level, message); },
   //
   // -------------------------------------------------------------------------
   // From runtime.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/debug/runtime.nitro(runtime.nitro:19)
   // @Extern [lib: "core", name: "runtime_program_arg_count"]
   // fun Runtime::program_arg_count(): Int
   runtime_program_arg_count(): Int { return impl.runtime_program_arg_count(); },
   //
   // At src/main/nitro/core/debug/runtime.nitro(runtime.nitro:22)
   // @Extern [lib: "core", name: "runtime_program_arg_get"]
   // fun Runtime::program_arg_get(Int): String
   runtime_program_arg_get(index: Int): String { return impl.runtime_program_arg_get(index); },
   //
   // -------------------------------------------------------------------------
   // From trace.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/debug/trace.nitro(trace.nitro:4)
   // @Extern [lib: "core", name: "trace_enter"]
   // fun Trace::trace_enter(String): Nothing
   trace_enter(func_info: String): Nothing { return impl.trace_enter(func_info); },
   //
   // At src/main/nitro/core/debug/trace.nitro(trace.nitro:7)
   // @Extern [lib: "core", name: "trace_exit"]
   // fun Trace::trace_exit(String): Nothing
   trace_exit(func_info: String): Nothing { return impl.trace_exit(func_info); },
   //
   // At src/main/nitro/core/debug/trace.nitro(trace.nitro:10)
   // @Extern [lib: "core", name: "trace_get_stacktrace"]
   // fun Trace::trace_get_stacktrace(): String
   trace_get_stacktrace(): String { return impl.trace_get_stacktrace(); },
   //
   // At src/main/nitro/core/debug/trace.nitro(trace.nitro:13)
   // @Extern [lib: "core", name: "trace_print_stack_trace"]
   // fun Trace::print_stack_trace(): Nothing
   trace_print_stack_trace(): Nothing { return impl.trace_print_stack_trace(); },
   //
   // -------------------------------------------------------------------------
   // From file_path.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/fs/file_path.nitro(file_path.nitro:16)
   // @Extern [lib: "core", name: "file_path_join"]
   // fun FilePath::join(String, String): String
   file_path_join(dir: String, sub: String): String { return impl.file_path_join(dir, sub); },
   //
   // At src/main/nitro/core/fs/file_path.nitro(file_path.nitro:19)
   // @Extern [lib: "core", name: "file_path_dirname"]
   // fun FilePath::directory_name(String): String
   file_path_dirname(path: String): String { return impl.file_path_dirname(path); },
   //
   // At src/main/nitro/core/fs/file_path.nitro(file_path.nitro:22)
   // @Extern [lib: "core", name: "file_path_basename"]
   // fun FilePath::base_name(String): String
   file_path_basename(path: String): String { return impl.file_path_basename(path); },
   //
   // At src/main/nitro/core/fs/file_path.nitro(file_path.nitro:25)
   // @Extern [lib: "core", name: "file_path_read_text"]
   // fun read_text(FilePath): Result<String, IoError>
   file_path_read_text(self: Ref): Ref { return impl.file_path_read_text(self); },
   //
   // At src/main/nitro/core/fs/file_path.nitro(file_path.nitro:28)
   // @Extern [lib: "core", name: "file_path_write_text"]
   // fun write_text(FilePath, String): Result<Nothing, IoError>
   file_path_write_text(self: Ref, text: String): Ref { return impl.file_path_write_text(self, text); },
   //
   // At src/main/nitro/core/fs/file_path.nitro(file_path.nitro:31)
   // @Extern [lib: "core", name: "file_path_exists"]
   // fun exists(FilePath): Result<Boolean, IoError>
   file_path_exists(self: Ref): Ref { return impl.file_path_exists(self); },
   //
   // At src/main/nitro/core/fs/file_path.nitro(file_path.nitro:34)
   // @Extern [lib: "core", name: "file_path_last_modified"]
   // fun get_last_modified_time(FilePath): Result<Instant, IoError>
   file_path_last_modified(self: Ref): Ref { return impl.file_path_last_modified(self); },
   //
   // At src/main/nitro/core/fs/file_path.nitro(file_path.nitro:37)
   // @Extern [lib: "core", name: "file_path_unsafe_debug_last_modified"]
   // fun unsafe_debug_last_modified(FilePath): Int
   file_path_unsafe_debug_last_modified(self: Ref): Int { return impl.file_path_unsafe_debug_last_modified(self); },
   //
   // At src/main/nitro/core/fs/file_path.nitro(file_path.nitro:40)
   // @Extern [lib: "core", name: "file_path_unsafe_debug_read_bytes"]
   // fun unsafe_debug_read_bytes(FilePath): Array<Byte>
   file_path_unsafe_debug_read_bytes(self: Ref): Ref { return impl.file_path_unsafe_debug_read_bytes(self); },
   //
   // At src/main/nitro/core/fs/file_path.nitro(file_path.nitro:43)
   // @Extern [lib: "core", name: "file_path_unsafe_debug_write_bytes"]
   // fun unsafe_debug_write_bytes(FilePath, Array<Byte>, Int): Boolean
   file_path_unsafe_debug_write_bytes(self: Ref, bytes: Ref, len: Int): Boolean { return impl.file_path_unsafe_debug_write_bytes(self, bytes, len); },
   //
   // -------------------------------------------------------------------------
   // From intrinsic.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/lang/intrinsic.nitro(intrinsic.nitro:9)
   // @Extern [lib: "core", name: "as_type_internal"]
   // fun as_type_internal(Int, Int): Int
   as_type_internal(ptr_to_value: Int, type_id: Int): Int { return impl.as_type_internal(ptr_to_value, type_id); },
   //
   // At src/main/nitro/core/lang/intrinsic.nitro(intrinsic.nitro:13)
   // @Extern [lib: "core", name: "is_type_internal"]
   // fun is_type_internal(Int, Int): Boolean
   is_type_internal(ptr_to_value: Int, type_id: Int): Boolean { return impl.is_type_internal(ptr_to_value, type_id); },
   //
   // -------------------------------------------------------------------------
   // From exponential_utils.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/math/exponential_utils.nitro(exponential_utils.nitro:4)
   // @Extern [lib: "core", name: "math_pow"]
   // fun Math::pow(Float, Float): Float
   math_pow(x: Float, y: Float): Float { return impl.math_pow(x, y); },
   //
   // At src/main/nitro/core/math/exponential_utils.nitro(exponential_utils.nitro:8)
   // @Extern [lib: "core", name: "math_sqrt"]
   // fun Math::sqrt(Float): Float
   math_sqrt(x: Float): Float { return impl.math_sqrt(x); },
   //
   // At src/main/nitro/core/math/exponential_utils.nitro(exponential_utils.nitro:12)
   // @Extern [lib: "core", name: "math_cbrt"]
   // fun Math::cbrt(Float): Float
   math_cbrt(x: Float): Float { return impl.math_cbrt(x); },
   //
   // At src/main/nitro/core/math/exponential_utils.nitro(exponential_utils.nitro:16)
   // @Extern [lib: "core", name: "math_exp"]
   // fun Math::exp(Float): Float
   math_exp(x: Float): Float { return impl.math_exp(x); },
   //
   // At src/main/nitro/core/math/exponential_utils.nitro(exponential_utils.nitro:20)
   // @Extern [lib: "core", name: "math_expm1"]
   // fun Math::expm1(Float): Float
   math_expm1(x: Float): Float { return impl.math_expm1(x); },
   //
   // At src/main/nitro/core/math/exponential_utils.nitro(exponential_utils.nitro:25)
   // @Extern [lib: "core", name: "math_log"]
   // fun Math::log(Float): Float
   math_log(x: Float): Float { return impl.math_log(x); },
   //
   // At src/main/nitro/core/math/exponential_utils.nitro(exponential_utils.nitro:29)
   // @Extern [lib: "core", name: "math_log1p"]
   // fun Math::log1p(Float): Float
   math_log1p(x: Float): Float { return impl.math_log1p(x); },
   //
   // At src/main/nitro/core/math/exponential_utils.nitro(exponential_utils.nitro:33)
   // @Extern [lib: "core", name: "math_log10"]
   // fun Math::log10(Float): Float
   math_log10(x: Float): Float { return impl.math_log10(x); },
   //
   // At src/main/nitro/core/math/exponential_utils.nitro(exponential_utils.nitro:37)
   // @Extern [lib: "core", name: "math_log2"]
   // fun Math::log2(Float): Float
   math_log2(x: Float): Float { return impl.math_log2(x); },
   //
   // -------------------------------------------------------------------------
   // From random.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/math/random.nitro(random.nitro:4)
   // @Extern [lib: "core", name: "random_get_initial_seed"]
   // fun random_get_initial_seed(): Int
   random_get_initial_seed(): Int { return impl.random_get_initial_seed(); },
   //
   // -------------------------------------------------------------------------
   // From trigonometry_utils.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:4)
   // @Extern [lib: "core", name: "math_sin"]
   // fun Math::sin(Float): Float
   math_sin(x: Float): Float { return impl.math_sin(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:8)
   // @Extern [lib: "core", name: "math_sinh"]
   // fun Math::sinh(Float): Float
   math_sinh(x: Float): Float { return impl.math_sinh(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:12)
   // @Extern [lib: "core", name: "math_asin"]
   // fun Math::asin(Float): Float
   math_asin(x: Float): Float { return impl.math_asin(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:16)
   // @Extern [lib: "core", name: "math_asinh"]
   // fun Math::asinh(Float): Float
   math_asinh(x: Float): Float { return impl.math_asinh(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:20)
   // @Extern [lib: "core", name: "math_cos"]
   // fun Math::cos(Float): Float
   math_cos(x: Float): Float { return impl.math_cos(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:24)
   // @Extern [lib: "core", name: "math_cosh"]
   // fun Math::cosh(Float): Float
   math_cosh(x: Float): Float { return impl.math_cosh(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:28)
   // @Extern [lib: "core", name: "math_acos"]
   // fun Math::acos(Float): Float
   math_acos(x: Float): Float { return impl.math_acos(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:32)
   // @Extern [lib: "core", name: "math_acosh"]
   // fun Math::acosh(Float): Float
   math_acosh(x: Float): Float { return impl.math_acosh(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:36)
   // @Extern [lib: "core", name: "math_tan"]
   // fun Math::tan(Float): Float
   math_tan(x: Float): Float { return impl.math_tan(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:40)
   // @Extern [lib: "core", name: "math_tanh"]
   // fun Math::tanh(Float): Float
   math_tanh(x: Float): Float { return impl.math_tanh(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:44)
   // @Extern [lib: "core", name: "math_atan"]
   // fun Math::atan(Float): Float
   math_atan(x: Float): Float { return impl.math_atan(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:48)
   // @Extern [lib: "core", name: "math_atanh"]
   // fun Math::atanh(Float): Float
   math_atanh(x: Float): Float { return impl.math_atanh(x); },
   //
   // At src/main/nitro/core/math/trigonometry_utils.nitro(trigonometry_utils.nitro:52)
   // @Extern [lib: "core", name: "math_atan2"]
   // fun Math::atan2(Float, Float): Float
   math_atan2(y: Float, x: Float): Float { return impl.math_atan2(y, x); },
   //
   // -------------------------------------------------------------------------
   // From array.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/memory/array.nitro(array.nitro:7)
   // @Extern [lib: "core", name: "array_new"]
   // fun Array::new(Int): Array<#Item>
   array_new(len: Int): Ref { return impl.array_new(len); },
   //
   // At src/main/nitro/core/memory/array.nitro(array.nitro:10)
   // @Extern [lib: "core", name: "array_len"]
   // fun get_len(Array<#Item>): Int
   array_len(self: Ref): Int { return impl.array_len(self); },
   //
   // At src/main/nitro/core/memory/array.nitro(array.nitro:13)
   // @Extern [lib: "core", name: "array_fill"]
   // fun fill(Array<#Item>, #Item): Nothing
   array_fill(self: Ref, value: Ref): Nothing { return impl.array_fill(self, value); },
   //
   // At src/main/nitro/core/memory/array.nitro(array.nitro:16)
   // @Extern [lib: "core", name: "array_get"]
   // fun get(Array<#Item>, Int): #Item
   array_get(self: Ref, index: Int): Ref { return impl.array_get(self, index); },
   //
   // At src/main/nitro/core/memory/array.nitro(array.nitro:19)
   // @Extern [lib: "core", name: "array_set"]
   // fun set(Array<#Item>, Int, #Item): Nothing
   array_set(self: Ref, index: Int, value: Ref): Nothing { return impl.array_set(self, index, value); },
   //
   // -------------------------------------------------------------------------
   // From intrinsic_memory.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/memory/intrinsic_memory.nitro(intrinsic_memory.nitro:4)
   // @Extern [lib: "core", name: "memory_get_memory"]
   // fun get_memory(): MemoryArena
   memory_get_memory(): Ref { return impl.memory_get_memory(); },
   //
   // At src/main/nitro/core/memory/intrinsic_memory.nitro(intrinsic_memory.nitro:29)
   // @Extern [lib: "core", name: "memory_alloc_trace"]
   // fun memory_alloc_trace(Int, Int): Nothing
   memory_alloc_trace(amount: Int, ptr: Int): Nothing { return impl.memory_alloc_trace(amount, ptr); },
   //
   // At src/main/nitro/core/memory/intrinsic_memory.nitro(intrinsic_memory.nitro:33)
   // @Extern [lib: "core", name: "memory_alloc_error"]
   // fun memory_alloc_error(Int, Int, Int, Int, Int): Nothing
   memory_alloc_error(amount: Int, return_ptr: Int, capacity: Int, len: Int, bytes_ptr: Int): Nothing { return impl.memory_alloc_error(amount, return_ptr, capacity, len, bytes_ptr); },
   //
   // -------------------------------------------------------------------------
   // From memory_arena.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/memory/memory_arena.nitro(memory_arena.nitro:99)
   // @Extern [lib: "core", name: "memory_dump"]
   // fun dump(MemoryArena): Nothing
   memory_dump(self: Ref): Nothing { return impl.memory_dump(self); },
   //
   // -------------------------------------------------------------------------
   // From byte.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/primitives/byte.nitro(byte.nitro:11)
   // @Extern [lib: "core", name: "byte_to_int"]
   // fun to_int(Byte): Int
   byte_to_int(self: Byte): Int { return impl.byte_to_int(self); },
   //
   // -------------------------------------------------------------------------
   // From float.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/primitives/float.nitro(float.nitro:50)
   // @Extern [lib: "core", name: "float_rem"]
   // fun rem(Float, Float): Float
   float_rem(self: Float, other: Float): Float { return impl.float_rem(self, other); },
   //
   // At src/main/nitro/core/primitives/float.nitro(float.nitro:150)
   // @Extern [lib: "core", name: "float_is_nan"]
   // fun is_nan(Float): Boolean
   float_is_nan(self: Float): Boolean { return impl.float_is_nan(self); },
   //
   // At src/main/nitro/core/primitives/float.nitro(float.nitro:154)
   // @Extern [lib: "core", name: "float_is_finite"]
   // fun is_finite(Float): Boolean
   float_is_finite(self: Float): Boolean { return impl.float_is_finite(self); },
   //
   // At src/main/nitro/core/primitives/float.nitro(float.nitro:161)
   // @Extern [lib: "core", name: "float_is_integer"]
   // fun is_integer(Float): Boolean
   float_is_integer(self: Float): Boolean { return impl.float_is_integer(self); },
   //
   // At src/main/nitro/core/primitives/float.nitro(float.nitro:169)
   // @Extern [lib: "core", name: "float_is_safe_integer"]
   // fun is_safe_integer(Float): Boolean
   float_is_safe_integer(self: Float): Boolean { return impl.float_is_safe_integer(self); },
   //
   // At src/main/nitro/core/primitives/float.nitro(float.nitro:180)
   // @Extern [lib: "core", name: "float_to_string"]
   // fun to_string(Float): String
   float_to_string(self: Float): String { return impl.float_to_string(self); },
   //
   // At src/main/nitro/core/primitives/float.nitro(float.nitro:185)
   // @Extern [lib: "core", name: "float_get_ordering"]
   // fun get_ordering(Float, Float): Ordering
   float_get_ordering(self: Float, other: Float): Ref { return impl.float_get_ordering(self, other); },
   //
   // -------------------------------------------------------------------------
   // From int.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/primitives/int.nitro(int.nitro:210)
   // @Extern [lib: "core", name: "int_to_long"]
   // fun to_long(Int): Long
   int_to_long(self: Int): Long { return impl.int_to_long(self); },
   //
   // At src/main/nitro/core/primitives/int.nitro(int.nitro:214)
   // @Extern [lib: "core", name: "int_to_byte"]
   // fun to_byte(Int): Byte
   int_to_byte(self: Int): Byte { return impl.int_to_byte(self); },
   //
   // At src/main/nitro/core/primitives/int.nitro(int.nitro:271)
   // @Extern [lib: "core", name: "int_get_ordering"]
   // fun get_ordering(Int, Int): Ordering
   int_get_ordering(self: Int, other: Int): Ref { return impl.int_get_ordering(self, other); },
   //
   // -------------------------------------------------------------------------
   // From long.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/primitives/long.nitro(long.nitro:206)
   // @Extern [lib: "core", name: "long_to_string"]
   // fun to_string(Long): String
   long_to_string(self: Long): String { return impl.long_to_string(self); },
   //
   // At src/main/nitro/core/primitives/long.nitro(long.nitro:215)
   // @Extern [lib: "core", name: "long_to_string_in_base"]
   // fun to_string_in_base(Long, Int): String
   long_to_string_in_base(self: Long, radix: Int): String { return impl.long_to_string_in_base(self, radix); },
   //
   // -------------------------------------------------------------------------
   // From ordering.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/sorting/ordering.nitro(ordering.nitro:67)
   // @Extern [lib: "core", name: "string_get_ordering_internal"]
   // fun Internal::get_ordering_internal(String, String): Int
   string_get_ordering_internal(a: String, b: String): Int { return impl.string_get_ordering_internal(a, b); },
   //
   // -------------------------------------------------------------------------
   // From string.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/string/string.nitro(string.nitro:507)
   // @Extern [lib: "core", name: "string_to_ascii_lowercase"]
   // fun to_ascii_lowercase(String): String
   string_to_ascii_lowercase(self: String): String { return impl.string_to_ascii_lowercase(self); },
   //
   // At src/main/nitro/core/string/string.nitro(string.nitro:511)
   // @Extern [lib: "core", name: "string_to_ascii_uppercase"]
   // fun to_ascii_uppercase(String): String
   string_to_ascii_uppercase(self: String): String { return impl.string_to_ascii_uppercase(self); },
   //
   // -------------------------------------------------------------------------
   // From instant.nitro
   // -------------------------------------------------------------------------
   //
   // At src/main/nitro/core/time/instant.nitro(instant.nitro:10)
   // @Extern [lib: "core", name: "instant_now"]
   // fun Instant::now(): Instant
   instant_now(): Ref { return impl.instant_now(); },
   //
   // At src/main/nitro/core/time/instant.nitro(instant.nitro:13)
   // @Extern [lib: "core", name: "instant_format_to_iso8601"]
   // fun format_to_iso8601(Instant): String
   instant_format_to_iso8601(self: Ref): String { return impl.instant_format_to_iso8601(self); },
   //
};
// -----------------------------------------------------------------------------
