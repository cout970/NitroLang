
struct IncludedFile {
    file_path: FilePath
    root: String
    exists: Boolean
    last_modified: Int
    source_cache: Optional<String>
}

fun IncludedFile::new(path: String, root: String): IncludedFile {
    let file_path = FilePath::new(path)
    let last_modified_res = file_path.get_last_modified_time()

    if last_modified_res.is_err() {
        crash("Failed to get last modified time for file '${file_path}': ${last_modified_res.err}")
    }
    let last_modified = last_modified_res!!

    ret IncludedFile @[
        file_path,
        root,
        exists: file_path.exists()!!,
        last_modified: last_modified.get_unix_timestamp().to_int(),
        source_cache: None()
    ]
}

fun IncludedFile::from_string(source: String, path: String, root: String): IncludedFile {
    let file_path = FilePath::new(path)

    ret IncludedFile @[
        file_path,
        root,
        exists: true,
        last_modified: 0,
        source_cache: Some(source)
    ]
}

fun IncludedFile.get_path(): String = file_path.path

fun IncludedFile.get_source(): String {
    if source_cache.is_some() {
        ret source_cache!!
    }

    if !exists {
        crash("File not found: ${file_path}")
    }

    source_cache = Some(file_path.read_text()!!)
    ret source_cache!!
}

fun IncludedFile.get_ordering(other: IncludedFile): Ordering = this.path.get_ordering(other.path)

fun IncludedFile.to_string(): String = path
