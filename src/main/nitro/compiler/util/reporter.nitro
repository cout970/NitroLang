
// Utility to report errors, warnings, and suggestions
struct Reporter {
    errors: List<Report>
    warnings: List<Report>
    suggestions: List<Report>
    deduplication: List<Pair<String, Span>>
    immediate_output: Boolean
}

// A single error, warning, or suggestion
struct Report {
    kind: ReportKind
    message: String
    location: Span
    stack_trace: List<String>
}

// The kind of report
enum ReportKind {
    Error,
    Warning,
    Suggestion,
}

// Create a new reporter
fun Reporter::new(): Reporter {
    ret Reporter @[
        errors: [],
        warnings: [],
        suggestions: [],
        deduplication: [],
        immediate_output: false,
    ]
}

fun Reporter.has_reports(): Boolean {
    ret errors.len > 0 || warnings.len > 0 || suggestions.len > 0
}

fun Reporter.get_report_count(): Int {
    ret errors.len + warnings.len + suggestions.len
}

fun Reporter.report_errors() {
    for error in errors {
        Log::error(error.to_string())
    }
    for warning in warnings {
        Log::warn(warning.to_string())
    }
    for suggestion in suggestions {
        Log::info(suggestion.to_string())
    }
}

// Report an parse error
fun Reporter.report_parse_error(message: String, location: Span, stack_trace: List<String>) {
    let key = Pair::of(message, location)
    if key in deduplication { ret }

    let error = Report @[
        kind: ReportKind::Error,
        message,
        location,
        stack_trace,
    ]
    errors[] = error
    deduplication[] = key
    if immediate_output { Log::error(error.to_string()) }
}

// Report an error
fun Reporter.report_error(message: String, location: Span) {
    let key = Pair::of(message, location)
    if key in deduplication { ret }

    let error = Report @[
        kind: ReportKind::Error,
        message,
        location,
        stack_trace: [] // TODO
    ]
    errors[] = error
    deduplication[] = key
    if immediate_output { Log::error(error.to_string()) }
}

// Report a warning
fun Reporter.report_warning(message: String, location: Span) {
    let key = Pair::of(message, location)
    if key in deduplication { ret }

    let warn = Report @[
        kind: ReportKind::Warning,
        message,
        location,
        stack_trace: [] // TODO
    ]
    warnings[] = warn
    deduplication[] = key
    if immediate_output { Log::warn(warn.to_string()) }
}

// Report a suggestion
fun Reporter.report_suggestion(message: String, location: Span) {
    let key = Pair::of(message, location)
    if key in deduplication { ret }

    let suggestion = Report @[
        kind: ReportKind::Suggestion,
        message,
        location,
        stack_trace: [] // TODO
    ]
    suggestions[] = suggestion
    deduplication[] = key
    if immediate_output { Log::info(suggestion.to_string()) }
}

// Print the report
fun Report.to_string(): String {
    ret "$kind: $message\n${location.to_code_sample()}"
}

