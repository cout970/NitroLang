
enum ByteBufferType {
    let value: Int
    Int @[value: 1]
    Float @[value: 2]
    String @[value: 3]
    Long @[value: 4]
    Boolean @[value: 5]
}

struct ByteBuffer {
    writer: ByteWriter
    reader: ByteReader
    strings: List<String>
    extra_checks: Boolean
}

fun ByteBuffer::new(): ByteBuffer {
    ret ByteBuffer::new([])
}

fun ByteBuffer::new(list: List<Byte>): ByteBuffer {
    ret ByteBuffer @[
        writer: ByteWriter::wrap(list),
        reader: ByteReader::new(list),
        strings: [],
        extra_checks: true,
    ]
}

fun ByteBuffer.write_int(value: Int) {
    if extra_checks {
        writer.add_int_leb128(ByteBufferType::Int.value)
    }
    writer.add_int_leb128(value)
}

fun ByteBuffer.read_int(): Int {
    if extra_checks {
        let tag_byte = reader.read_int_leb128()
        if tag_byte != ByteBufferType::Int.value {
            crash("Invalid tag, expecting Int (${ByteBufferType::Int.value}), found: $tag_byte")
        }
    }

    ret reader.read_int_leb128()
}

fun ByteBuffer.write_string(value: String) {
    if extra_checks {
        writer.add_int_leb128(ByteBufferType::String.value)
    }

    // Duplicated string
    let index = strings.index_of(value)
    if index.is_some() {
        writer.add_int_leb128(index!!)
        ret
    }

    // New string
    writer.add_int_leb128(strings.len)
    strings[] = value
}

fun ByteBuffer.read_string(): String {
    if extra_checks {
        let tag_byte = reader.read_int_leb128()
        if tag_byte != ByteBufferType::String.value {
            crash("Invalid tag, expecting String (${ByteBufferType::String.value}), found: $tag_byte")
        }
    }

    let index = reader.read_int_leb128()
    ret strings[index]!!
}

fun ByteBuffer.write_float(value: Float) {
    if extra_checks {
        writer.add_int_leb128(ByteBufferType::Float.value)
    }
    writer.add_float_ieee754_32(value)
}

fun ByteBuffer.read_float(): Float {
    if extra_checks {
        let tag_byte = reader.read_int_leb128()
        if tag_byte != ByteBufferType::Float.value {
            crash("Invalid tag, expecting Float (${ByteBufferType::Float.value}), found: $tag_byte")
        }
    }

    ret reader.read_float_ieee754_32()
}

fun ByteBuffer.write_long(value: Long) {
    if extra_checks {
        writer.add_int_leb128(ByteBufferType::Long.value)
    }
    writer.add_long_leb128(value)
}

fun ByteBuffer.read_long(): Long {
    if extra_checks {
        let tag_byte = reader.read_int_leb128()
        if tag_byte != ByteBufferType::Long.value {
            crash("Invalid tag, expecting Long (${ByteBufferType::Long.value}), found: $tag_byte")
        }
    }

    ret reader.read_long_leb128()
}

fun ByteBuffer.write_boolean(value: Boolean) {
    if extra_checks {
        writer.add_int_leb128(ByteBufferType::Boolean.value)
    }
    writer.add_int_leb128(if value { 1 } else { 0 })
}

fun ByteBuffer.read_boolean(): Boolean {
    if extra_checks {
        let tag_byte = reader.read_int_leb128()
        if tag_byte != ByteBufferType::Boolean.value {
            crash("Invalid tag, expecting Boolean (${ByteBufferType::Boolean.value}), found: $tag_byte")
        }
    }

    ret reader.read_int_leb128() == 1
}

fun ByteBuffer.finish_write(): List<Byte> {
    let list = List::new<Byte>()
    let writer2 = ByteWriter::new()

    // Magic number
    writer2.add_int_be(0xfeedadad)
    // Version
    writer2.add_int_be(0x00000001)
    // Contains extra checks
    writer2.add_int_leb128(if extra_checks { 1 } else { 0 })

    // String table for deduplication
    writer2.add_int_leb128(strings.len)
    repeat strings.len {
        writer2.add_string_utf8_with_size_leb128(strings[it]!!)
    }

    // Size of remaining bytes
    writer2.add_int_leb128(writer.bytes.len)
    writer2.bytes.add_all(writer.bytes)

    ret writer2.bytes
}

fun ByteBuffer.start_read() {
    let magic_number = reader.read_int_be()
    if magic_number != 0xfeedadad {
        crash("Invalid magic number, expecting 0xfeedadad, found: $magic_number")
    }

    let version = reader.read_int_be()
    if version != 0x00000001 {
        crash("Invalid version, expecting 1, found: $version")
    }

    extra_checks = reader.read_int_leb128() == 1

    // String table for deduplication
    let strings_len = reader.read_int_leb128()
    repeat strings_len {
        strings.add(reader.read_string_utf8_with_size_leb128())
    }

    // Verify the size of the remaining bytes
    let bytes_len = reader.read_int_leb128()
    if reader.pos + bytes_len != reader.bytes.len {
        crash("Invalid bytes length")
    }
}

struct ByteBufferFrame {
    write: Boolean
    pos: Int
}

fun ByteBuffer.start_frame(write: Boolean): ByteBufferFrame {
    if extra_checks {
        if write {
            // Marker
            writer.add_int_leb128(0x07)
        } else {
            let marker_byte = reader.read_int_leb128()
            if marker_byte != 0x07 {
                crash("Invalid frame marker, expecting 0x07, found: $marker_byte, pos: ${reader.pos}")
            }
        }
    }

    ret ByteBufferFrame @[
        write,
        pos: if write { writer.bytes.len } else { reader.pos }
    ]
}

fun ByteBuffer.end_frame(frame: ByteBufferFrame) {
    if extra_checks {
        if frame.write {
            let size = writer.bytes.len - frame.pos
            writer.add_int_leb128(size)
        } else {
            let prev_pos = reader.pos
            let size = reader.read_int_leb128()
            let expected = prev_pos - frame.pos

            if size != expected {
                crash("Invalid frame, size written: $size, bytes read: $expected")
            }
        }
    }
}