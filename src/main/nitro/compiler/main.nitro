include "./includes.nitro"

// TODO run inline tests
// TODO generate extern types for typescript

let VERSION: String = "0.0.11"

struct ProgramArgs {
    input: String,
    output: String,
    dump_ir: Boolean,
    cache_dir: Optional<String>,
    module_paths: Map<String, String>,
    core_path: Optional<String>,
    no_core_lib: Boolean,
    verbose: Boolean,
    dump_wat: Boolean,
}

fun ProgramArgs::new(): ProgramArgs {
    ret ProgramArgs @[
        input: "",
        output: "output.wasm",
        dump_ir: false,
        cache_dir: None(),
        module_paths: #[],
        core_path: None(),
        no_core_lib: false,
        verbose: false,
        dump_wat: false,
    ]
}

fun main() {
    let args = runtime::get_program_args()

    let i = 0
    let program_path = args[i]!!
    i += 1

    let prog = ProgramArgs::new()

    // Process args
    while i < args.len {
        let arg = args[i]!!

        if arg == "--help" {
            Log::info("Usage: compiler <input> -o <output> --cache-dir <cache>")
            ret
        }

        if arg == "--version" {
            let v = VERSION
            Log::info("Nitro Compiler v$v")
            ret
        }

        if arg == "--cache-dir" {
            i += 1

            if i >= args.len {
                Log::error("Missing cache directory")
                ret
            }

            let cache_dir = args[i]!!
            i += 1
            prog.cache_dir = Some(cache_dir)
            continue
        }

        if arg == "--dump-ir" {
            prog.dump_ir = true
            i += 1
            continue
        }

        if arg == "--dump-wat" {
            prog.dump_wat = true
            i += 1
            continue
        }

        if arg == "--no-core" {
            prog.no_core_lib = true
            i += 1
            continue
        }

        if arg == "--verbose" {
            prog.verbose = true
            i += 1
            continue
        }

        if arg == "--core-path" {
            i += 1

            if i >= args.len {
                Log::error("Missing core path")
                ret
            }

            let core_path = args[i]!!
            i += 1

            prog.core_path = Some(core_path)
            continue
        }

        if arg == "-m" || arg == "--mod" {
            i += 1

            if i >= args.len {
                Log::error("Missing module definitions")
                Log::info("Help: --mod <name>:<path>")
                Log::info("e.g. --mod math:./math.nitro")
                ret
            }

            let mod_def = args[i]!!
            i += 1

            let split = mod_def.index_of(":")
            if split.is_none() {
                Log::error("Invalid module definition: $mod_def")
                Log::info("Help: --mod <name>:<path>")
                Log::info("e.g. --mod math:./math.nitro")
                ret
            }
            let name = mod_def.substring(0, split!!)
            let path = mod_def.substring(split!! + 1, mod_def.len)

            if name == "" || path == "" {
                Log::error("Invalid module definition: $mod_def")
                Log::info("Help: --mod <name>:<path>")
                Log::info("e.g. --mod math:./math.nitro")
                ret
            }

            prog.module_paths[name] = path
            continue
        }

        if arg == "-o" || arg == "--output" {
            i += 1

            if i >= args.len {
                Log::error("Missing output file")
                ret
            }

            let output = args[i]!!
            i += 1
            prog.output = output
            continue
        }

        if prog.input == "" {
            i += 1
            prog.input = arg
            continue
        }

        Log::error("Unknown argument: $arg")
        ret
    }

    // Validate args
    if prog.input == "" {
        Log::error("Missing input file")
        Log::info("Help: create a main.nitro file and run 'nitro main.nitro'")
        Log::info("Example main.nitro:")
        Log::info("```nitro")
        Log::info("fun main() {")
        Log::info("    println(\"Hello, World!\")")
        Log::info("}")
        Log::info("```")
        ret
    }

    let input_path = FilePath::new(prog.input)
    let meta = input_path.get_metadata()

    if meta.is_err() {
        Log::error("Error reading input file '${prog.input}': $meta")
        ret
    }

    if meta!!.file_type != FileType::RegularFile {
        Log::error("Input is not a regular file '${prog.input}'")
        ret
    }

    if meta!!.size == 0L {
        Log::error("Input file is empty '${prog.input}'")
        ret
    }

    if prog.verbose {
        Log::info("Compiling ${prog.input} to ${prog.output}")
    }

    // Perform compilation
    if !CompilationUnit::compile_all(prog) {
        wasi::proc_exit(1)
    }
}
