
include "./lexer/lexer.nitro"
include "./lexer/token.nitro"
include "./lexer/span.nitro"
include "./parser/parser.nitro"
include "./parser/parse_error.nitro"
include "./parser/parser_utils.nitro"
include "./parser/definition.nitro"
include "./parser/definition/annotation.nitro"
include "./parser/definition/const.nitro"
include "./parser/definition/enum.nitro"
include "./parser/definition/function.nitro"
include "./parser/definition/include.nitro"
include "./parser/definition/module.nitro"
include "./parser/definition/option.nitro"
include "./parser/definition/struct.nitro"
include "./parser/definition/test.nitro"
include "./parser/definition/type_alias.nitro"
include "./parser/definition/type_parameter.nitro"
include "./parser/definition/type_pattern.nitro"
include "./parser/definition/type_usage.nitro"
include "./parser/statement.nitro"
include "./parser/statement/defer.nitro"
include "./parser/statement/for.nitro"
include "./parser/statement/foreign_block.nitro"
include "./parser/statement/if.nitro"
include "./parser/statement/let.nitro"
include "./parser/statement/loop.nitro"
include "./parser/statement/repeat.nitro"
include "./parser/statement/while.nitro"
include "./parser/statement/when.nitro"
include "./parser/expression.nitro"
include "./parser/expression/base.nitro"
include "./parser/expression/binary_operation.nitro"
include "./parser/expression/break.nitro"
include "./parser/expression/const_expr.nitro"
include "./parser/expression/continue.nitro"
include "./parser/expression/if.nitro"
include "./parser/expression/lambda.nitro"
include "./parser/expression/list.nitro"
include "./parser/expression/literal.nitro"
include "./parser/expression/map.nitro"
include "./parser/expression/return.nitro"
include "./parser/expression/set.nitro"
include "./parser/expression/simple.nitro"
include "./parser/expression/size_of.nitro"
include "./parser/expression/string.nitro"
include "./parser/expression/when.nitro"
include "./parser/expression/with_suffix.nitro"
include "./reporter.nitro"
include "./program/program.nitro"
include "./program/code.nitro"
include "./program/code_inst.nitro"
include "./program/code_block.nitro"
include "./program/var.nitro"
include "./test.nitro"

fun compile() {
    let start = Instant::now()
    let program = Program::new()

    let lexer = Lexer::new(source_code, "test.nitro")
    lexer.read_all()

    let parser = Parser::new(lexer, program)

    parser.read_file()

    let end = Instant::now()
    let elapsed = (end - start).to_milliseconds()
    let bytes = get_memory().get_used_bytes()

    println("Time: $elapsed ms")
    println("Memory used: $bytes bytes")

    println("Includes:")
    for def in program.includes {
        println(def)
        println("--------")
    }

    println("TypeAliases:")
    for def in program.type_aliases {
        println(def)
        println("--------")
    }

    println("Modules:")
    for def in program.modules {
        println(def)
        println("--------")
    }

    println("Structs:")
    for def in program.structs {
        println(def)
        println("--------")
    }

    println("Options:")
    for def in program.options {
        println(def)
        println("--------")
    }

    println("Consts:")
    for def in program.consts {
        println(def)
        println("--------")
    }

    println("Functions:")
    for def in program.functions {
        println(def)
        println("--------")
    }

    println("--------")

    if program.reporter.has_reports() {
        println("${program.reporter.report_count} Error reports:")
        program.reporter.print_all()
    }
}

fun main() {
    compile()
}
