include "./includes.nitro"

let new_compiler: Boolean = true

// TODO CLI interface
// TODO run inline tests
// TODO generate extern types for typescript

fun main() {
    println("New compiler: $new_compiler")

    let args = runtime::get_program_args()
    let input = args[1].get_or_default("src/main/nitro/compiler/main.nitro")
    let output = args[2].get_or_default("output.wasm")
    let cache = args[3]

    println("Input: $input")
    println("Output: $output")
    println("Cache: $cache")

    CompilationUnit::compile_all(input, output, cache)
}

// TMP
// Reads the bytes from the file, all at once
fun FilePath.read_bytes2(): Result<List<Byte>, IoError> {
    let cpath = ffi::string_to_cstring(path)
    defer ffi::free(cpath)

    let file_fd = IntPtr@[value: 0]

    let rights = wasi::RIGHTS_FD_READ | wasi::RIGHTS_FD_SEEK | wasi::RIGHTS_FD_TELL
    let rc = wasi::path_open(wasi::FC_PREOPENED, wasi::DIRFLAGS_NONE,
        cpath, path.bytes_len,
        wasi::OFLAGS_NONE, rights, rights,
        wasi::FDFLAGS_NONE, file_fd
    )
    if rc != 0 {
        ret Err(IoError @[
            message: "read_bytes: wasi::path_open failed '$path'",
            code: wasi::ErrorCode::from_variant(rc)!!.to_string()
        ])
    }

    let mem_buff = Array::new<Byte>(4096)
    let nread = IntPtr@[value: 0]

    let iovec = wasi::IOVec @[
        buf: mem_buff.data_ptr,
        buf_len: mem_buff.len,
    ]

    let bytes = []

    loop {
        let rc = wasi::fd_read(file_fd.value, ptr_of(iovec), 1, nread)
        if rc != 0 {
            ret Err(IoError @[
                message: "read_bytes: wasi::fd_read failed '$path'",
                code: wasi::ErrorCode::from_variant(rc)!!.to_string()
            ])
        }

        if nread.value == 0 {
            break
        }

        repeat nread.value {
            bytes[] = mem_buff[it]
        }
    }

    let rc = wasi::fd_close(file_fd.value)
    if rc != 0 {
        ret Err(IoError @[
            message: "read_bytes: wasi::fd_close failed '$path'",
            code: wasi::ErrorCode::from_variant(rc)!!.to_string(),
        ])
    }

    ret Ok(bytes)
}