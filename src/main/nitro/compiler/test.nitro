let source_code: String = r#"

struct String {
    byte_len: Int
    ptr: RawArray<Byte>
}

@ValueType
option Optional<#Value> {
    None
    Some { value: #Value }
}

include "./main.nitro"

type_alias Int32 = Int

let PI: Float = 3

mod Test {

}

@Test
fun add(a: Int, b: Int): Int = 0

fun <#A, #B> add2(a: #A, b: #B): #A = 0

fun a() {
    let i: Int = 0

    if 1 { 1 } else { 0 }

    repeat 10 {
        let inner = 42
    }
}

"#

let tokenizer_test2: String = r#"
// INT_NUMBER
12345
0
0x123456789abcdf
0x123456789ABCDF
0o1234567
0b1010101010101010101010101010101010101010101010101010101010101010
+1
-1
// LONG_NUMBER
123L
0L
1l
-1L
+42l
// FLOAT_NUMBER
1.0
.025
1f
0f
-1f
1.0f
1.0F
1.0e10
1.0e-10
+1.0e+10d
-1.0e-10D
"#

let tokenizer_test: String = r#"
..=
..<
@{
%[
#[
@[
::
->
||
or
&&
and
^^
xor
<=>
==
!=
<=
>=
!!
+=
-=
*=
/=
%=
?
_
.
(
)
{
[
]
,
:
+
-
*
/
^
$
%
@
#
|
&
not
!
=
<
>
this
This
fun
let
mod
struct
ret
return
size_of
sizeOf
sizeof
option
internal
rec
tag
defer
type_alias
typeAlias
typealias
enum
nothing
when
match
alias
if
else
for
in
while
repeat
loop
is
as
true
false
null
include
break
continue
use
mut
json!
test!
"#
