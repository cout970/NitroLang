
struct NTypeAlias {
    span: Span
    annotations: NAnnotationContainer
    path: String
    name: String
    full_name: String
    generics: NGenericParams
    type_usage: NTypeUsage
    alias_type: Optional<Type>
}

fun NTypeAlias.to_string() -> String {
    let full_name = Path::join(path, name)

    ret "${annotations}typealias $full_name$generics = $type_usage // $span"
}

fun ByteBuffer.serialize_type_alias(def: NTypeAlias) {
    let frame = start_frame(true)
    serialize_span(def.span)
    serialize_annotation_container(def.annotations)
    write_string(def.path)
    write_string(def.name)
    serialize_generic_params(def.generics)
    serialize_type_usage(def.type_usage)
    end_frame(frame)
}

fun ByteBuffer.deserialize_type_alias(): NTypeAlias {
    let frame = start_frame(false)
    let span = deserialize_span()
    let annotations = deserialize_annotation_container()
    let path = read_string()
    let name = read_string()
    let generics = deserialize_generic_params()
    let type_usage = deserialize_type_usage()
    end_frame(frame)

    ret NTypeAlias @[
        span,
        annotations,
        path,
        name,
        full_name: Path::join(path, name),
        generics,
        type_usage,
        alias_type: None(),
    ]
}
