
struct NStruct {
    id: Id
    span: Span
    annotations: NAnnotationContainer
    path: String
    name: String
    full_name: String
    fields: List<NStructField>
    generics: NGenericParams
    parent: Optional<NOption>
    is_enum: Boolean
}

struct NStructField {
    span: Span
    name: String
    parent_struct: NStruct
    offset: Int
    type_usage: NTypeUsage
    field_type: Optional<Type>
}

fun NStruct.get_ordering(other: NStruct): Ordering = this.id <=> other.id

fun NStruct.to_string(): String {
    let fields_str = if fields.len > 0 { "{\n" } else { "{" }

    for field in fields {
        fields_str += "  ${field.name}: ${field.type_usage}\n"
    }
    fields_str = fields_str + "}"
    let full_name = Path::join(path, name)

    ret "$id: ${annotations}struct $full_name$generics $fields_str  // $span"
}

fun NStructField.to_string(): String {
    ret "field $offset: $name: $type_usage // $span"
}

fun NStruct.add_rc_fields() {
//    if is_enum || annotations[ANNOTATION_NO_GC].is_some() {
//        ret
//    }

    if !ENABLE_RC_GC || annotations[ANNOTATION_TMP_RC].is_none() {
        ret
    }

    fields[] = NStructField @[
        span,
        name: FIELD_RC_HEADER,
        parent_struct: this,
        offset: fields.len,
        type_usage: NTypeUsage::simple_with_path(span, "Rc", "RcHeader"),
        field_type: None(),
    ]
}


fun ByteBuffer.serialize_struct(value: NStruct) {
    let frame = start_frame(true)
    serialize_id(value.id)
    serialize_span(value.span)
    serialize_annotation_container(value.annotations)
    write_string(value.path)
    write_string(value.name)
    serialize_generic_params(value.generics)
    write_boolean(value.is_enum)
    write_int(value.fields.len)
    for f in value.fields {
        serialize_struct_field(f)
    }
    end_frame(frame)
}

fun ByteBuffer.deserialize_struct(): NStruct {
    let frame = start_frame(false)
    let id = deserialize_id()
    let span = deserialize_span()
    let annotations = deserialize_annotation_container()
    let path = read_string()
    let name = read_string()
    let generics = deserialize_generic_params()
    let fields = []
    let is_enum = read_boolean()
    let parent = None()
    let full_name = Path::join(path, name)
    let instance = NStruct @[id, span, annotations, path, name, full_name, generics, fields, parent, is_enum]
    repeat read_int() {
        instance.fields[] = deserialize_struct_field(instance)
    }
    end_frame(frame)
    ret instance
}

fun ByteBuffer.serialize_struct_field(value: NStructField) {
    let frame = start_frame(true)
    serialize_span(value.span)
    write_string(value.name)
    write_int(value.offset)
    serialize_type_usage(value.type_usage)
    end_frame(frame)
}

fun ByteBuffer.deserialize_struct_field(parent_struct: NStruct): NStructField {
    let frame = start_frame(false)
    let span = deserialize_span()
    let name = read_string()
    let offset = read_int()
    let type_usage = deserialize_type_usage()
    end_frame(frame)

    ret NStructField @[
        span,
        name,
        parent_struct,
        offset,
        type_usage,
        field_type: None(),
    ]
}
