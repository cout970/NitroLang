
type_alias NInstId = Id

struct NInst {
    id: NInstId
    span: Span
    block: NBlockId
    kind: NInstKind
    type_token: Optional<TypeToken>
    back_references: List<NInstId>
}

option NInstKind {
    Let {
        variable: NVarId
    }
    LetUpvalue {
        variable: NVarId
    }
    IfStart {
        condition: NInstId
    }
    IfElse {}
    IfEnd {}
    IfChoose  {
        condition: NInstId
        if_true: NInstId
        if_false: NInstId
    }
    LoopStart {
        break_block: NBlockId
        continue_block: NBlockId
    }
    LoopEnd {}
    BlockJump {
        backwards: Boolean
        block: Optional<NBlockId>
    }
    WhenStart {}
    WhenEnd {
        branches: List<NInstId>
        variable: Optional<NVarId>
    }
    FunCall {
        path: String
        name: String
        explicit_receiver: Boolean
        arguments: List<NInstId>
        explicit_type_arguments: List<NTypeUsage>
        call_site: Optional<FunCallSite>
    }
    BinaryOp {
        op: BinaryOperator
        left: NInstId
        right: NInstId
    }
    Literal {
        value: NConstExpr
    }
    Return {
        value: NInstId
    }
    IsType {
        value: NInstId
        type_pattern: NTypePattern
    }
    AsType {
        value: NInstId
        type_usage: NTypeUsage
    }
    LoadVar {
        path: String
        name: String
        variable: Optional<NVarId>
        constant: Optional<NConst>
    }
    StoreVar {
        path: String
        name: String
        value: NInstId
        variable: Optional<NVarId>
    }
    LoadField {
        instance: NInstId
        name: String
        field: Optional<NStructField>
        field_type_token: Optional<TypeToken>
        call_site_generics: Optional<CallSiteGenerics>
    }
    StoreField {
        instance: NInstId
        name: String
        field: Optional<NStructField>
        field_type_token: Optional<TypeToken>
        call_site_generics: Optional<CallSiteGenerics>
        value: NInstId
    }
    SizeOf {
        type_usage: NTypeUsage
        type_token: Optional<TypeToken>
    }
    Alloc {
        type_usage: NTypeUsage
        type_token: Optional<TypeToken>
        is_enum: Boolean
    }
    Lambda {
        instance: NLambda
    }
    Link {
        linked_id: NInstId
    }
    Comment {
        text: String
    }
    Noop {}
}

fun NCode.add_inst(
    span: Span,
    kind: NInstKind,
): NInst {
    let i = NInst @[
        id: inst_id_provider.next(),
        span,
        block: current_block,
        kind,
        type_token: None(),
        back_references: [],
    ]
    inst_list[] = i
    ret i
}

fun NCode.add_inst_in_block(
    span: Span,
    block: NBlockId,
    kind: NInstKind,
): NInst {
    let i = NInst @[
        id: inst_id_provider.next(),
        span,
        block,
        kind,
        type_token: None(),
        back_references: [],
    ]
    inst_list[] = i
    ret i
}

fun NCode.add_noop(span: Span): NInst {
    ret add_inst(span, NInstKind::Noop @[])
}

fun NCode.add_comment(span: Span, text: String): NInst {
    ret add_inst(span, NInstKind::Comment @[text])
}

fun NCode.add_let(
    span: Span,
    name: String,
    type_usage: Optional<NTypeUsage>
): NVar {
    let code_depth = 0
    let curr = this.parent_code
    while curr.is_some() {
        code_depth += 1
        curr = curr!!.parent_code
    }

    let variable = NVar @[
        id: variable_id_provider.next(),
        span,
        block: current_block,
        name,
        type_usage: if type_usage.is_some() { type_usage!! } else { NTypeUsage::unresolved(span) },
        type_token: None(),
        defined_in: this,
        is_parameter: false,
        is_upvalue: false,
        code_depth,
    ]
    vars_map[variable.id] = variable

    add_inst(span, NInstKind::Let @[variable: variable.id])
    ret variable
}

fun NCode.add_let_upvalue(
    span: Span,
    variable: NVarId,
): NInst {
    let kind = NInstKind::LetUpvalue @[variable]
    let i = NInst @[
        id: inst_id_provider.next(),
        span,
        block: current_block,
        kind,
        type_token: None(),
        back_references: [],
    ]

    let added = false
    repeat inst_list.len {
        let inst = inst_list[it]!!

        if inst.kind is NInstKind::LetUpvalue {
            continue
        }

        added = true
        inst_list.insert(it, i)
        break
    }

    if !added {
        inst_list[] = i
    }

    ret i
}

fun NCode.add_if_start(
    span: Span,
    condition: NInstId
): NInst {
    ret add_inst(span, NInstKind::IfStart @[condition])
}

fun NCode.add_if_else(
    span: Span
): NInst {
    ret add_inst(span, NInstKind::IfElse @[])
}

fun NCode.add_if_end(
    span: Span
): NInst {
    ret add_inst(span, NInstKind::IfEnd @[])
}

fun NCode.add_if_choose(
    span: Span,
    condition: NInstId,
    if_true: NInstId,
    if_false: NInstId
): NInst {
    ret add_inst(span, NInstKind::IfChoose @[condition, if_true, if_false])
}

fun NCode.add_lit(
    span: Span
    value: NConstExpr
): NInst {
    ret add_inst(span, NInstKind::Literal @[value])
}

fun NCode.add_lit_int(span: Span, value: Int): NInst {
    ret this.add_lit(span, NConstExpr::NConstInt @[value])
}

fun NCode.add_lit_long(span: Span, value: Long): NInst {
    ret this.add_lit(span, NConstExpr::NConstLong @[value])
}

fun NCode.add_lit_float(span: Span, value: Float): NInst {
    ret this.add_lit(span, NConstExpr::NConstFloat @[value])
}

fun NCode.add_lit_boolean(span: Span, value: Boolean): NInst {
    ret this.add_lit(span, NConstExpr::NConstBoolean @[value])
}

fun NCode.add_lit_string(span: Span, value: String): NInst {
    ret this.add_lit(span, NConstExpr::NConstString @[value])
}

fun NCode.add_lit_nothing(span: Span): NInst {
    ret this.add_lit(span, NConstExpr::NConstNothing @[])
}

fun NCode.add_return(
    span: Span,
    value: NInstId,
): NInst {
    ret add_inst(span, NInstKind::Return @[value])
}

fun NCode.add_is_type(
    span: Span,
    value: NInstId,
    type_pattern: NTypePattern,
): NInst {
    ret add_inst(span, NInstKind::IsType @[value, type_pattern])
}

fun NCode.add_as_type(
    span: Span,
    value: NInstId,
    type_usage: NTypeUsage,
): NInst {
    ret add_inst(span, NInstKind::AsType @[value, type_usage])
}

fun NCode.add_load_var(
    span: Span,
    path: String,
    name: String,
    variable: Optional<NVarId>
): NInst {
    ret add_inst(span, NInstKind::LoadVar @[
        path,
        name,
        variable,
        constant: None(),
    ])
}

fun NCode.add_load_const(
    span: Span,
    path: String,
    name: String,
    constant: Optional<NConst>
): NInst {
    ret add_inst(span, NInstKind::LoadVar @[
        path,
        name,
        variable: None(),
        constant,
    ])
}

fun NCode.add_store_var(
    span: Span,
    path: String,
    name: String,
    value: NInstId,
    variable: Optional<NVarId>
): NInst {
    ret add_inst(span, NInstKind::StoreVar @[
        path,
        name,
        value,
        variable,
    ])
}

fun NCode.add_load_field(
    span: Span,
    instance: NInstId,
    name: String,
): NInst {
    ret add_inst(span, NInstKind::LoadField @[
        instance,
        name,
        field: None(),
        field_type_token: None(),
        call_site_generics: None(),
    ])
}

fun NCode.add_store_field(
    span: Span,
    instance: NInstId,
    name: String,
    value: NInstId,
): NInst {
    ret add_inst(span, NInstKind::StoreField @[
        instance,
        name,
        field: None(),
        field_type_token: None(),
        call_site_generics: None(),
        value,
    ])
}

fun NCode.add_loop_start(
    span: Span,
    break_block: NBlockId,
    continue_block: NBlockId
): NInst {
    ret add_inst(span, NInstKind::LoopStart @[break_block, continue_block])
}

fun NCode.add_loop_end(span: Span): NInst {
    ret add_inst(span, NInstKind::LoopEnd @[])
}

fun NCode.add_block_jump(
    span: Span,
    backwards: Boolean,
    block: Optional<NBlockId>
): NInst {
    ret add_inst(span, NInstKind::BlockJump @[backwards, block])
}

fun NCode.add_fun_call(
    span: Span,
    path: String,
    name: String,
    explicit_receiver: Boolean,
    arguments: List<NInstId>,
    explicit_type_arguments: List<NTypeUsage>
): NInst {
    ret add_inst(span, NInstKind::FunCall @[
        path,
        name,
        explicit_receiver,
        arguments,
        explicit_type_arguments,
        call_site: None(),
    ])
}

fun NCode.add_binary_op(
    span: Span,
    op: BinaryOperator,
    left: NInstId,
    right: NInstId,
): NInst {
    ret add_inst(span, NInstKind::BinaryOp @[op, left, right])
}

fun NCode.add_when_start(span: Span): NInst {
    ret add_inst(span, NInstKind::WhenStart @[])
}

fun NCode.add_when_end(span: Span, branches: List<NInstId>, variable: Optional<NVarId>): NInst {
    ret add_inst(span, NInstKind::WhenEnd @[branches, variable])
}

fun NCode.add_size_of(
    span: Span,
    type_usage: NTypeUsage,
): NInst {
    ret add_inst(span, NInstKind::SizeOf @[type_usage, type_token: None()])
}

fun NCode.add_alloc(
    span: Span,
    type_usage: NTypeUsage,
): NInst {
    ret add_inst(span, NInstKind::Alloc @[
        type_usage,
        type_token: None(),
        is_enum: false,
    ])
}

fun NCode.add_lambda(
    span: Span,
    instance: NLambda,
): NInst {
    ret add_inst(span, NInstKind::Lambda @[instance])
}

fun NCode.add_link(
    span: Span,
    linked_id: NInstId,
): NInst {
    ret add_inst(span, NInstKind::Link @[linked_id])
}

fun NCode.duplicate_inst(index: Int) {
    let original = inst_list[index]!!

    let dup = NInst @[
        id: original.id,
        span: original.span,
        block: original.block,
        kind: original.kind,
        type_token: original.type_token,
        back_references: original.back_references,
    ]

    // We swap the ids, to preserve references to this instruction
    // For example:
    // #1 = load_var "x"
    // #2 = store_var "y" #1
    // After duplication:
    // #3 = load_var "x"
    // #1 = load_var "x"
    // #2 = store_var "y" #1
    // The store_var doesn't need to be updated, because we didn't change the order, and #3 can be safely modified
    original.id = inst_id_provider.next()
    original.back_references.clear()

    inst_list.insert(index + 1, dup)
}

fun NCode.next_inst(id: NInstId): Optional<NInst> {
    let index = index_of_inst(id)?
    ret inst_list[index + 1]
}

fun NInstKind.get_name(): String {
    ret when {
        this is NInstKind::Let -> "let"
        this is NInstKind::LetUpvalue -> "let-upvalue"
        this is NInstKind::IfStart -> "if-start"
        this is NInstKind::IfElse -> "if-else"
        this is NInstKind::IfEnd -> "if-end"
        this is NInstKind::IfChoose -> "if-choose"
        this is NInstKind::LoopStart -> "loop-start"
        this is NInstKind::LoopEnd -> "loop-end"
        this is NInstKind::BlockJump -> "block-jump"
        this is NInstKind::FunCall -> "fun-call"
        this is NInstKind::BinaryOp -> "binary-op"
        this is NInstKind::WhenStart -> "when-start"
        this is NInstKind::WhenEnd -> "when-end"
        this is NInstKind::Literal -> "literal"
        this is NInstKind::Return -> "return"
        this is NInstKind::IsType -> "is-type"
        this is NInstKind::AsType -> "as-type"
        this is NInstKind::LoadVar -> "load-var"
        this is NInstKind::StoreVar -> "store-var"
        this is NInstKind::LoadField -> "load-field"
        this is NInstKind::StoreField -> "store-field"
        this is NInstKind::SizeOf -> "size-of"
        this is NInstKind::Alloc -> "alloc"
        this is NInstKind::Lambda -> "lambda"
        this is NInstKind::Link -> "link"
        this is NInstKind::Noop -> "noop"
        this is NInstKind::Comment -> "comment"
        else -> crash("Unknown NInstKind variant")
    }
}

fun NInst.to_string(): String {
    let t = this.kind
    ret when {
        t is NInstKind::Let -> {
            let kind = t as NInstKind::Let

            "let var:${kind.variable}"
        }
        t is NInstKind::LetUpvalue -> {
            let kind = t as NInstKind::LetUpvalue

            "let-upvalue var:${kind.variable}"
        }
        t is NInstKind::IfStart -> {
            let kind = t as NInstKind::IfStart

            "if-start #${kind.condition}"
        }
        t is NInstKind::IfElse -> {
            "if-else"
        }
        t is NInstKind::IfEnd -> {
            "if-end"
        }
        t is NInstKind::IfChoose -> {
            let kind = t as NInstKind::IfChoose

            "if-choose #${kind.condition} -> #${kind.if_true} | #${kind.if_false}"
        }
        t is NInstKind::LoopStart -> {
            let kind = t as NInstKind::LoopStart

            "loop-start break_block: ${kind.break_block}, continue_block: ${kind.continue_block}"
        }
        t is NInstKind::LoopEnd -> {
            "loop-end"
        }
        t is NInstKind::BlockJump -> {
            let kind = t as NInstKind::BlockJump

            "block-jump backwards: ${kind.backwards}, block: ${kind.block}"
        }
        t is NInstKind::BinaryOp -> {
            let kind = t as NInstKind::BinaryOp

            "binary-opt op: ${kind.op}, left: #${kind.left}, right: #${kind.right}"
        }
        t is NInstKind::FunCall -> {
            let kind = t as NInstKind::FunCall

            if kind.call_site.is_some() {
                let call_site = kind.call_site!!
                let header = call_site.target.header
                let tp = ""

                if call_site.call_site_generics.resolved.is_not_empty() {
                    tp = "<${call_site.call_site_generics.resolved}>"
                }

                let args = ""

                repeat call_site.argument_types.len {
                    if args.is_not_empty() {
                        args += ", "
                    }

                    args += "[#${kind.arguments[it]!!} ${header.parameters[it]!!.name}: ${call_site.argument_types[it]!!}]"
                }

                ret "fun-call fun.${header.full_name}${header.span.link_params} $tp $args"
            }

            let args = "()"
            let type_args = ""

            if kind.arguments.is_not_empty() {
                args = "("
                for arg in kind.arguments {
                    args += "#$arg, "
                }
                args = args.slice(0, -2)
                args += ")"
            }

            if kind.explicit_type_arguments.is_not_empty() {
                type_args += "<"
                for arg in kind.explicit_type_arguments {
                    type_args += "$arg, "
                }
                type_args = type_args.slice(0, -2)
                type_args += ">"
            }

            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }

            "fun-call $full_name$type_args$args"
        }
        t is NInstKind::WhenStart -> {
            "when-start"
        }
        t is NInstKind::WhenEnd -> {
            "when-end"
        }
        t is NInstKind::Literal -> {
            let kind = t as NInstKind::Literal

            "literal ${kind.value}"
        }
        t is NInstKind::Return -> {
            let kind = t as NInstKind::Return

            "return #${kind.value}"
        }
        t is NInstKind::IsType -> {
            let kind = t as NInstKind::IsType

            "is-type #${kind.value} ${kind.type_pattern}"
        }
        t is NInstKind::AsType -> {
            let kind = t as NInstKind::AsType

            "as-type #${kind.value} ${kind.type_usage}"
        }
        t is NInstKind::LoadVar -> {
            let kind = t as NInstKind::LoadVar
            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }
            let extra = "$full_name [unlinked]"

            if kind.variable.is_some() {
                extra = "var:${kind.variable!!}"
            }
            if kind.constant.is_some() {
                extra = "[const: ${kind.constant!!.full_name} ${kind.constant!!.span.link}]"
            }

            "load-var $extra"
        }
        t is NInstKind::StoreVar -> {
            let kind = t as NInstKind::StoreVar
            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }
            let extra = "$full_name = #${kind.value} [unlinked]"

            if kind.variable.is_some() {
                extra = "var:${kind.variable!!.to_string()} = #${kind.value}"
            }

            "store-var $extra"
        }
        t is NInstKind::LoadField -> {
            let kind = t as NInstKind::LoadField

            if kind.field_type_token.is_some() {
                ret "load-field #${kind.instance} -> [${kind.name}: ${kind.field_type_token!!}]"
            }

            "load-field #${kind.instance} -> ${kind.name}"
        }
        t is NInstKind::StoreField -> {
            let kind = t as NInstKind::StoreField

            if kind.field_type_token.is_some() {
                ret "store-field #${kind.instance} -> [${kind.name}: ${kind.field_type_token!!}] = #${kind.value}"
            }

            "store-field #${kind.instance} -> ${kind.name} = #${kind.value}"
        }
        t is NInstKind::SizeOf -> {
            let kind = t as NInstKind::SizeOf

            "size_of ${kind.type_usage}"
        }
        t is NInstKind::Alloc -> {
            let kind = t as NInstKind::Alloc

            "alloc ${kind.type_usage}"
        }
        t is NInstKind::Lambda -> {
            let kind = t as NInstKind::Lambda

            "lambda ${kind.instance}"
        }
        t is NInstKind::Link -> {
            let kind = t as NInstKind::Link

            "link #${kind.linked_id}"
        }
        t is NInstKind::Noop -> {
            "noop"
        }
        t is NInstKind::Comment -> {
            let kind = t as NInstKind::Comment
            let line = kind.text.replace("\n", "\\n").trim()

            "// $line"
        }
        else -> crash("Unknown NInstKind variant")
    }
}

fun NCode.var_to_string(variable_id: NVarId): String {
    let variable: NVar = find_var(variable_id)

    let ty = if variable.type_token.is_some() {
        variable.type_token!!.to_string()
    } else {
        variable.type_usage.to_string()
    }

    ret "var:${variable_id} [${variable.name}: $ty]"
}

fun NInst.to_string(code: NCode): String {
    let t = this.kind
    ret when {
        t is NInstKind::Let -> {
            let kind = t as NInstKind::Let

            "let ${code.var_to_string(kind.variable)}"
        }
        t is NInstKind::LetUpvalue -> {
            let kind = t as NInstKind::LetUpvalue

            "let-upvalue ${code.var_to_string(kind.variable)}"
        }
        t is NInstKind::IfStart -> {
            let kind = t as NInstKind::IfStart

            "if-start #${kind.condition}"
        }
        t is NInstKind::IfElse -> {
            "if-else"
        }
        t is NInstKind::IfEnd -> {
            "if-end"
        }
        t is NInstKind::IfChoose -> {
            let kind = t as NInstKind::IfChoose

            "if-choose #${kind.condition} => #${kind.if_true} | #${kind.if_false}"
        }
        t is NInstKind::LoopStart -> {
            let kind = t as NInstKind::LoopStart

            "loop-start break_block: ${kind.break_block}, continue_block: ${kind.continue_block}"
        }
        t is NInstKind::LoopEnd -> {
            "loop-end"
        }
        t is NInstKind::BlockJump -> {
            let kind = t as NInstKind::BlockJump

            "block-jump backwards: ${kind.backwards}, block: ${kind.block}"
        }
        t is NInstKind::BinaryOp -> {
            let kind = t as NInstKind::BinaryOp

            "binary-opt op: ${kind.op}, left: #${kind.left}, right: #${kind.right}"
        }
        t is NInstKind::FunCall -> {
            let kind = t as NInstKind::FunCall

            if kind.call_site.is_some() {
                let call_site = kind.call_site!!
                let header = call_site.target.header
                let tp = ""

                if call_site.call_site_generics.resolved.is_not_empty() {
                    let gp: NGenericParams = call_site.call_site_generics.generic_params
                    let buf = StringBuilder::new()

                    repeat gp.definitions.len {
                        let def: NGeneric = gp.definitions[it]!!
                        let tt: TypeToken = call_site.call_site_generics.resolved[it]!!

                        if buf.is_not_empty() {
                            buf[] = ", "
                        }
                        buf[] = "#${def.name}: $tt"
                    }

                    tp = "<${buf}>"
                }

                let args = ""

                repeat call_site.argument_types.len {
                    if args.is_not_empty() {
                        args += ", "
                    }

                    args += "[#${kind.arguments[it]!!} ${header.parameters[it]!!.name}: ${call_site.argument_types[it]!!}]"
                }

                ret "fun-call fun.${header.full_name}${header.span.link_params} $tp $args"
            }

            let args = "()"
            let type_args = ""

            if kind.arguments.is_not_empty() {
                args = "("
                for arg in kind.arguments {
                    args += "#$arg, "
                }
                args = args.slice(0, -2)
                args += ")"
            }

            if kind.explicit_type_arguments.is_not_empty() {
                type_args += "<"
                for arg in kind.explicit_type_arguments {
                    type_args += "$arg, "
                }
                type_args = type_args.slice(0, -2)
                type_args += ">"
            }

            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }

            "fun-call $full_name$type_args$args"
        }
        t is NInstKind::WhenStart -> {
            "when-start"
        }
        t is NInstKind::WhenEnd -> {
            "when-end"
        }
        t is NInstKind::Literal -> {
            let kind = t as NInstKind::Literal

            "literal ${kind.value}"
        }
        t is NInstKind::Return -> {
            let kind = t as NInstKind::Return

            "return #${kind.value}"
        }
        t is NInstKind::IsType -> {
            let kind = t as NInstKind::IsType

            "is-type #${kind.value} ${kind.type_pattern}"
        }
        t is NInstKind::AsType -> {
            let kind = t as NInstKind::AsType

            "as-type #${kind.value} ${kind.type_usage}"
        }
        t is NInstKind::LoadVar -> {
            let kind = t as NInstKind::LoadVar
            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }
            let extra = "$full_name [unlinked]"

            if kind.variable.is_some() {
                extra = code.var_to_string(kind.variable!!)
            }
            if kind.constant.is_some() {
                extra = "[const: ${kind.constant!!.full_name} ${kind.constant!!.span.link}]"
            }

            "load-var $extra"
        }
        t is NInstKind::StoreVar -> {
            let kind = t as NInstKind::StoreVar
            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }
            let extra = "$full_name = #${kind.value} [unlinked]"

            if kind.variable.is_some() {
                extra = "${code.var_to_string(kind.variable!!)} = #${kind.value}"
            }

            "store-var $extra"
        }
        t is NInstKind::LoadField -> {
            let kind = t as NInstKind::LoadField

            if kind.field_type_token.is_some() {
                ret "load-field #${kind.instance} => [${kind.name}: ${kind.field_type_token!!}]"
            }

            "load-field #${kind.instance} -> ${kind.name}"
        }
        t is NInstKind::StoreField -> {
            let kind = t as NInstKind::StoreField

            if kind.field_type_token.is_some() {
                ret "store-field #${kind.instance} => [${kind.name}: ${kind.field_type_token!!}] = #${kind.value}"
            }

            "store-field #${kind.instance} -> ${kind.name} = #${kind.value}"
        }
        t is NInstKind::SizeOf -> {
            let kind = t as NInstKind::SizeOf

            "size_of ${kind.type_usage}"
        }
        t is NInstKind::Alloc -> {
            let kind = t as NInstKind::Alloc

            "alloc ${kind.type_usage}"
        }
        t is NInstKind::Lambda -> {
            let kind = t as NInstKind::Lambda

            "lambda ${kind.instance}"
        }
        t is NInstKind::Link -> {
            let kind = t as NInstKind::Link

            "link #${kind.linked_id}"
        }
        t is NInstKind::Noop -> {
            "noop"
        }
        t is NInstKind::Comment -> {
            let kind = t as NInstKind::Comment
            let line = kind.text.replace("\n", "\\n").trim()

            "// $line"
        }
        else -> crash("Unknown NInstKind variant")
    }
}
