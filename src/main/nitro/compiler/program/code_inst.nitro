
type_alias NInstId = Int

struct NInst {
    id: NInstId
    span: Span
    current_block: NBlock
    kind: NInstKind
}

option NInstKind {
    Let {
        variable: NVar
    }
    IfStart {
        condition: NInstId
    }
    IfElse {}
    IfEnd  {}
    LoopStart {
        break_block: NBlock
        continue_block: NBlock
    }
    LoopEnd {}
    LoopJump {
        backwards: Boolean
        loop_block: Optional<NBlock>
    }
    FunCall {
        path: String
        name: String
        arguments: List<NInstId>
        explicit_type_arguments: List<NTypeUsage>
    }
    Literal {
        value: NConstExpr
    }
    LoadVar {
        path: String
        name: String
        variable: Optional<NVar>
    }
    StoreVar {
        path: String
        name: String
        value: NInstId
        variable: Optional<NVar>
    }
    Comment {
        text: String
    }
    Noop {}
}

fun NCode.add_noop(span: Span): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::Noop @[],
    ]
    inst[] = i
    ret i
}

fun NCode.add_comment(span: Span, text: String): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::Comment @[text],
    ]
    inst[] = i
    ret i
}

fun NCode.add_let(
    span: Span,
    name: String,
    type_usage: Optional<NTypeUsage>
): NVar {
    last_id += 1
    last_var_id += 1

    let variable = NVar @[
        id: last_var_id,
        span,
        current_block,
        name,
        type_usage,
        defined_by: last_id,
        defined_in: this,
    ]
    vars[] = variable

    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::Let @[variable],
    ]
    inst[] = i
    ret variable
}

fun NCode.add_if_start(
    span: Span,
    condition: NInstId
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::IfStart @[
            condition,
        ],
    ]
    inst[] = i
    ret i
}

fun NCode.add_if_else(
    span: Span
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::IfElse @[],
    ]
    inst[] = i
    ret i
}

fun NCode.add_if_end(
    span: Span
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::IfEnd @[],
    ]
    inst[] = i
    ret i
}

fun NCode.add_lit(
    span: Span
    value: NConstExpr
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::Literal @[value],
    ]
    inst[] = i
    ret i
}

fun NCode.add_int_lit(span: Span, value: Int): NInst {
    ret this.add_lit(span, NConstExpr::NConstInt @[value])
}

fun NCode.add_load_var(
    span: Span,
    path: String,
    name: String,
    variable: Optional<NVar>
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::LoadVar @[
            path,
            name,
            variable,
        ],
    ]
    inst[] = i
    ret i
}

fun NCode.add_store_var(
    span: Span,
    path: String,
    name: String,
    value: NInstId,
    variable: Optional<NVar>
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::StoreVar @[
            path,
            name,
            value,
            variable,
        ],
    ]
    inst[] = i
    ret i
}

fun NCode.add_loop_start(
    span: Span,
    break_block: NBlock,
    continue_block: NBlock
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::LoopStart @[break_block, continue_block]
    ]
    inst[] = i
    ret i
}

fun NCode.add_loop_end(span: Span): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::LoopEnd @[]
    ]
    inst[] = i
    ret i
}

fun NCode.add_loop_jump(
    span: Span,
    backwards: Boolean,
    loop_block: Optional<NBlock>
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::LoopJump @[backwards, loop_block]
    ]
    inst[] = i
    ret i
}

fun NCode.add_fun_call(
    span: Span,
    path: String,
    name: String,
    arguments: List<NInstId>,
    explicit_type_arguments: List<NTypeUsage>
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::FunCall @[
            path,
            name,
            arguments,
            explicit_type_arguments,
        ]
    ]
    inst[] = i
    ret i
}

fun NInst.to_string(): String {
    ret when {
        this.kind is NInstKind::Let -> {
            let kind = this.kind as NInstKind::Let

            "let ${kind.variable.name}"
        }
        this.kind is NInstKind::IfStart -> {
            let kind = this.kind as NInstKind::IfStart

            "if-start #${kind.condition}"
        }
        this.kind is NInstKind::IfElse -> {
            "if-else"
        }
        this.kind is NInstKind::IfEnd -> {
            "if-end"
        }
        this.kind is NInstKind::LoopStart -> {
            let kind = this.kind as NInstKind::LoopStart
            "loop-start break_block: ${kind.break_block.id}, continue_block: ${kind.continue_block.id}"
        }
        this.kind is NInstKind::LoopEnd -> {
            "loop-end"
        }
        this.kind is NInstKind::LoopJump -> {
            let kind = this.kind as NInstKind::LoopJump
            let block = if kind.loop_block.is_some() { kind.loop_block!!.id.to_string() } else { "None" }

            "loop-jump backwards: ${kind.backwards}, loop_block: $block"
        }
        this.kind is NInstKind::FunCall -> {
            let kind = this.kind as NInstKind::FunCall
            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }
            let args = ""
            let type_args = ""

            if kind.arguments.is_not_empty() {
                for arg in kind.arguments {
                    args += "$arg, "
                }
                args = args.slice(0, -2)
            }

            if kind.explicit_type_arguments.is_not_empty() {
                type_args += "<"
                for arg in kind.explicit_type_arguments {
                    type_args += "$arg, "
                }
                type_args = type_args.slice(0, -2)
                type_args += ">"
            }

            "call $full_name$type_args($args)"
        }
        this.kind is NInstKind::Literal -> {
            let kind = this.kind as NInstKind::Literal

            "literal ${kind.value}"
        }
        this.kind is NInstKind::LoadVar -> {
            let kind = this.kind as NInstKind::LoadVar
            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }

            "load-var $full_name"
        }
        this.kind is NInstKind::StoreVar -> {
            let kind = this.kind as NInstKind::StoreVar
            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }

            "store-var $full_name = #${kind.value}"
        }
        this.kind is NInstKind::Noop -> {
            "noop"
        }
        this.kind is NInstKind::Comment -> {
            "// ${(this.kind as NInstKind::Comment).text}"
        }
        else -> crash("Unknown NInstKind variant")
    }
}
