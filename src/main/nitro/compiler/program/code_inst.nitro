
type_alias NInstId = Int

struct NInst {
    id: NInstId
    span: Span
    current_block: NBlock
    kind: NInstKind
}

option NInstKind {
    Let {
        variable: NVar
    }
    IfStart {
        condition: NInstId
    }
    IfElse {}
    IfEnd  {}
    LoopStart {
        break_block: NBlock
        continue_block: NBlock
    }
    LoopEnd {}
    BlockJump {
        backwards: Boolean
        block: Optional<NBlock>
    }
    WhenStart {}
    WhenEnd {}
    FunCall {
        path: String
        name: String
        arguments: List<NInstId>
        explicit_type_arguments: List<NTypeUsage>
    }
    Literal {
        value: NConstExpr
    }
    Return {
        value: NInstId
    }
    LoadVar {
        path: String
        name: String
        variable: Optional<NVar>
    }
    StoreVar {
        path: String
        name: String
        value: NInstId
        variable: Optional<NVar>
    }
    LoadField {
        instance: NInstId
        name: String
    }
    StoreField {
        instance: NInstId
        name: String
        value: NInstId
    }
    Alloc {
        type_usage: NTypeUsage
    }
    Comment {
        text: String
    }
    Noop {}
}

fun NCode.add_noop(span: Span): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::Noop @[],
    ]
    inst[] = i
    ret i
}

fun NCode.add_comment(span: Span, text: String): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::Comment @[text],
    ]
    inst[] = i
    ret i
}

fun NCode.add_let(
    span: Span,
    name: String,
    type_usage: Optional<NTypeUsage>
): NVar {
    last_id += 1
    last_var_id += 1

    let variable = NVar @[
        id: last_var_id,
        span,
        current_block,
        name,
        type_usage,
        defined_by: last_id,
        defined_in: this,
    ]
    vars[] = variable

    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::Let @[variable],
    ]
    inst[] = i
    ret variable
}

fun NCode.add_if_start(
    span: Span,
    condition: NInstId
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::IfStart @[
            condition,
        ],
    ]
    inst[] = i
    ret i
}

fun NCode.add_if_else(
    span: Span
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::IfElse @[],
    ]
    inst[] = i
    ret i
}

fun NCode.add_if_end(
    span: Span
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::IfEnd @[],
    ]
    inst[] = i
    ret i
}

fun NCode.add_lit(
    span: Span
    value: NConstExpr
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::Literal @[value],
    ]
    inst[] = i
    ret i
}

fun NCode.add_int_lit(span: Span, value: Int): NInst {
    ret this.add_lit(span, NConstExpr::NConstInt @[value])
}

fun NCode.add_return(
    span: Span
    value: NInstId
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::Return @[value],
    ]
    inst[] = i
    ret i
}

fun NCode.add_load_var(
    span: Span,
    path: String,
    name: String,
    variable: Optional<NVar>
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::LoadVar @[
            path,
            name,
            variable,
        ],
    ]
    inst[] = i
    ret i
}

fun NCode.add_store_var(
    span: Span,
    path: String,
    name: String,
    value: NInstId,
    variable: Optional<NVar>
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::StoreVar @[
            path,
            name,
            value,
            variable,
        ],
    ]
    inst[] = i
    ret i
}

fun NCode.add_load_field(
    span: Span,
    instance: NInstId,
    name: String,
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::LoadField @[
            instance,
            name,
        ],
    ]
    inst[] = i
    ret i
}

fun NCode.add_store_field(
    span: Span,
    instance: NInstId,
    name: String,
    value: NInstId,
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::StoreField @[
            instance,
            name,
            value,
        ],
    ]
    inst[] = i
    ret i
}

fun NCode.add_loop_start(
    span: Span,
    break_block: NBlock,
    continue_block: NBlock
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::LoopStart @[break_block, continue_block]
    ]
    inst[] = i
    ret i
}

fun NCode.add_loop_end(span: Span): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::LoopEnd @[]
    ]
    inst[] = i
    ret i
}

fun NCode.add_block_jump(
    span: Span,
    backwards: Boolean,
    block: Optional<NBlock>
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::BlockJump @[backwards, block]
    ]
    inst[] = i
    ret i
}

fun NCode.add_fun_call(
    span: Span,
    path: String,
    name: String,
    arguments: List<NInstId>,
    explicit_type_arguments: List<NTypeUsage>
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::FunCall @[
            path,
            name,
            arguments,
            explicit_type_arguments,
        ]
    ]
    inst[] = i
    ret i
}

fun NCode.add_when_start(span: Span): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::WhenStart @[]
    ]
    inst[] = i
    ret i
}

fun NCode.add_when_end(span: Span): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::WhenEnd @[]
    ]
    inst[] = i
    ret i
}

fun NCode.add_alloc(
    span: Span,
    type_usage: NTypeUsage,
): NInst {
    last_id += 1
    let i = NInst @[
        id: last_id,
        span,
        current_block,
        kind: NInstKind::Alloc @[
            type_usage,
        ],
    ]
    inst[] = i
    ret i
}

fun NCode.add_copy(i: NInst, mapping: Map<NInstId, NInstId>): NInst {
    let new_inst = when {
        i.kind is NInstKind::Let -> {
            let kind = i.kind as NInstKind::Let

            let let_var = add_let(i.span, kind.variable.name, kind.variable.type_usage)
            this.find(let_var.defined_by)!!
        }
        i.kind is NInstKind::IfStart -> {
            let kind = i.kind as NInstKind::IfStart

            add_if_start(i.span, mapping[kind.condition]!!)
        }
        i.kind is NInstKind::IfElse -> {
            add_if_else(i.span)
        }
        i.kind is NInstKind::IfEnd -> {
            add_if_end(i.span)
        }
        i.kind is NInstKind::LoopStart -> {
            let kind = i.kind as NInstKind::LoopStart

            add_loop_start(i.span, kind.break_block, kind.continue_block)
        }
        i.kind is NInstKind::LoopEnd -> {

            add_loop_end(i.span)
        }
        i.kind is NInstKind::BlockJump -> {
            let kind = i.kind as NInstKind::BlockJump

            add_block_jump(i.span, kind.backwards, kind.block)
        }
        i.kind is NInstKind::FunCall -> {
            let kind = i.kind as NInstKind::FunCall
            let args = []

            for arg in kind.arguments{
                args[] = mapping[arg]!!
            }

            add_fun_call(i.span, kind.path, kind.name, args, kind.explicit_type_arguments)
        }
        i.kind is NInstKind::WhenStart -> {
            add_when_start(i.span)
        }
        i.kind is NInstKind::WhenEnd -> {
            add_when_end(i.span)
        }
        i.kind is NInstKind::Literal -> {
            let kind = i.kind as NInstKind::Literal

            add_lit(i.span, kind.value)
        }
        i.kind is NInstKind::Return -> {
            let kind = i.kind as NInstKind::Return

            add_return(i.span, kind.value)
        }
        i.kind is NInstKind::LoadVar -> {
            let kind = i.kind as NInstKind::LoadVar

            add_load_var(i.span, kind.path, kind.name, kind.variable)
        }
        i.kind is NInstKind::StoreVar -> {
            let kind = i.kind as NInstKind::StoreVar

            add_store_var(i.span, kind.path, kind.name, mapping[kind.value]!!, kind.variable)
        }
        i.kind is NInstKind::LoadField -> {
            let kind = i.kind as NInstKind::LoadField

            add_load_field(i.span, mapping[kind.instance]!!, kind.name)
        }
        i.kind is NInstKind::StoreField -> {
            let kind = i.kind as NInstKind::StoreField

            add_store_field(i.span, mapping[kind.instance]!!, kind.name, mapping[kind.value]!!)
        }
        i.kind is NInstKind::Alloc -> {
            let kind = i.kind as NInstKind::Alloc

            add_alloc(i.span, kind.type_usage)
        }
        i.kind is NInstKind::Noop -> {
            add_noop(i.span)
        }
        i.kind is NInstKind::Comment -> {
            let kind = i.kind as NInstKind::Comment

            add_comment(i.span, kind.text)
        }
        else -> crash("Unknown NInstKind variant")
    }

    mapping[i.id] = new_inst.id
    ret new_inst
}

fun NInst.to_string(): String {
    let t = this.kind
    ret when {
        t is NInstKind::Let -> {
            let kind = t as NInstKind::Let

            ret if kind.variable.type_usage.is_some() {
                "let ${kind.variable.name}: ${kind.variable.type_usage!!.to_string()}"
            } else {
                "let ${kind.variable.name}: <unresolved>"
            }
        }
        t is NInstKind::IfStart -> {
            let kind = t as NInstKind::IfStart

            "if-start #${kind.condition}"
        }
        t is NInstKind::IfElse -> {
            "if-else"
        }
        t is NInstKind::IfEnd -> {
            "if-end"
        }
        t is NInstKind::LoopStart -> {
            let kind = t as NInstKind::LoopStart
            "loop-start break_block: ${kind.break_block.id}, continue_block: ${kind.continue_block.id}"
        }
        t is NInstKind::LoopEnd -> {
            "loop-end"
        }
        t is NInstKind::BlockJump -> {
            let kind = t as NInstKind::BlockJump
            let block = if kind.block.is_some() { kind.block!!.id.to_string() } else { "None" }

            "block-jump backwards: ${kind.backwards}, block: $block"
        }
        t is NInstKind::FunCall -> {
            let kind = t as NInstKind::FunCall
            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }
            let args = "()"
            let type_args = ""

            if kind.arguments.is_not_empty() {
                args = "("
                for arg in kind.arguments {
                    args += "#$arg, "
                }
                args = args.slice(0, -2)
                args += ")"
            }

            if kind.explicit_type_arguments.is_not_empty() {
                type_args += "<"
                for arg in kind.explicit_type_arguments {
                    type_args += "$arg, "
                }
                type_args = type_args.slice(0, -2)
                type_args += ">"
            }

            "call $full_name$type_args$args"
        }
        t is NInstKind::WhenStart -> {
            "when-start"
        }
        t is NInstKind::WhenEnd -> {
            "when-end"
        }
        t is NInstKind::Literal -> {
            let kind = t as NInstKind::Literal

            "literal ${kind.value}"
        }
        t is NInstKind::Return -> {
            let kind = t as NInstKind::Return

            "return #${kind.value}"
        }
        t is NInstKind::LoadVar -> {
            let kind = t as NInstKind::LoadVar
            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }

            "load-var $full_name"
        }
        t is NInstKind::StoreVar -> {
            let kind = t as NInstKind::StoreVar
            let full_name = if kind.path.is_not_empty() { "${kind.path}::${kind.name}" } else { kind.name }

            "store-var $full_name = #${kind.value}"
        }
        t is NInstKind::LoadField -> {
            let kind = t as NInstKind::LoadField

            "load-field #${kind.instance} -> ${kind.name}"
        }
        t is NInstKind::StoreField -> {
            let kind = t as NInstKind::StoreField

            "store-field #${kind.instance} -> ${kind.name} = #${kind.value}"
        }
        t is NInstKind::Alloc -> {
            let kind = t as NInstKind::Alloc

            "alloc ${kind.type_usage}"
        }
        t is NInstKind::Noop -> {
            "noop"
        }
        t is NInstKind::Comment -> {
            let kind = t as NInstKind::Comment
            let line = kind.text.replace("\n", "\\n").trim()

            "// $line"
        }
        else -> crash("Unknown NInstKind variant")
    }
}
