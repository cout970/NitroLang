
struct CompilationUnit {
    reporter: Reporter
    included_paths: List<String>
    program: Program
}

fun CompilationUnit::new(): CompilationUnit {
    ret CompilationUnit @[
        reporter: Reporter::new(),
        included_paths: [],
        program: Program::new(),
    ]
}

fun CompilationUnit.include_file(path: String) {
    if path in included_paths {
        ret
    }
    included_paths[] = path

    let source = FilePath::new(path).read_text()!!

    include_source(source, path)
}

fun CompilationUnit.include_source(source: String, path: String) {
    let start = Instant::now()
    let sub_program = Program::new()

    let lexer = Lexer::new(source, path)
    lexer.read_all()

    let parser = Parser::new(lexer, reporter, sub_program)
    parser.read_file()

    for inc in sub_program.includes {
        let include_path = CompilationUnit::process_path(inc.path, path)
        include_file(include_path)
    }

    program.extend_with(sub_program)
    let end = Instant::now()
//    Log::debug("Included file: $path in ${(end - start).to_milliseconds()} ms")
}

fun CompilationUnit::process_path(path: String, current_path: String): String {
    if ":" in path {
        path = path.split(":")[1]!!
    }

    let dir = FilePath::directory_name(current_path)
    ret FilePath::join(dir, path)
}

fun CompilationUnit.check_types() {
    let type_checker = TypeChecker::new(reporter, program)
    type_checker.check_all()
}

fun CompilationUnit.compile() {
    let backend = WasmBackend::new(reporter, program)
    backend.compile_program()

    println(backend.emitter.debug_buffer.to_string())

    // Temporary for debugging
    let buffer = backend.emitter.buffer
    let sb = StringBuilder::new()

    repeat buffer.len {
        let value = buffer[it]!!.to_int()

        if value < 16 {
            sb[] = "0"
        }
        sb.add_int_in_base(16, value)

        if it % 16 == 15 {
            sb[] = "\n"
        } else {
            sb[] = " "
        }
    }

    // Use `cat output.wasm.hex | xxd -r -p > output.wasm ; wasm2wat -o output.wat output.wasm` to get the wat file
    FilePath::new("output.wasm.hex").write_text(sb.to_string())!!
}
