
struct NLambda {
    id: Id,
    span: Span
    receiver_type: Optional<NTypeUsage>
    return_type_usage: Optional<NTypeUsage>
    return_type_token: Optional<TypeToken>
    type_token: Optional<TypeToken>
    parameters: List<NFunctionParameter>
    code: NCode
    ctx: Optional<TypeMappingCtx>
}


fun NLambda.to_string(): String {
    let s = ""

    if receiver_type.is_some() {
        s += "rec " + receiver_type!!.to_string()
    }

    for param in parameters {
        if s.is_not_empty() {
            s += ", "
        }
        s += param.name
        s += ": "
        s += param.type_usage.to_string()
    }

    if return_type_usage.is_some() {
        if s.is_not_empty() {
            s += ", "
        }
        s += "ret " + return_type_usage!!.to_string()
    }

    if s.is_not_empty() {
        s += " -> "
    }

    let i = code.to_string()
    let rest = i.slice(1, i.bytes_len)

    ret "@{$s$rest"
}

fun ByteBuffer.serialize_lambda(value: NLambda) {
    let frame = start_frame(true)
    serialize_id(value.id)
    serialize_span(value.span)
    write_boolean(value.receiver_type.is_some())
    if value.receiver_type.is_some() {
        serialize_type_usage(value.receiver_type!!)
    }
    write_boolean(value.return_type_usage.is_some())
    if value.return_type_usage.is_some() {
        serialize_type_usage(value.return_type_usage!!)
    }
    write_int(value.parameters.len)
    for param in value.parameters {
        serialize_function_parameter(param)
    }
    serialize_code(value.code)
    end_frame(frame)
}

fun ByteBuffer.deserialize_lambda(parent_code: NCode): NLambda {
    let frame = start_frame(false)
    let id = deserialize_id()
    let span = deserialize_span()
    let receiver_type = if read_boolean() { Some(deserialize_type_usage()) } else { None() }
    let return_type_usage = if read_boolean() { Some(deserialize_type_usage()) } else { None() }
    let parameters = []
    repeat read_int() {
        parameters[] = deserialize_function_parameter()
    }
    let code = deserialize_code(Some(parent_code), parent_code.generics)
    end_frame(frame)

    ret NLambda @[
        id,
        span,
        receiver_type,
        return_type_usage,
        return_type_token: None(),
        type_token: None(),
        parameters,
        code,
        ctx: None()
    ]
}