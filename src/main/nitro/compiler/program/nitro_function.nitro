
struct NFunction {
    program: Program
    id: Id
    span: Span
    // TODO refactor into AnnotationContainer
    annotations: List<NAnnotation>
    header: NFunctionHeader
    code_id: Id
    full_name: String
}

struct NFunctionParameter {
    span: Span
    name: String
    type_usage: NTypeUsage
    param_type: Optional<Type>
}

fun NFunction.is_constructor_for(struct_name: String): Boolean {
    if !header.has_receiver { ret false }
    if header.name != "init" { ret false }
    if header.return_type_usage.name != "Nothing" { ret false }
    if header.parameters.len != 1 { ret false }
    let this_param = header.parameters[0]!!
    ret this_param.type_usage.name == struct_name
}

fun NFunction.is_destructor_for(struct_name: String): Boolean {
    if !header.has_receiver { ret false }
    if header.name != "deinit" { ret false }
    if header.return_type_usage.name != "Nothing" { ret false }
    if header.parameters.len != 1 { ret false }
    let this_param = header.parameters[0]!!
    ret this_param.type_usage.name == struct_name
}

fun Parser.create_function(header: NFunctionHeader, annotations: List<NAnnotation>): NFunction {
    let id = id_provider.next()
    let full_name = Path::join(header.path, header.name)
    let code = NCode::new(program, NCodeContainer::None @[])

    program.codes[] = code

    let func = NFunction @[
        program,
        id,
        span: header.span,
        annotations,
        header,
        code_id: code.id.new_copy(),
        full_name,
    ]

    code.container = NCodeContainer::Function @[def: func]
    ret func
}

fun Program.create_function(header: NFunctionHeader, annotations: List<NAnnotation>): NFunction {
    let id = id_provider.next()
    let full_name = Path::join(header.path, header.name)
    let code = NCode::new(this, NCodeContainer::None @[])

    this.codes[] = code

    let func = NFunction @[
        program: this,
        id,
        span: header.span,
        annotations,
        header,
        code_id: code.id.new_copy(),
        full_name,
    ]

    code.container = NCodeContainer::Function @[def: func]
    ret func
}

fun Parser.register_nitro_function(func: NFunction) {
    program.functions[] = func
}

fun NFunction.get_code(): NCode = program.find_code(code_id)

fun NFunction.add_parameter(span: Span, name: String, type_usage: NTypeUsage) {
    header.parameters[] = NFunctionParameter @[span, name, type_usage, param_type: None()]
    header.update_key()
}

fun NFunction.register_params() {
    // Create a local variable per function parameter
    for param in header.parameters {
        let variable = code.add_let(param.span, param.name, Some(param.type_usage))
        variable.is_parameter = true
    }
}


fun NFunction.get_param_types(): List<Type> = header.param_types

fun NFunction.get_annotation(name: String): Optional<NAnnotation> {
    for a in annotations {
        if a.name == name {
            ret Some(a)
        }
    }
    ret None()
}

fun NFunction.has_annotation(name: String): Boolean {
    ret get_annotation(name).is_some()
}

fun NFunction.to_string(): String {
    let prefix = if annotations.is_empty() { "" } else { annotations.join("\n") + "\n" }
    ret "$id: ${prefix}${header.to_pretty_string()} = $code_id // $span"
}

fun NFunctionParameter.to_string(): String {
    ret "$name: $type_usage"
}

fun NFunctionHeader.to_pretty_string(): String {
    let str = StringBuilder::new()
    let full_name = Path::join(path, name)

    str[] = "fun "
    str[] = full_name
    str[] = generics
    str[] = "("

    let count = 0
    for p in parameters {
        if count != 0 {
            str[] = ", "
        }
        str[] = p.name
        str[] = ": "
        str[] = p.type_usage
        count += 1
    }
    str[] = "): "
    str[] = return_type_usage

    ret str.to_string()
}

fun NFunction.is_extern(): Boolean = get_extern_annotation().is_some()

fun ByteBuffer.serialize_function(value: NFunction) {
    let frame = start_frame(true)
    serialize_id(value.id)
    serialize_span(value.span)
    write_int(value.annotations.len)
    for a in value.annotations {
        serialize_annotation(a)
    }
    serialize_function_header(value.header)
    serialize_id(value.code_id)
    end_frame(frame)
}

fun ByteBuffer.deserialize_function(program: Program): NFunction {
    let frame = start_frame(false)
    let id = deserialize_id()
    let span = deserialize_span()
    let annotations = []
    repeat read_int() {
        annotations[] = deserialize_annotation()
    }
    let header = deserialize_function_header()
    let code_id = deserialize_id()

    let full_name = header.full_name
    let value = NFunction @[
        program,
        id,
        span,
        annotations,
        header,
        code_id,
        full_name,
    ]
    end_frame(frame)
    ret value
}

fun ByteBuffer.serialize_function_parameter(value: NFunctionParameter) {
    let frame = start_frame(true)
    serialize_span(value.span)
    write_string(value.name)
    serialize_type_usage(value.type_usage)
    end_frame(frame)
}

fun ByteBuffer.deserialize_function_parameter(): NFunctionParameter {
    let frame = start_frame(false)
    let span = deserialize_span()
    let name = read_string()
    let type_usage = deserialize_type_usage()
    let param_type = None()

    let value = NFunctionParameter @[
        span,
        name,
        type_usage,
        param_type,
    ]

    end_frame(frame)
    ret value
}