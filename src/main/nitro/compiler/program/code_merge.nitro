
struct NCodeMapping {
    inst_mapping: Map<NInstId, NInstId>
    var_mapping: Map<NVarId, NVarId>
}

fun NCode.merge(other: NCode) {
    let map = NCodeMapping @[
        inst_mapping: #[],
        var_mapping: #[],
    ]

    map.copy_vars(other, this)
    map.copy_inst(other, this, max(0, this.inst_list.len - 1))

    for c in other.lambdas {
        this.lambdas[] = c
    }
}

fun NCode.add_at_index(index: Int, other: NCode) {
    let map = NCodeMapping @[
        inst_mapping: #[],
        var_mapping: #[],
    ]

    map.copy_vars(other, this)
    map.copy_inst(other, this, index)

    for c in other.lambdas {
        this.lambdas[] = c
    }
}

fun NCode.apply_mapping(map: NCodeMapping): NCode {
    let code = NCode::create_from(this)
    map.copy_vars(this, code)
    map.copy_inst(this, code, 0)
    for c in this.lambdas {
        code.lambdas[] = c
    }
    ret code
}

// Copy variables from src to dst
fun NCodeMapping.copy_vars(src: NCode, dst: NCode) {

    for src_var in src.vars_map.values_to_list() {
        let new_var = NVar @[
            id: dst.variable_id_provider.next(),
            span: src_var.span,
            name: src_var.name,
            type_usage: src_var.type_usage,
            type_token: src_var.type_token,
            is_parameter: src_var.is_parameter,
            is_upvalue: src_var.is_upvalue,
            // TODO, need inst_mapping[], but after map.copy_inst(other, this)
            init_at: src_var.init_at,
        ]
        dst.vars_map[new_var.id] = new_var
        var_mapping[src_var.id] = new_var.id
    }
}

// Copy instructions
fun NCodeMapping.copy_inst(src: NCode, dst: NCode, index: Int) {
    let i = 0
    while i < src.inst_list.len {
        let inst = src.inst_list[i]!!
        i += 1

        let new_kind = map_inst_kind(inst.kind)
        let new_inst = dst.add_inst_at(index, inst.span, new_kind)
        index += 1

        inst_mapping[inst.id] = new_inst.id

        if new_kind is NInstKind::Lambda {
            let lambda_id = (new_kind as NInstKind::Lambda).lambda_id
            let lambda: NLambda = dst.program.find_lambda(lambda_id)

            lambda.container = dst.container
            lambda.parent_inst = new_inst.id
            lambda.code.container = NCodeContainer::Lambda @[def: lambda]
        }
    }

    // Copy links to jump instructions
    i = 0
    while i < src.break_jumps.len {
        let jump_id = src.break_jumps[i]!!
        dst.break_jumps[] = inst_mapping[jump_id]!!
    }
    i = 0
    while i < src.continue_jumps.len {
        let jump_id = src.continue_jumps[i]!!
        dst.continue_jumps[] = inst_mapping[jump_id]!!
    }

    // Copy last expression (implicit return)
    if src.last_expression.is_some() {
        dst.last_expression = Some(inst_mapping[src.last_expression!!]!!)
    }
}

fun NCodeMapping.map_inst_kind(orig: NInstKind): NInstKind {
    when {
        orig is NInstKind::Mark -> {
            let kind = orig as NInstKind::Mark

            ret NInstKind::Mark @[id: kind.id]
        }
        orig is NInstKind::Let -> {
            let kind = orig as NInstKind::Let

            ret NInstKind::Let @[variable: var_mapping[kind.variable] ?? kind.variable]
        }
        orig is NInstKind::LetUpvalue -> {
            let kind = orig as NInstKind::LetUpvalue

            ret NInstKind::LetUpvalue @[variable: var_mapping[kind.variable] ?? kind.variable]
        }
        orig is NInstKind::BlockStart -> {
            let kind = orig as NInstKind::BlockStart

            ret NInstKind::BlockStart @[
                is_jump_target: kind.is_jump_target,
            ]
        }
        orig is NInstKind::BlockEnd -> {
            ret NInstKind::BlockEnd @[]
        }
        orig is NInstKind::Defer -> {
            let kind = orig as NInstKind::Defer

            ret NInstKind::Defer @[
                deferred_code: kind.deferred_code.apply_mapping(this),
            ]
        }
        orig is NInstKind::IfStart -> {
            let kind = orig as NInstKind::IfStart

            ret NInstKind::IfStart @[condition: inst_mapping[kind.condition]!!]
        }
        orig is NInstKind::IfElse -> {
            ret NInstKind::IfElse @[]
        }
        orig is NInstKind::IfEnd -> {
            ret NInstKind::IfEnd @[]
        }
        orig is NInstKind::IfChoose -> {
            let kind = orig as NInstKind::IfChoose

            ret NInstKind::IfChoose @[
                condition: inst_mapping[kind.condition]!!,
                if_true: inst_mapping[kind.if_true]!!,
                if_false: inst_mapping[kind.if_false]!!,
            ]
        }
        orig is NInstKind::LoopStart -> {
            let kind = orig as NInstKind::LoopStart

            ret NInstKind::LoopStart @[
                break_block: inst_mapping[kind.break_block]!!,
                continue_block: inst_mapping[kind.continue_block]!!,
            ]
        }
        orig is NInstKind::LoopEnd -> {
            ret NInstKind::LoopEnd @[]
        }
        orig is NInstKind::BlockJump -> {
            let kind = orig as NInstKind::BlockJump

            ret NInstKind::BlockJump @[
                backwards: kind.backwards,
                block: if kind.block.is_some() { Some(inst_mapping[kind.block!!]!!) } else { None() },
            ]
        }

        orig is NInstKind::BinaryOp -> {
            let kind = orig as NInstKind::BinaryOp

            ret NInstKind::BinaryOp @[
                op: kind.op,
                left: inst_mapping[kind.left]!!,
                right: inst_mapping[kind.right]!!,
            ]
        }
        orig is NInstKind::FunCall -> {
            let kind = orig as NInstKind::FunCall
            let args = []

            for arg in kind.arguments {
                args[] = inst_mapping[arg]!!
            }

            ret NInstKind::FunCall @[
                path: kind.path,
                name: kind.name,
                explicit_receiver: kind.explicit_receiver,
                arguments: args,
                explicit_type_arguments: kind.explicit_type_arguments,
                use_paths: kind.use_paths,
                call_site: kind.call_site,
            ]
        }
        orig is NInstKind::WhenStart -> {
            let kind = orig as NInstKind::WhenStart
            let prev_info = kind.info

            let result_variable = if prev_info.result_variable.is_some() {
                Some(var_mapping[prev_info.result_variable!!] ?? prev_info.result_variable!!)
            } else {
                None()
            }

            let new_info = WhenInfo @[
                is_expression: prev_info.is_expression,
                is_exhaustive: prev_info.is_exhaustive,
                has_else: prev_info.has_else,
                expr: prev_info.expr.map @{ it -> inst_mapping[it]!! },
                branches: prev_info.branches.map @{ it -> inst_mapping[it]!! },
                conditions: prev_info.conditions.map @{ it -> inst_mapping[it]!! },
                result_variable,
            ]

            ret NInstKind::WhenStart @[info: new_info]
        }
        orig is NInstKind::WhenEnd -> {
            let kind = orig as NInstKind::WhenEnd

            ret NInstKind::WhenEnd @[
                start: inst_mapping[kind.start]!!,
            ]
        }
        orig is NInstKind::Literal -> {
            let kind = orig as NInstKind::Literal

            ret NInstKind::Literal @[value: kind.value]
        }
        orig is NInstKind::Return -> {
            let kind = orig as NInstKind::Return

            ret NInstKind::Return @[value: inst_mapping[kind.value]!!]
        }
        orig is NInstKind::IsType -> {
            let kind = orig as NInstKind::IsType

            ret NInstKind::IsType @[
                value: inst_mapping[kind.value]!!,
                type_pattern: kind.type_pattern,
            ]
        }
        orig is NInstKind::AsType -> {
            let kind = orig as NInstKind::AsType

            ret NInstKind::AsType @[
                value: inst_mapping[kind.value]!!,
                type_usage: kind.type_usage,
            ]
        }
        orig is NInstKind::LoadVar -> {
            let kind = orig as NInstKind::LoadVar

            ret NInstKind::LoadVar @[
                path: kind.path,
                name: kind.name,
                variable: if kind.variable.is_some() {
                    Some(var_mapping[kind.variable!!] ?? kind.variable!!)
                } else {
                    None()
                }
                constant: kind.constant.map @{ it -> it.new_copy() },
            ]
        }
        orig is NInstKind::StoreVar -> {
            let kind = orig as NInstKind::StoreVar

            ret NInstKind::StoreVar @[
                path: kind.path,
                name: kind.name,
                variable: if kind.variable.is_some() {
                    Some(var_mapping[kind.variable!!] ?? kind.variable!!)
                } else {
                    None()
                }
                value: inst_mapping[kind.value]!!,
            ]
        }
        orig is NInstKind::LoadField -> {
            let kind = orig as NInstKind::LoadField

            ret NInstKind::LoadField @[
                instance: inst_mapping[kind.instance]!!,
                name: kind.name,
                field: kind.field,
                field_type_token: kind.field_type_token,
                call_site_generics: kind.call_site_generics,
            ]
        }
        orig is NInstKind::StoreField -> {
            let kind = orig as NInstKind::StoreField

            ret NInstKind::StoreField @[
                instance: inst_mapping[kind.instance]!!,
                name: kind.name,
                field: kind.field,
                field_type_token: kind.field_type_token,
                call_site_generics: kind.call_site_generics,
                value: inst_mapping[kind.value]!!,
            ]
        }
        orig is NInstKind::InitField -> {
            let kind = orig as NInstKind::InitField

            ret NInstKind::InitField @[
                instance: inst_mapping[kind.instance]!!,
                name: kind.name,
                field: kind.field,
                field_type_token: kind.field_type_token,
                call_site_generics: kind.call_site_generics,
                value: inst_mapping[kind.value]!!,
            ]
        }
        orig is NInstKind::SizeOf -> {
            let kind = orig as NInstKind::SizeOf

            ret NInstKind::SizeOf @[
                type_usage: kind.type_usage,
                type_token: kind.type_token,
            ]
        }
        orig is NInstKind::OffsetOf -> {
            let kind = orig as NInstKind::OffsetOf

            ret NInstKind::OffsetOf @[
                type_usage: kind.type_usage,
                type_token: kind.type_token,
                field_name: kind.field_name,
                field: kind.field,
            ]
        }
        orig is NInstKind::Alloc -> {
            let kind = orig as NInstKind::Alloc

            ret NInstKind::Alloc @[
                type_usage: kind.type_usage,
                type_token: kind.type_token,
                is_enum: kind.is_enum,
            ]
        }
        orig is NInstKind::Lambda -> {
            let kind = orig as NInstKind::Lambda

            ret NInstKind::Lambda @[lambda_id: kind.lambda_id.new_copy()]
        }
        orig is NInstKind::Link -> {
            let kind = orig as NInstKind::Link

            ret NInstKind::Link @[
                linked_id: inst_mapping[kind.linked_id]!!
            ]
        }
        orig is NInstKind::Noop -> {
            ret NInstKind::Noop @[]
        }
        orig is NInstKind::Comment -> {
            let kind = orig as NInstKind::Comment

            ret NInstKind::Comment @[text: kind.text]
        }
    }

    crash("Unknown NInstKind variant")
}

fun NCodeMapping.to_string(): String {
    ret "NCodeMapping @[\n  inst_mapping: $inst_mapping,\n  var_mapping: $var_mapping\n]"
}
