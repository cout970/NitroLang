
type_alias NBlockId = Id

struct NBlock {
    id: NBlockId
    parent_id: Optional<NBlockId>
    is_jump_target: Boolean
    depth: Int
    deferred_code: List<NCode>
}

fun NBlock.add_deferred_actions(code: NCode, is_return: Boolean) {

    if deferred_code.is_not_empty() {
        for subcode in deferred_code.to_reversed() {
            // Avoid replacing the last expression, since deferred code cannot be used for the implicit return
            let prev_last_expression = code.last_expression
            code.merge(subcode)
            code.last_expression = prev_last_expression
        }
    }

    if parent_id.is_none() && code.is_transparent_child {
        if code.container is NCodeContainer::Lambda {
            let def = (code.container as NCodeContainer::Lambda).def
            let block = code.find_block(def.parent_block)
            block.add_deferred_actions(code, is_return)
        }
    }

    if parent_id.is_some() && (is_return || !is_jump_target) {
        let block = code.find_block(parent_id!!)
        block.add_deferred_actions(code, is_return)
    }
}

fun NBlock.to_string(): String {
    ret "NBlock @[id: $id, parent_id: $parent_id, is_jump_target: $is_jump_target, depth: $depth, deferred_code: ${deferred_code.len}]"
}

fun NBlock.to_string(code: NCode): String {
    if parent_id.is_some() {
        let parent = code.find_block(parent_id!!)

        ret "${parent.to_string(code)}\n${to_string()}"
    }

    ret to_string()
}

fun ByteBuffer.serialize_block(value: NBlock) {
    let frame = start_frame(true)
    serialize_id(value.id)
    write_boolean(value.parent_id.is_some())
    if value.parent_id.is_some() {
        serialize_id(value.parent_id!!)
    }
    write_boolean(value.is_jump_target)
    write_int(value.depth)
    write_int(value.deferred_code.len)
    for code in value.deferred_code {
        serialize_code(code)
    }
    end_frame(frame)
}

fun ByteBuffer.deserialize_block(code: NCode): NBlock {
    let frame = start_frame(false)
    let id = deserialize_id()
    let has_parent = read_boolean()
    let parent_id = if has_parent { Some(deserialize_id()) } else { None() }
    let is_jump_target = read_boolean()
    let depth = read_int()
    let deferred_code = []
    let deferred_code_len = read_int()
    repeat deferred_code_len {
        deferred_code[] = deserialize_code(code.program)
    }
    end_frame(frame)

    ret NBlock @[id, parent_id, is_jump_target, depth, deferred_code]
}