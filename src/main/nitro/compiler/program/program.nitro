
let ANNOTATION_TEST: String = "Test"
let VARIANT_FIELD_NAME: String = "variant"

struct Program {
    id_provider: IdProvider
    test_id_provider: IdProvider
    declared_names: Map<String, Span>
    structs: List<NStruct>
    options: List<NOption>
    includes: List<NInclude>
    type_aliases: List<NTypeAlias>
    tags: List<NTag>
    consts: List<NConst>
    functions: List<NFunction>
    lambdas: List<NLambda>
    codes: List<NCode>
}

fun Program::new(): Program {
    ret Program @[
        id_provider: IdProvider::new(),
        test_id_provider: IdProvider::new(),
        declared_names: #[],
        structs: [],
        options: [],
        includes: [],
        type_aliases: [],
        tags: [],
        consts: [],
        functions: [],
        lambdas: [],
        codes: [],
    ]
}

fun Program.extend_with(other: Program) {
    this.id_provider.last_id = other.increment_all_ids(this.id_provider.last_id + 1)
    this.declared_names.add_all(other.declared_names)
    this.structs.add_all(other.structs)
    this.options.add_all(other.options)
    this.includes.add_all(other.includes)
    this.type_aliases.add_all(other.type_aliases)
    this.tags.add_all(other.tags)
    this.consts.add_all(other.consts)
    this.functions.add_all(other.functions)
    this.lambdas.add_all(other.lambdas)
    this.codes.add_all(other.codes)

    for c in this.consts {
        c.program = this
    }
    for c in this.functions {
        c.program = this
    }
    for c in this.lambdas {
        c.program = this
    }
    for c in this.codes {
        c.program = this
    }

    check_for_duplicated_ids()
}

fun Program.check_for_duplicated_ids() {
    let all: Set<Int> = %[]
    let errors = []

    for s in structs {
        if s.id.current_value in all {
            errors[] = "Duplicated struct id: ${s.id.current_value}"
        }
        all[] = s.id.current_value

        if s.parent.is_none() {
            for g in s.generics.definitions {
                if g.id.current_value in all {
                    errors[] = "Duplicated generic id: ${g.id.current_value}"
                }
                all[] = g.id.current_value
            }
        }
    }
    for s in options {
        if s.id.current_value in all {
            errors[] = ("Duplicated option id: ${s.id.current_value}")
        }
        all[] = s.id.current_value
        for g in s.generics.definitions {
            if g.id.current_value in all {
                errors[] = ("Duplicated generic id: ${g.id.current_value}")
            }
            all[] = g.id.current_value
        }
    }
    for s in tags {
        if s.id.current_value in all {
            errors[] = ("Duplicated tag id: ${s.id.current_value}")
        }
        all[] = s.id.current_value

        for f in s.functions {
             if f.id.current_value in all {
                errors[] = ("Duplicated tag function id: ${f.id.current_value}")
            }
            all[] = f.id.current_value

            for g in f.header.generics.definitions {
                if g.id.current_value in all {
                    errors[] = ("Duplicated generic id: ${g.id.current_value}")
                }
                all[] = g.id.current_value
            }
        }
    }
    for s in consts {
        if s.id.current_value in all {
            errors[] = ("Duplicated const id: ${s.id.current_value}")
        }
        all[] = s.id.current_value

        for g in s.generics.definitions {
            if g.id.current_value in all {
                errors[] = ("Duplicated generic id: ${g.id.current_value}")
            }
            all[] = g.id.current_value
        }
    }
    for s in functions {
        if s.id.current_value in all {
            errors[] = ("Duplicated function id: ${s.id.current_value}")
        }
        all[] = s.id.current_value

        for g in s.header.generics.definitions {
            if g.id.current_value in all {
                errors[] = ("Duplicated generic id: ${g.id.current_value}")
            }
            all[] = g.id.current_value
        }
    }
    for s in lambdas {
        if s.id.current_value in all {
            errors[] = ("Duplicated lambda id: ${s.id.current_value}")
        }
        all[] = s.id.current_value
    }
    for s in codes {
        if s.id.current_value in all {
            errors[] = ("Duplicated code id: ${s.id.current_value}")
        }
        all[] = s.id.current_value
    }

    if errors.is_not_empty() {
        for e in errors {
            println(e)
        }
        FilePath::new("debug.log").write_text(this.to_string())!!
        crash("Found errors")
    }
}

fun Program.increment_all_ids(amount: Int): Int {
    let aux = id_provider.last_id
    id_provider.last_id += amount
    test_id_provider.last_id += amount

    for s in structs {
        s.id.current_value += amount

        if s.parent.is_none() {
            for g in s.generics.definitions {
                g.id.current_value += amount
            }
        }
    }
    for s in options {
        s.id.current_value += amount
        for g in s.generics.definitions {
            g.id.current_value += amount
        }
    }
    for s in tags {
        s.id.current_value += amount

        for f in s.functions {
            f.id.current_value += amount
            for g in f.header.generics.definitions {
                g.id.current_value += amount
            }
        }
    }
    for s in consts {
        s.id.current_value += amount
        s.code_id.current_value += amount

        for g in s.generics.definitions {
            g.id.current_value += amount
        }
    }
    for s in functions {
        s.id.current_value += amount
        s.code_id.current_value += amount
        for g in s.header.generics.definitions {
            g.id.current_value += amount
        }
    }
    for s in lambdas {
        s.id.current_value += amount
        s.code_id.current_value += amount
    }
    for s in codes {
        s.id.current_value += amount

        for entry in s.block_map {
            for c in entry.second.deferred_code {
                c.id.current_value += amount
            }
        }

        for inst in s.inst_list {
            if inst.kind is NInstKind::Lambda {
                (inst.kind as NInstKind::Lambda).lambda_id.current_value += amount
            }
            if inst.kind is NInstKind::LoadVar {
                let kind = (inst.kind as NInstKind::LoadVar)
                if kind.constant.is_some() {
                    kind.constant!!.current_value += amount
                }
            }
        }
    }

    ret id_provider.last_id
}

fun Program.find_lambda(id: Id): NLambda {
    ret lambdas.find @{ it -> it.id == id }.or_fail_with("Lambda not found")
}

fun Program.find_function(id: Id): NFunction {
    ret functions.find @{ it -> it.id == id }.or_fail_with("Function not found")
}

fun Program.find_const(id: Id): NConst {
    ret consts.find @{ it -> it.id == id }.or_fail_with("Const not found")
}

fun Program.find_struct(id: Id): NStruct {
    ret structs.find @{ it -> it.id == id }.or_fail_with("Struct not found")
}

fun Program.find_option(id: Id): NOption {
    ret options.find @{ it -> it.id == id }.or_fail_with("Option not found")
}

fun Program.find_tag(id: Id): NTag {
    ret tags.find @{ it -> it.id == id }.or_fail_with("Tag not found")
}

fun Program.find_code(id: Id): NCode {
    let res = codes.find @{ it -> it.id == id }
    if res.is_some() {
        ret res!!
    }

    crash("Code not found, id: $id")
}

fun Program.to_string(): String {
    let sb = StringBuilder::new()
    sb[] = "Program {\n"
    sb[] = "  id_provider: ${id_provider}\n"
    sb[] = "  test_id_provider: ${test_id_provider}\n"
    sb[] = "  declared_names: ${declared_names}\n"
    sb[] = "  structs:\n"
    for s in structs {
        sb[] = "    "
        sb[] = s.to_string().replace("\n", "\n    ")
        sb[] = "\n"
    }
    sb[] = "  options:\n"
    for s in options {
        sb[] = "    "
        sb[] = s.to_string().replace("\n", "\n    ")
        sb[] = "\n"
    }
    sb[] = "  includes:\n"
    for s in includes {
        sb[] = "    "
        sb[] = s.to_string().replace("\n", "\n    ")
        sb[] = "\n"
    }
    sb[] = "  type_aliases:\n"
    for s in type_aliases {
        sb[] = "    "
        sb[] = s.to_string().replace("\n", "\n    ")
        sb[] = "\n"
    }
    sb[] = "  tags:\n"
    for s in tags {
        sb[] = "    "
        sb[] = s.to_string().replace("\n", "\n    ")
        sb[] = "\n"
    }
    sb[] = "  consts:\n"
    for s in consts {
        sb[] = "    "
        sb[] = s.to_string().replace("\n", "\n    ")
        sb[] = "\n"
    }
    sb[] = "  functions:\n"
    for s in functions {
        sb[] = "    "
        sb[] = s.to_string().replace("\n", "\n    ")
        sb[] = "\n"
    }
    sb[] = "  lambdas:\n"
    for s in lambdas {
        sb[] = "    "
        sb[] = s.to_string().replace("\n", "\n    ")
        sb[] = "\n"
    }
    sb[] = "  codes:\n"
    for s in codes {
        sb[] = "    "
        sb[] = s.to_string().replace("\n", "\n    ")
        sb[] = "\n"
    }
    sb[] = "}"
    ret sb.to_string()
}

fun ByteBuffer.serialize_program(program: Program) {
    let frame = start_frame(true)
    serialize_id_provider(program.id_provider)
    serialize_id_provider(program.test_id_provider)

    write_int(program.declared_names.len)
    for entry in program.declared_names {
        write_string(entry.first)
        serialize_span(entry.second)
    }

    write_int(program.structs.len)
    for s in program.structs {
        serialize_struct(s)
    }

    write_int(program.options.len)
    for s in program.options {
        serialize_option(s)
    }

    write_int(program.includes.len)
    for s in program.includes {
        serialize_include(s)
    }

    write_int(program.type_aliases.len)
    for s in program.type_aliases {
        serialize_type_alias(s)
    }

    write_int(program.tags.len)
    for s in program.tags {
        serialize_tag(s)
    }

    write_int(program.consts.len)
    for s in program.consts {
        serialize_const(s)
    }

    write_int(program.functions.len)
    for s in program.functions {
        serialize_function(s)
    }

    write_int(program.lambdas.len)
    for s in program.lambdas {
        serialize_lambda(s)
    }

    write_int(program.codes.len)
    for s in program.codes {
        serialize_code(s)
    }

    end_frame(frame)
}

fun ByteBuffer.deserialize_program(): Program {
    let frame = start_frame(false)

    let id_provider = deserialize_id_provider()
    let test_id_provider = deserialize_id_provider()

    let declared_names = #[]
    repeat read_int() {
        let key = read_string()
        let value = deserialize_span()
        declared_names[key] = value
    }

    let program = Program @[
        id_provider,
        test_id_provider,
        declared_names,
        structs: [],
        options: [],
        includes: [],
        type_aliases: [],
        tags: [],
        consts: [],
        functions: [],
        lambdas: [],
        codes: [],
    ]

    repeat read_int() {
        program.structs[] = deserialize_struct()
    }

    repeat read_int() {
        program.options[] = deserialize_option(program)
    }

    repeat read_int() {
        program.includes[] = deserialize_include()
    }

    repeat read_int() {
        program.type_aliases[] = deserialize_type_alias()
    }

    repeat read_int() {
        program.tags[] = deserialize_tag()
    }

    repeat read_int() {
        program.consts[] = deserialize_const(program)
    }

    repeat read_int() {
        program.functions[] = deserialize_function(program)
    }

    repeat read_int() {
        program.lambdas[] = deserialize_lambda(program)
    }

    repeat read_int() {
        program.codes[] = deserialize_code(program)
    }

    end_frame(frame)
    ret program
}
