
let ANNOTATION_TEST: String = "Test"
let VARIANT_FIELD_NAME: String = "variant"

struct Program {
    id_provider: IdProvider
    declared_names: Map<String, Span>
    structs: List<NStruct>
    options: List<NOption>
    includes: List<NInclude>
    type_aliases: List<NTypeAlias>
    modules: List<NModule>
    tags: List<NTag>
    consts: List<NConst>
    functions: List<NFunction>
    lambda_functions: List<NLambda>
    all_function_signatures: List<NFunctionSignature>
}

struct NFunctionSignature {}

fun Program::new(): Program {
    ret Program @[
        id_provider: IdProvider::new(),
        declared_names: #[],
        structs: [],
        options: [],
        includes: [],
        type_aliases: [],
        modules: [],
        tags: [],
        consts: [],
        functions: [],
        lambda_functions: [],
        all_function_signatures: [],
    ]
}

fun Program.extend_with(other: Program) {
    IdProvider::merge_into(other.id_provider, this.id_provider)
    this.declared_names.add_all(other.declared_names)
    this.structs.add_all(other.structs)
    this.options.add_all(other.options)
    this.includes.add_all(other.includes)
    this.type_aliases.add_all(other.type_aliases)
    this.modules.add_all(other.modules)
    this.tags.add_all(other.tags)
    this.consts.add_all(other.consts)
    this.functions.add_all(other.functions)
    this.lambda_functions.add_all(other.lambda_functions)
    this.all_function_signatures.add_all(other.all_function_signatures)
}