
let ANNOTATION_TEST: String = "Test"
let VARIANT_FIELD_NAME: String = "variant"

struct Program {
    reporter: Reporter
//    type_checker: TypeChecker
    declared_names: Map<String, Span>
    structs: List<NStruct>
    options: List<NOption>
    includes: List<NInclude>
    type_aliases: List<NTypeAlias>
    modules: List<NModule>
    tags: List<NTag>
    consts: List<NConst>
    functions: List<NFunction>
    lambda_functions: List<NLambda>
    property_getters: List<NPropertyGetter>
    property_setters: List<NPropertySetter>
    all_function_signatures: List<NFunctionSignature>
    last_test_id: Int
}

struct NPropertyGetter {}
struct NPropertySetter {}
struct NFunctionSignature {}

fun Program::new(): Program {
    ret Program @[
        reporter: Reporter::new(),
        declared_names: #[],
        structs: [],
        options: [],
        includes: [],
        type_aliases: [],
        modules: [],
        tags: [],
        consts: [],
        functions: [],
        property_getters: [],
        property_setters: [],
        lambda_functions: [],
        all_function_signatures: [],
        last_test_id: 0,
    ]
}

fun Program.declare_name(name: String, span: Span) {
    if name in declared_names {
        let prev_location = declared_names[name]!!
        reporter.report_error("Name '$name' defined at $span, was already defined at $prev_location", span)
    }

    declared_names[name] = span
}