
struct TypeChecker {
    reporter: Reporter
    program: Program
    types: TypeContainer
    type_cache: Map<String, TypeToken>
    type_kind_cache: Map<String, TypeKind>
    type_generic_cache: Map<NGeneric, TypeToken>
    cons: TypeConstraints
    property_cache: PropertyCache
    current_code: Optional<NCode>
    function_lookup: Multimap<String, NFunction>
}

fun TypeChecker::new(reporter: Reporter, program: Program): TypeChecker {
    ret TypeChecker @[
        reporter,
        program,
        types: TypeContainer::new(),
        type_cache: #[],
        type_kind_cache: #[],
        type_generic_cache: #[],
        cons: TypeConstraints::new(),
        property_cache: PropertyCache::new(),
        current_code: None(),
        function_lookup: Multimap::new(),
    ]
}

fun TypeChecker.check_all() {
    // Step 1: Definitions
    for s in program.structs {
        check_struct(s)
    }
    for s in program.options {
        check_option(s)
    }
    for s in program.type_aliases {
        check_type_alias(s)
    }
    for s in program.consts {
        check_const_header(s)
    }
    for s in program.functions {
        check_function_header(s)
        collect_getters_and_setters(s)

        // Store the function in the lookup map
        for seg in create_path_segments(s.full_name) {
            function_lookup.add(seg, s)
        }
    }

    // Step 2: Code inside definitions
    for s in program.consts {
        Log::debug("Checking code for const ${s.full_name}")
        cons.add_code_to_check(s.code)
        finalize()
    }
    for s in program.functions {
        Log::debug("Checking code for function ${s.full_name}")
        cons.add_code_to_check(s.code)
        finalize()
    }
}

fun TypeChecker.check_struct(s: NStruct) {
    check_generics(s.generics)
    for field in s.fields {
        field.type_token = Some(check_type_usage(field.type_usage))
    }
}

fun TypeChecker.check_option(s: NOption) {
    check_generics(s.generics)
    for item in s.items {
        check_struct(item.def)
    }
}

fun TypeChecker.check_type_alias(s: NTypeAlias) {
    check_generics(s.generics)
    s.type_token = Some(check_type_usage(s.type_usage))
}

fun TypeChecker.check_const_header(s: NConst) {
    s.type_token = Some(check_type_usage(s.type_usage))
    s.code.return_type = s.type_token
}

fun TypeChecker.check_function_header(s: NFunction) {
    check_generics(s.generics)
    for param in s.parameters {
        param.type_token = Some(check_type_usage(param.type_usage))
    }
    s.return_type_token = Some(check_type_usage(s.return_type_usage))
    s.code.return_type = s.return_type_token
}

fun TypeChecker.check_generics(generics: NGenericParams) {
    let index = 0
    for def in generics.definitions {
        if generics.type_tokens.len <= index {
            generics.type_tokens[] = create_generic_type(def)
        }
        index += 1

        for bounds in def.bounds {
            let found = false

            for tag_def in program.tags {
                if tag_def.name == bounds.name {
                    found = true
                    bounds.tag_definition = Some(tag_def)
                    break
                }
            }

            if !found {
                report_error("Tag not found: ${bounds.name}", def.span)
            }
        }
    }
}


fun TypeChecker.report_error(msg: String, span: Span) {
    reporter.report_error(msg, span)
}

fun TypeChecker.report_warning(msg: String, span: Span) {
    reporter.report_warning(msg, span)
}

fun create_path_segments(full_name: String): List<String> {
    if "::" !in full_name {
        ret [full_name]
    }

    let parts = full_name.split("::")
    let result: List<String> = []

    repeat parts.len {
        let segments = parts.to_sublist(it, parts.len)
        result[] = segments.join("::")
    }

    ret result
}
