
fun TypeChecker.check_inst_load_var(kind: NInstKind::LoadVar, index: Int, inst: NInst, code: NCode) {
    // Local variables cannot have a path, if a path is present, it must be a constant in the global namespace
    if kind.path.is_empty() {
        let variable: Optional<NVar> = find_variable(code, kind.name, inst.block, index)

        // Is variable?
        if variable.is_some() {
            inst.type_token = variable!!.type_token
            kind.variable = variable
            ret
        }
    }

    // Is it a property of `this`?
    if code.receiver_type.is_some() {
        let field: Optional<NStructField> = find_field(code.receiver_type!!, kind.name)

        if field.is_some() {
            let load_this = add_load_this_var(code, index)

            // After adding `this` the current instruction is at `index + 1`
            // Overwrite with a LoadField
            code.inst[index + 1]!!.kind = NInstKind::LoadField @[
                instance: load_this,
                name: kind.name,
                field,
            ]
            ret
        }

        // is it a getter?
        let getter: Optional<NFunction> = find_getter(code.receiver_type!!, kind.name)

        if getter.is_some() {
            let load_this = add_load_this_var(code, index)

            // After adding `this` the current instruction is at `index + 1`
            // Overwrite with a FunCall
            code.inst[index + 1]!!.kind = NInstKind::FunCall @[
                path: kind.path,
                name: "get_${kind.name}",
                arguments: [load_this],
                explicit_type_arguments: [],
            ]
            ret
        }
    }

    let full_name = get_full_path(kind.path, kind.name)
    let constant: Optional<NConst> = find_constant(code, full_name)

    // Is a constant?
    if constant.is_some() {
        inst.type_token = constant!!.type_token
        kind.constant = constant
        ret
    }

    // Not found
    let error = create_error_type("Variable not found '$full_name'", inst.span)
    inst.type_token = Some(error)
    ret
}