
fun TypeChecker.check_inst_load_var(kind: NInstKind::LoadVar, index: Index, inst: NInst, code: NCode) {
    let var_name = kind.name

    // Local variables cannot have a path, if a path is present, it must be a constant in the global namespace
    if kind.path.is_empty() {
        let variable: Optional<NVar> = find_variable(code, var_name, inst.block, inst.id)

        // Is variable?
        if variable.is_some() {
            inst.type_token = variable!!.type_token
            kind.variable = variable
            ret
        }

        if kind.name == "this" {
            crash("This not found in local variables\n${inst.span}\n$code")
            ret
        }
    }

    // Is it a property of `this`?
    if code.receiver_type.is_some() {
        let field: Optional<NStructField> = find_field(code.receiver_type!!, var_name)

        if field.is_some() {
            let load_this = add_load_this_var(code, index)
            inst = code.inst[index.current]!!

            // Overwrite with a LoadField
            inst.kind = NInstKind::LoadField @[
                instance: load_this,
                name: var_name,
                field,
            ]
            inst.type_token = None()
            check_inst(index, inst, code)
            ret
        }

        // is it a getter?
        let getter: Optional<NFunction> = find_getter(code.receiver_type!!, var_name)

        if getter.is_some() {
            let load_this = add_load_this_var(code, index)
            inst = code.inst[index.current]!!

            // Overwrite with a FunCall
            inst.kind = NInstKind::FunCall @[
                path: kind.path,
                name: "get_${var_name}",
                arguments: [load_this],
                explicit_type_arguments: [],
                call_site: None(),
            ]
            inst.type_token = None()
            check_inst(index, inst, code)
            ret
        }
    }

    let full_name = get_full_path(kind.path, var_name)
    let constant: Optional<NConst> = find_constant(code, full_name)

    // Is a constant?
    if constant.is_some() {
        inst.type_token = constant!!.type_token
        kind.constant = constant
        ret
    }

    println("Not found: $full_name:\n$code")

    // Not found
    let error = create_error_type("Variable not found '$full_name'", inst.span)
    inst.type_token = Some(error)
    ret
}

fun TypeChecker.check_inst_store_var(kind: NInstKind::StoreVar, index: Index, inst: NInst, code: NCode) {
    let var_name = kind.name

    // Local variables cannot have a path, if a path is present, it must be a constant in the global namespace
    if kind.path.is_empty() {
        let variable: Optional<NVar> = find_variable(code, var_name, inst.block, inst.id)

        // Is variable?
        if variable.is_some() {
            kind.variable = variable
            inst.type_token = type_cache["Nothing"]

            let value_type_token = code.find_type(kind.value)
            if value_type_token.is_some() {
                cons.add_unify(value_type_token!!, variable!!.type_token!!, inst.span)
            }
            ret
        }
    }

    // Is it a property of `this`?
    if code.receiver_type.is_some() {
        let field: Optional<NStructField> = find_field(code.receiver_type!!, var_name)

        if field.is_some() {
            let load_this = add_load_this_var(code, index)
            inst = code.inst[index.current]!!

            // Overwrite with a LoadField
            inst.kind = NInstKind::StoreField @[
                instance: load_this,
                name: var_name,
                field,
                value: kind.value,
            ]
            inst.type_token = None()
            check_inst(index, inst, code)
            ret
        }

        // is it a setter?
        let setter: Optional<NFunction> = find_setter(code.receiver_type!!, var_name)

        if setter.is_some() {
            let load_this = add_load_this_var(code, index)
            inst = code.inst[index.current]!!

            // Overwrite with a FunCall
            inst.kind = NInstKind::FunCall @[
                path: kind.path,
                name: "set_${var_name}",
                arguments: [load_this, kind.value],
                explicit_type_arguments: [],
                call_site: None(),
            ]
            inst.type_token = None()
            check_inst(index, inst, code)
            ret
        }
    }

    let full_name = get_full_path(kind.path, var_name)
    let constant: Optional<NConst> = find_constant(code, full_name)

    // Is a constant?
    if constant.is_some() {
        let error = create_error_type("Constant '$full_name' cannot be changed", inst.span)
        inst.type_token = Some(error)
        ret
    }

    // Not found
    let error = create_error_type("Variable not found '$full_name'", inst.span)
    inst.type_token = Some(error)
    ret
}