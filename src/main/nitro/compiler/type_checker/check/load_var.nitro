
fun TypeChecker.check_inst_load_var(kind: NInstKind::LoadVar, inst: NInst, code: NCode) {
    let var_name = kind.name

    // Local variables cannot have a path, if a path is present, it must be a constant in the global namespace
    if kind.path.is_empty() {
        let variable: Optional<NVar> = find_variable(var_name, code, inst.block, inst.id)

        // Is variable?
        if variable.is_some() {
            inst.type_token = variable!!.type_token
            kind.variable = Some(variable!!.id)
            ret
        }

        check(kind.name != "this") @{ "This was not found in local variables\n${inst.span}\n$code" }
    }

    // Is it a property of `this`?
    let receiver_type: Optional<Type> = code.find_receiver_type()
    if receiver_type.is_some() {
        if check_inst_load_var_from_receiver(kind, inst, current_code!!, receiver_type!!) {
            ret
        }
    }

    let full_name = Path::join(kind.path, var_name)
    let constant: Optional<NConst> = find_constant(code, full_name)

    // Is a constant?
    if constant.is_some() {
        inst.type_token = constant!!.const_type.to_token()
        kind.constant = Some(constant!!.id.new_copy())
        ret
    }

    // Not found
    let error = create_error_type("Variable not found '$full_name'", inst.span).to_token()
    inst.type_token = Some(error)
    ret
}

fun TypeChecker.check_inst_load_var_from_receiver(kind: NInstKind::LoadVar, inst: NInst, code: NCode, receiver_type: Type): Boolean {
    let var_name = kind.name
    let field: Optional<NStructField> = find_field(receiver_type, var_name)

    if field.is_some() {
        let load_this = add_load_this_var(code, inst.id)
        inst = code.next_inst(load_this)!!

        // Overwrite with a LoadField
        inst.kind = NInstKind::LoadField @[
            instance: load_this,
            name: var_name,
            field,
            field_type_token: None(),
            call_site_generics: None(),
        ]
        inst.type_token = None()
        ret true
    }

    // is it a getter?
    let getter: Optional<NFunction> = find_getter(receiver_type, var_name)

    if getter.is_some() {
        let load_this = add_load_this_var(code, inst.id)
        inst = code.next_inst(load_this)!!

        // Overwrite with a FunCall
        inst.kind = NInstKind::FunCall @[
            path: kind.path,
            name: "get_${var_name}",
            explicit_receiver: true,
            arguments: [load_this],
            explicit_type_arguments: [],
            use_paths: [],
            call_site: None(),
        ]
        inst.type_token = None()
        ret true
    }

    ret false
}

fun TypeChecker.check_inst_store_var(kind: NInstKind::StoreVar, inst: NInst, code: NCode) {
    let var_name = kind.name

    // Variable already linked by the parser
    if kind.variable.is_some() {
        inst.type_token = type_cache["Nothing"].to_token()

        let value_type_token = code.find_inst_type_token(kind.value)
        if value_type_token.is_some() {
            let variable = code.find_var(kind.variable!!)
            cons.add_unify(value_type_token!!, variable.type_token!!, inst.span, TypeConstraintSource::StoreVariable)
        }
        ret
    }

    // Local variables cannot have a path, if a path is present, it must be a constant in the global namespace
    if kind.path.is_empty() {
        let variable: Optional<NVar> = find_variable(var_name, code, inst.block, inst.id)

        // Is variable?
        if variable.is_some() {
            kind.variable = Some(variable!!.id)
            inst.type_token = type_cache["Nothing"].to_token()

            let value_type_token = code.find_inst_type_token(kind.value)
            if value_type_token.is_some() {
                cons.add_unify(value_type_token!!, variable!!.type_token!!, inst.span, TypeConstraintSource::StoreVariable)
            }
            ret
        }
    }

    // Is it a property of `this`?
    let receiver_type: Optional<Type> = code.find_receiver_type()
    if receiver_type.is_some() {
        let field: Optional<NStructField> = find_field(receiver_type!!, var_name)

        if field.is_some() {
            let load_this = add_load_this_var(code, inst.id)
            inst = code.next_inst(load_this)!!

            // Overwrite with a LoadField
            inst.kind = NInstKind::StoreField @[
                instance: load_this,
                name: var_name,
                field,
                field_type_token: None(),
                call_site_generics: None(),
                value: kind.value,
            ]
            inst.type_token = None()
            ret
        }

        // is it a setter?
        let setter: Optional<NFunction> = find_setter(receiver_type!!, var_name)

        if setter.is_some() {
            let load_this = add_load_this_var(code, inst.id)
            inst = code.next_inst(load_this)!!

            // Overwrite with a FunCall
            inst.kind = NInstKind::FunCall @[
                path: kind.path,
                name: "set_${var_name}",
                explicit_receiver: true,
                arguments: [load_this, kind.value],
                explicit_type_arguments: [],
                use_paths: [],
                call_site: None(),
            ]
            inst.type_token = None()
            ret
        }
    }

    let full_name = Path::join(kind.path, var_name)
    let constant: Optional<NConst> = find_constant(code, full_name)

    // Is a constant?
    if constant.is_some() {
        let error = create_error_type("Constant '$full_name' cannot be changed", inst.span).to_token()
        inst.type_token = Some(error)
        ret
    }

    // Not found
    let error = create_error_type("Variable not found '$full_name'", inst.span).to_token()
    inst.type_token = Some(error)
    ret
}
