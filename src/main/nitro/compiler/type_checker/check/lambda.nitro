
fun TypeChecker.check_inst_lambda(kind: NInstKind::Lambda, inst: NInst, code: NCode) {
    let inst_type: TypeToken = create_unresolved_function_type(inst.span).to_token()
    inst.type_token = Some(inst_type)

    let lambda = program.find_lambda(kind.lambda_id)

    if lambda.return_type_usage.is_some() {
        lambda.return_type_token = Some(check_type_usage_with(code.generics, lambda.return_type_usage!!).to_token())
    } else {
        lambda.return_type_token = Some(create_unresolved_type(inst.span).to_token())
    }

    lambda.code.return_type_token = lambda.return_type_token

    // Resolve lambda type
    let checker = this
    cons.once_resolved(inst_type) @{ inst_tt: TypeToken ->
        checker.check_inst_lambda_post(kind, inst, code, inst_tt)
    }
}

fun TypeChecker.check_inst_lambda_post(kind: NInstKind::Lambda, inst: NInst, code: NCode, inst_tt: TypeToken) {
    let inst_ty: Type = inst_tt.find_type()

    if !inst_ty.is_function() {
        let error = create_error_type("Lambda type cannot be resolved", inst.span).to_token()
        cons.add_unify(inst_tt, error, inst.span, TypeConstraintSource::InstType)
        ret
    }

    let lambda = program.find_lambda(kind.lambda_id)
    let type_kind = TypeKind::Lambda @[instance: lambda]

    // Resolve lambda body
    repeat lambda.parameters.len {
        let param = lambda.parameters[it]!!
        let tt = check_type_usage_with(code.generics, param.type_usage)
        param.param_type = Some(tt)

        let expected_param_tt = types.create_type_token(inst_ty.params[it]!!)
        cons.add_unify(tt.to_token(), expected_param_tt, param.span, TypeConstraintSource::Lambda)

        // Also update "param" variables inside the lambda code
        for entry in lambda.code.vars_map {
            if entry.second.is_parameter && entry.second.name == param.name {
                if entry.second.type_token.is_none() {
                    entry.second.type_token = Some(check_type_usage_with(code.generics, entry.second.type_usage).to_token())
                }
                cons.add_unify(entry.second.type_token!!, expected_param_tt, param.span, TypeConstraintSource::Lambda)
            }
        }
    }

    let expected_return_tt = types.create_type_token(inst_ty.params.last()!!)
    cons.add_unify(lambda.return_type_token!!, expected_return_tt, inst.span, TypeConstraintSource::Lambda)

    let real_type_id = types.create_type_id_by_ids(type_kind, inst_ty.params)
    lambda.type_token = Some(types.create_type_token(real_type_id))

    cons.add_code_to_check(lambda.code)
}