
fun TypeChecker.check_inst_fun_call(kind: NInstKind::FunCall, inst: NInst, code: NCode) {

    // Support syntax `var()` instead of `var.call()` where var is local variable with type Function
    if kind.path.is_empty() && kind.explicit_type_arguments.is_empty() {
        let variable = find_variable(code, kind.name, inst.block, inst.id)
        let index = code.index_of(inst.id)!!

        if variable.is_some() && variable!!.type_token.is_some() && variable!!.type_token!!.find_type().is_function() {
            code.duplicate_inst(index.current)
            let dup = code.inst_list[index.current]!!

            // Replace it's kind with LoadVar
            dup.kind = NInstKind::LoadVar @[
                path: "",
                name: kind.name,
                variable: Some(variable!!.id),
                constant: None(),
            ]
            dup.type_token = None()
            check_inst(index, dup, code)

            // Next instruction will be the function call
            index.current += 1
            let next = code.inst_list[index.current]!!
            let arguments = kind.arguments.to_list()
            arguments.add_first(dup.id)

            next.kind = NInstKind::FunCall @[
                path: "",
                name: "call",
                explicit_receiver: true,
                arguments,
                explicit_type_arguments: [],
                call_site: None(),
            ]
            next.type_token = None()
            check_inst(index, dup, code)
            ret
        }
    }

    let return_tt = create_unresolved_type(inst.span).to_token()
    let arg_types: List<TypeToken> = []

    for arg in kind.arguments {
        arg_types[] = code.find_inst_type_token(arg)!!
    }

    let first_arg: TypeToken = if arg_types.is_not_empty() { arg_types.first()!! } else { type_cache["Nothing"]!!.to_token() }

    // If the first and only argument is a lambda, once_resolved will never be called
    // since lambdas are resolved after the function is determined
    if first_arg.find_type().is_unresolved_function() {
        let receiver_type = code.find_receiver_type()
        if receiver_type.is_some() {
            first_arg = receiver_type!!.to_token()
        } else {
            first_arg = arg_types[1].get_or_default(type_cache["Nothing"]!!.to_token())
        }
    }

    // Workaround for compiler bug with passing `this` to a closure
    let checker = this
    cons.once_resolved(first_arg) @{ ignored: TypeToken ->
        checker.check_inst_fun_call_post(kind, inst, code, return_tt)
    }

    inst.type_token = Some(return_tt)
}

struct FunCallSite {
    target: NFunCallTarget
    uses_implicit_this: Boolean
    argument_types: List<TypeToken>
    call_site_generics: CallSiteGenerics
}

fun TypeChecker.check_inst_fun_call_post(kind: NInstKind::FunCall, inst: NInst, code: NCode, return_tt: TypeToken) {
    let full_name = Path::join(kind.path, kind.name)
    let args: List<Type> = []

    for arg in kind.arguments {
        args[] = code.find_inst_type_token(arg)!!.find_type()
    }

    // If the function call uses method-syntax `foo.bar()` then we don't consider the function body receiver type
    // if the function call uses the regular syntax `foo()` then we check for both `this.foo()` and `foo()`
    let receiver_type: Optional<Type> = if kind.explicit_receiver { None() } else { code.find_receiver_type() }
    let target: Optional<NFunCallTarget> = find_fun_call_target(inst.span, full_name, args, receiver_type, return_tt)

    if target.is_none() {
        ret
    }

    let header = target!!.header
    let uses_implicit_this = false
    let arg_types: List<Type> = []

    if receiver_type.is_some() && header.parameters.len == args.len + 1 {
        let index = code.index_of(inst.id)!!
        let load_this = add_load_this_var(code, index)
        inst = code.inst_list[index.current]!!
        kind = inst.kind as NInstKind::FunCall

        kind.arguments.add_first(load_this)
        arg_types[] = receiver_type!!
        uses_implicit_this = true
    }

    arg_types.add_all(args)

    let type_parameters: List<TypeToken> = []
    let function_params: List<Type> = header.param_types
    let function_return: Type = header.return_type!!

    if function_params.len != arg_types.len {
        reporter.report_error("Function '$full_name' expects ${function_params.len} arguments, but got ${arg_types.len}", inst.span)
    }

    let call_site_generics = create_call_site_generics(header.generics, inst.span)

    // Convert every generic type defined in the function to a unresolved type at the call site
    function_return = call_site_generics.replace_with_unresolved(function_return)
    function_params = call_site_generics.replace_all_with_unresolved(function_params)

    // Explicit call-site type arguments
    // `add<Int>()` where `Int` is the explicit type argument
    repeat kind.explicit_type_arguments.len {
        let e = kind.explicit_type_arguments[it]!!
        let tt = check_local_type_usage(e, code)

        if it >= call_site_generics.resolved.len {
            reporter.report_error("Too many type arguments for function '$full_name'", e.span)
            continue
        }

        cons.add_unify(tt, call_site_generics.resolved[it]!!, e.span, TypeConstraintSource::TypeParameter)
    }

    // Type param bounds
    repeat header.generics.definitions.len {
        let tt = call_site_generics.resolved[it]!!
        let def = header.generics.definitions[it]!!

        for bound in def.bounds {
            let tag_instance = bound.tag_instance!!

            cons.add_bounds(tt, tag_instance, inst.span)
        }
    }

    let call_site = FunCallSite @[
        target: target!!,
        uses_implicit_this,
        argument_types: arg_types.to_type_tokens(),
        call_site_generics,
    ]
    kind.call_site = Some(call_site)

    cons.add_unify_list(function_params, arg_types, inst.span, TypeConstraintSource::FunctionCallArg)
    cons.add_unify(return_tt, function_return.to_token(), inst.span, TypeConstraintSource::InstType)
}

