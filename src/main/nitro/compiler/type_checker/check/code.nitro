
fun TypeChecker.finalize() {
    let index = 0
    while index < cons.codes.len {
        check_code(cons.codes[index]!!)
        index += 1
    }

    // Report unresolved types and unresolved constraints
    if !cons.all.is_empty() {
        let info = ""
        for i in cons.all {
            if i is TypeConstraint::Unify {
                let c = i as TypeConstraint::Unify

                info += "  - $i\nleft:${c.left.inspect()}\nright:${c.right.inspect()}\n"
            }
        }
        reporter.report_error("Unresolved type constraints:\n$info", cons.codes.first()!!.span)
        cons.all.clear()
    }

    index = 0
    while index < cons.codes.len {
        finalize_code(cons.codes[index]!!)
        index += 1
    }

    cons.codes.clear()
}

fun TypeChecker.check_code(code: NCode) {
    let previous_code = current_code
    current_code = Some(code)
    defer { current_code = previous_code }

    for v in code.vars_map.values_to_list() {
        check_var(v, code)
    }

    // Less efficient loop, but required for the un-ordered list modifications
    loop {
        let index = 0
        let visited = false

        while index < code.inst_list.len {
            let inst = code.inst_list[index]!!
            index += 1

            // Already visited
            if inst.type_token.is_some() {
                continue
            }

            check_inst(inst, code)

            // Resolve constraints to replace unresolved types
            // We do this on every line, so when a error occurs, we at the location of the error
            // If we solve at the end, we would have no way of knowing where the error occurred,
            // because the are relations between types that are complex and can be solved in many different ways
            cons.resolve(this, code, inst.id, inst.span)
            visited = true
            break
        }

        if !visited {
            break
        }
    }

    // The last expression, which has an implicit return, must match the return type of the function
    if code.last_expression.is_some() && code.return_type_token.is_some() {
        let return_type = code.return_type_token!!.find_type()

        if return_type.is_nothing() || return_type.is_never() {
            ret
        }

        let current = code.find_inst(code.last_expression!!)
        cons.add_unify(current.type_token!!, code.return_type_token!!, current.span, TypeConstraintSource::Return)
        cons.resolve(this, code, current.id, current.span)
    }
}

fun TypeChecker.finalize_code(code: NCode) {
    // Sanity check
    for i in code.inst_list {
        check(i.type_token.is_some()) @{ "All instructions must have a type: $i\n$code" }

        if i.kind is NInstKind::LoadVar {
            let kind = i.kind as NInstKind::LoadVar

            if kind.variable.is_none() && kind.constant.is_none() && !i.type_token!!.find_type().is_invalid() {
                let full_name = Path::join(kind.path, kind.name)
                reporter.report_error("Variable not found: $full_name", i.span)
            }
        }
        if i.kind is NInstKind::StoreVar {
            let kind = i.kind as NInstKind::StoreVar

            if kind.variable.is_none() && !i.type_token!!.find_type().is_invalid() {
                let full_name = Path::join(kind.path, kind.name)
                reporter.report_error("Variable not found: $full_name", i.span)
            }
        }
        let ty = i.type_token!!.find_type()

        if ty.has_unresolved() {
            reporter.report_error("Not enough context information to infer type $ty", i.span)
        }

        if ty.is_union() {
            reporter.report_error("Unable to decide on type $ty", i.span)
        }
    }
}

fun TypeChecker.check_var(v: NVar, code: NCode) {
    if v.type_token.is_none() {
        v.type_token = Some(check_type_usage_with(code.generics, v.type_usage)).to_token()

        // Store the type of `this` for later
        if v.name == "this" {
            code.receiver_type_token = v.type_token
        }
    }
}

fun TypeChecker.check_inst(inst: NInst, code: NCode) {
    // Already visited
    if inst.type_token.is_some() {
        ret
    }

    if inst.kind is NInstKind::Let {
        let kind = inst.kind as NInstKind::Let
        check_var(code.find_var(kind.variable), code)

        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::LetUpvalue {
        let kind = inst.kind as NInstKind::LetUpvalue
        check_var(code.find_var(kind.variable), code)

        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::BlockStart {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::BlockEnd {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::Defer {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::IfStart {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::IfElse {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::IfEnd {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::IfChoose {
        let kind = inst.kind as NInstKind::IfChoose
        let cond_type = code.find_inst_type_token(kind.condition)
        let if_true_type = code.find_inst_type_token(kind.if_true)
        let if_false_type = code.find_inst_type_token(kind.if_false)

        check_not(cond_type.is_none() || if_true_type.is_none() || if_false_type.is_none()) @{
            "Previous instructions must have types (cond: $cond_type, if_true: $if_true_type, if_false: $if_false_type)"
        }

        let common_type = create_unresolved_type(inst.span).to_token()

        cons.add_unify(cond_type!!, type_cache["Boolean"]!!.to_token(), inst.span, TypeConstraintSource::IfCondition)
        cons.add_unify(common_type, if_true_type!!, inst.span, TypeConstraintSource::IfBranch)
        cons.add_unify(common_type, if_false_type!!, inst.span, TypeConstraintSource::IfBranch)

        inst.type_token = Some(common_type)
        ret
    }

    if inst.kind is NInstKind::LoopStart {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::LoopEnd {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::BlockJump {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::WhenStart {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::WhenEnd {
        let kind = inst.kind as NInstKind::WhenEnd
        let start = code.find_inst(kind.start)
        let info: WhenInfo = (start.kind as NInstKind::WhenStart).info
        check_inst_when(start, inst, info, code)

        if info.branches.is_empty() {
            inst.type_token = type_cache["Nothing"].to_token()
            ret
        }

        let common_type = create_unresolved_type(inst.span).to_token()

        if info.result_variable.is_some() {
            cons.add_unify(common_type, code.find_var(info.result_variable!!).type_token!!, inst.span, TypeConstraintSource::WhenBranch)
        }

        for id in info.branches {
            let branch_type = code.find_inst_type_token(id)

            check_not(branch_type.is_none()) @{
                "Branch must have a type (#$id)"
            }

            cons.add_unify(common_type, branch_type!!, inst.span, TypeConstraintSource::WhenBranch)
        }

        inst.type_token = Some(common_type)
        ret
    }

    if inst.kind is NInstKind::BinaryOp {
        let kind = inst.kind as NInstKind::BinaryOp

        let left_type = code.find_inst_type_token(kind.left)
        let key = left_type!!.find_type().to_string()
        let opt = kind.op.optimization[key]

        if opt.is_some() {
            let function_name: String = opt!!

            inst.type_token = None()
            inst.kind = NInstKind::FunCall @[
                path: "",
                name: function_name,
                explicit_receiver: true,
                arguments: [kind.left, kind.right],
                explicit_type_arguments: [],
                use_paths: [],
                call_site: None(),
            ]
            ret
        }

        // Replace with get_ordering(left, right).<method>()
        let index = code.index_of_inst(inst.id)!!
        code.duplicate_inst(index)
        let get_ordering = code.inst_list[index]!!
        let fun_call = code.inst_list[index + 1]!!

        get_ordering.type_token = None()
        get_ordering.kind = NInstKind::FunCall @[
            path: "",
            name: "get_ordering",
            explicit_receiver: true,
            arguments: [kind.left, kind.right],
            explicit_type_arguments: [],
            use_paths: [],
            call_site: None(),
        ]

        fun_call.type_token = None()
        fun_call.kind = NInstKind::FunCall @[
            path: "",
            name: kind.op.method,
            explicit_receiver: true,
            arguments: [get_ordering.id],
            explicit_type_arguments: [],
            use_paths: [],
            call_site: None(),
        ]
        ret
    }

    if inst.kind is NInstKind::FunCall {
        check_inst_fun_call(inst.kind as NInstKind::FunCall, inst, code)
        ret
    }

    if inst.kind is NInstKind::Literal {
        check_inst_literal(inst.kind as NInstKind::Literal, inst, code)
        ret
    }

    if inst.kind is NInstKind::Return {
        let kind = inst.kind as NInstKind::Return
        let value_tt = code.find_inst_type_token(kind.value)

        if value_tt.is_some() && code.return_type_token.is_some() {
            cons.add_unify(value_tt!!, code.return_type_token!!, inst.span, TypeConstraintSource::Return)
        }

        inst.type_token = type_cache["Never"].to_token()
        ret
    }

    if inst.kind is NInstKind::IsType {
        let kind = inst.kind as NInstKind::IsType
        check_type_pattern(kind.type_pattern, code)
        inst.type_token = type_cache["Boolean"].to_token()
        ret
    }

    if inst.kind is NInstKind::AsType {
        let kind = inst.kind as NInstKind::AsType
        let tt = check_type_usage_with(code.generics, kind.type_usage).to_token()
        inst.type_token = Some(tt)
        ret
    }

    if inst.kind is NInstKind::LoadVar {
        check_inst_load_var(inst.kind as NInstKind::LoadVar, inst, code)
        ret
    }

    if inst.kind is NInstKind::StoreVar {
        check_inst_store_var(inst.kind as NInstKind::StoreVar, inst, code)
        ret
    }

    if inst.kind is NInstKind::LoadField {
        check_inst_load_field(inst.kind as NInstKind::LoadField, inst, code)
        ret
    }

    if inst.kind is NInstKind::StoreField {
        check_inst_store_field(inst.kind as NInstKind::StoreField, inst, code)
        ret
    }

    if inst.kind is NInstKind::InitField {
        check_inst_init_field(inst.kind as NInstKind::InitField, inst, code)
        ret
    }

    if inst.kind is NInstKind::SizeOf {
        let kind = inst.kind as NInstKind::SizeOf
        kind.type_token = Some(check_type_usage_with(code.generics, kind.type_usage).to_token())
        inst.type_token = type_cache["Int"].to_token()
        ret
    }

    if inst.kind is NInstKind::OffsetOf {
        let kind = inst.kind as NInstKind::OffsetOf
        let ty = check_type_usage_with(code.generics, kind.type_usage)
        kind.type_token = Some(ty.to_token())

        // Type must be an OptionItem or Struct
        if ty.kind !is TypeKind::Struct && ty.kind !is TypeKind::OptionItem {
            inst.type_token = Some(create_error_type("Type '$ty' must be Struct or Option", inst.span).to_token())
            ret
        }

        // Get struct
        let instance: NStruct = if ty.kind is TypeKind::Struct {
            (ty.kind as TypeKind::Struct).instance
        } else {
            (ty.kind as TypeKind::OptionItem).instance
        }

        // Field the field
        for field in instance.fields {
            if field.name == kind.field_name {
                kind.field = Some(field)
            }
        }

        if kind.field.is_none() {
            inst.type_token = Some(create_error_type("Field '${kind.field_name}' not found in type '$ty'", inst.span).to_token())
            ret
        }

        inst.type_token = type_cache["Int"].to_token()
        ret
    }

    if inst.kind is NInstKind::Alloc {
        check_inst_alloc(inst.kind as NInstKind::Alloc, inst, code)
        ret
    }

    if inst.kind is NInstKind::Lambda {
        let kind = inst.kind as NInstKind::Lambda
        check_inst_lambda(kind, inst, code)
        ret
    }

    if inst.kind is NInstKind::Link {
        let kind = inst.kind as NInstKind::Link
        let link_type = code.find_inst_type_token(kind.linked_id)

        check_not(link_type.is_none()) @{
            "Linked instruction must have a type (#${kind.linked_id})"
        }

        inst.type_token = link_type
        ret
    }

    if inst.kind is NInstKind::Comment {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::Noop {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::Mark {
        inst.type_token = type_cache["Nothing"].to_token()
        ret
    }

    if inst.kind is NInstKind::IncludeAs {
        let kind = inst.kind as NInstKind::IncludeAs

        let res = FilePath::new(kind.path).read_text()
        if res.is_err() {
            reporter.report_error("Unable to read File: '${kind.path}'", inst.span)
        }

        inst.type_token = if kind.raw {
            let ty = find_type_by_name("List", [type_cache["Byte"]!!], inst.span, [])
            Some(ty.to_token())
        } else {
            type_cache["String"].to_token()
        }
        ret
    }

    crash("No type checking defined for instruction: $inst")
}

fun TypeChecker.add_load_this_var(code: NCode, id: NInstId): NInstId {
    let index = code.index_of_inst(id)!!
    code.duplicate_inst(index)
    // Get the duplicated instruction (first of the two)
    let dup = code.inst_list[index]!!

    let variable = find_variable("this", code, dup.id)

    check_not(variable.is_none()) @{
        "Unable to find variable `this`"
    }

    // Replace it's kind with LoadVar for `this`
    dup.kind = NInstKind::LoadVar @[
        path: "",
        name: "this",
        variable: Some(variable!!.id),
        constant: None(),
    ]

    // Check the new instruction now
    dup.type_token = None()
    ret dup.id
}

fun TypeChecker.check_inst_literal(kind: NInstKind::Literal, inst: NInst, code: NCode) {
    let expr: NValue = kind.value

    when {
        expr is NValue::Int -> {
            inst.type_token = type_cache["Int"].to_token()
        }
        expr is NValue::Long -> {
            inst.type_token = type_cache["Long"].to_token()
        }
        expr is NValue::Float -> {
            inst.type_token = type_cache["Float"].to_token()
        }
        expr is NValue::String -> {
            inst.type_token = type_cache["String"].to_token()
        }
        expr is NValue::Boolean -> {
            inst.type_token = type_cache["Boolean"].to_token()
        }
        else -> {
            inst.type_token = type_cache["Nothing"].to_token()
        }
    }
}

fun TypeChecker.check_inst_when(start: NInst, end: NInst, info: WhenInfo, code: NCode) {
    // Non-exhaustive when expressions must always have an else branch
    if info.is_expression && !info.is_exhaustive {
        if !info.has_else {
            reporter.report_error("When expressions must have an 'else' branch", start.span)
        }
        ret
    }

    // Non exhaustive when have no additional limitations
    if !info.is_exhaustive {
        ret
    }

    let has_non_is_conds = false
    // Exhaustive when always have the shape:
    // when <expr> {
    //      is OptionType::Item1 -> {}
    //      is OptionType::Item2 -> {}
    //      ...
    // }
    // Where <expr> has type OptionType or one of the OptionType::Item variants

    if info.expr.is_none() {
        reporter.report_error("Exhaustive 'when' must have an expression", start.span)
        ret
    }

    let patterns: List<ResolvedTypePattern> = []

    // All conditions must be `is OptionType::Item`
    for id in info.conditions {
        let inst2 = code.find_inst(id)

        if inst2.kind is NInstKind::IsType {
            let kind2 = inst2.kind as NInstKind::IsType
            patterns[] = resolve_type_pattern(kind2.type_pattern, code)
        }
        else {
            has_non_is_conds = true
        }
    }

    // Mix of `is OptionType::Item` and other conditions
    if has_non_is_conds || patterns.is_empty() {
        reporter.report_error("Exhaustive 'when' must have all its conditions as 'is OptionType::Item'", start.span)
        ret
    }

    // Check all patterns are valid option items
    let option_instance: Optional<NOption> = None()
    let option_item_instances: List<NStruct> = []
    let has_errors = false

    for p in patterns {
        if p.kind !is ResolvedTypePatternKind::Struct {
            reporter.report_error("Exhaustive 'when' condition types must be option items", p.span)
            has_errors = true
            continue
        }

        let item_instance = (p.kind as ResolvedTypePatternKind::Struct).instance

        if item_instance.parent.is_none() {
            reporter.report_error("Exhaustive 'when' condition types must be option items", p.span)
            has_errors = true
            continue
        }

        option_item_instances[] = item_instance

        if option_instance.is_none() {
            option_instance = Some(item_instance.parent!!)
        } else {
            if option_instance!! != item_instance.parent!! {
                reporter.report_error("Exhaustive 'when' condition has different option type than previous branches", p.span)
                has_errors = true
                continue
            }
        }
    }

    // `option_instance` is the common parent of all the option items
    check(option_instance.is_some()) @{ "At least one pattern must be an option item: ${start.span}" }

    // If something failed, stop here
    if has_errors {
        ret
    }

    // We know the options are all patterns, but we need to check if
    // the patterns are option items and the expression is the option type
    let expr_inst = code.find_inst(info.expr!!)

    cons.once_resolved(expr_inst.type_token!!) @{ expr_type_token: TypeToken ->
        let expr_type = expr_type_token.find_type()

        if expr_type.kind !is TypeKind::Option && expr_type.kind !is TypeKind::OptionItem {
            reporter.report_error("Exhaustive 'when' expected a Option type, but ${expr_type} was found", start.span)
            ret
        }

        let instance = if expr_type.kind is TypeKind::Option {
            (expr_type.kind as TypeKind::Option).instance
        } else {
            (expr_type.kind as TypeKind::OptionItem).instance.parent!!
        }

        if instance != option_instance!! {
            reporter.report_error("Exhaustive 'when' expected a Option type of ${option_instance}, but ${instance} was found", start.span)
            ret
        }

        // Check that all option items are covered
        for item in instance.items {
            if item.def !in option_item_instances {
                reporter.report_error("Exhaustive 'when' missing branch for option item ${item.def.full_name}", start.span)
            }
        }
    }
}
