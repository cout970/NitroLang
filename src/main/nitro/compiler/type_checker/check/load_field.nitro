

fun TypeChecker.check_inst_load_field(kind: NInstKind::LoadField, index: Index, inst: NInst, code: NCode) {
    let instance_tt = code.find_type(kind.instance)

    if instance_tt.is_none() {
        crash("Instance must have a type (#${kind.instance})")
    }

    let inst_type = create_unresolved_type(inst.span)
    inst.type_wrapper = types.wrap(Some(inst_type))

    let checker = this
    cons.once_resolved(instance_tt!!) @{ instance_tt: TypeToken ->
        checker.check_inst_load_field_post(kind, index, inst, code, inst_type, instance_tt)
    }
}

fun TypeChecker.check_inst_load_field_post(kind: NInstKind::LoadField, index: Index, inst: NInst, code: NCode, inst_type: TypeToken, instance_tt: TypeToken) {
    // Direct struct field
    let field_name = kind.name
    let field: Optional<NStructField> = find_field(instance_tt, field_name)

    if field.is_some() {
        cons.unify(inst_type, field!!.type_token!!, inst.span)
        ret
    }

    // Getter function
    let getter = find_getter(instance_tt, field_name)

    if getter.is_some() {
        let load_this = add_load_this_var(code, index)
        inst = code.inst[index.current]!!

        // Overwrite with a FunCall
        inst.kind = NInstKind::FunCall @[
            path: "",
            name: "get_$field_name",
            arguments: [load_this],
            explicit_type_arguments: [],
        ]
        check_inst(index, inst, code)
        cons.unify(inst_type, inst.type_wrapper!!.type_token, inst.span)
        ret
    }

    let instance_type = types.get_type(instance_tt)
    let error = create_error_type("Field not found '$field_name' on $instance_type", inst.span)
    cons.unify(inst_type, error, inst.span)
}

fun TypeChecker.check_inst_store_field(kind: NInstKind::LoadField, index: Index, inst: NInst, code: NCode) {
    let instance_tt = code.find_type(kind.instance)

    if instance_tt.is_none() {
        crash("Instance must have a type (#${kind.instance})")
    }

    inst.type_wrapper = types.wrap(type_cache["Nothing"])

    let checker = this
    cons.once_resolved(instance_tt!!) @{ instance_tt: TypeToken ->
        checker.check_inst_store_field_post(kind, index, inst, code, instance_tt)
    }
}

fun TypeChecker.check_inst_store_field_post(kind: NInstKind::LoadField, index: Index, inst: NInst, code: NCode, instance_tt: TypeToken) {
    // Direct struct field
    let field_name = kind.name
    let field: Optional<NStructField> = find_field(instance_tt, field_name)

    if field.is_some() {
        ret
    }

    // Getter function
    let setter = find_setter(instance_tt, field_name)

    if setter.is_some() {
        let load_this = add_load_this_var(code, index)
        inst = code.inst[index.current]!!

        // Overwrite with a FunCall
        inst.kind = NInstKind::FunCall @[
            path: "",
            name: "set_$field_name",
            arguments: [load_this],
            explicit_type_arguments: [],
        ]
        check_inst(index, inst, code)
        ret
    }

    let instance_type = types.get_type(instance_tt)
    let error = create_error_type("Field not found '$field_name' on $instance_type", inst.span)
    inst.type_wrapper = types.wrap(Some(error))
}