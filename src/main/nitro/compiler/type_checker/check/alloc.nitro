
fun TypeChecker.check_inst_alloc(kind: NInstKind::Alloc, inst: NInst, code: NCode) {
    let tt = check_type_usage(kind.type_usage)
    kind.type_token = Some(tt)

    let unresolved = create_unresolved_type(inst.span)
    inst.type_token = Some(unresolved)

    let ty = tt.find_type()

    // Not a struct
    if ty.kind !is TypeKind::Struct && ty.kind !is TypeKind::OptionItem {
        let error = create_error_type("Type '$tt' cannot be instantiated", inst.span)
        cons.add_unify(unresolved, error, inst.span)
        ret
    }

    // Get struct
    let instance: NStruct = if ty.kind is TypeKind::Struct {
        (ty.kind as TypeKind::Struct).instance
    } else {
        (ty.kind as TypeKind::OptionItem).instance
    }

    // Check enum
    if instance.is_enum && !kind.is_enum {
        let error = create_error_type("Type '$tt' is an enum and cannot be instantiated", inst.span)
        cons.add_unify(unresolved, error, inst.span)
        ret
    }

    let params = []

    repeat instance.generics.type_tokens.len {
        let un = create_unresolved_type(inst.span)
        params[] = un

        if ty.params.len > it {
            cons.add_unify(types.create_type_token(ty.params[it]!!), un, inst.span)
        }
    }

    let final_type = types.create_type(ty.kind, params)

    repeat instance.generics.type_tokens.len {
        let generic_tt = instance.generics.type_tokens[it]!!
        let un = params[it]!!

        final_type = types.replace(final_type, generic_tt, un)
    }

    cons.add_unify(unresolved, final_type, inst.span)
}