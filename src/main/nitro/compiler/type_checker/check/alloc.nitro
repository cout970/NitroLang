
fun TypeChecker.check_inst_alloc(kind: NInstKind::Alloc, inst: NInst, code: NCode) {
    let tt = check_type_usage(kind.type_usage)
    kind.type_token = Some(tt)

    let unresolved = create_unresolved_type(inst.span)
    inst.type_token = Some(unresolved)

    let ty = tt.find_type()

    // Not a struct
    if ty.kind !is TypeKind::Struct && ty.kind !is TypeKind::OptionItem {
        let error = create_error_type("Type '$tt' cannot be instantiated", inst.span)
        cons.unify(unresolved, error, inst.span)
        ret
    }

    // Get struct
    let instance: NStruct = if ty.kind is TypeKind::Struct {
        (ty.kind as TypeKind::Struct).instance
    } else {
        (ty.kind as TypeKind::OptionItem).instance
    }

    // Check enum
    if instance.is_enum && !kind.is_enum {
        let error = create_error_type("Type '$tt' is an enum and cannot be instantiated", inst.span)
        cons.unify(unresolved, error, inst.span)
        ret
    }

    let params = []

    repeat instance.generics.definitions.len {
        params[] = if ty.params.len > it { ty.params[it]!! } else { create_unresolved_type(inst.span) }
    }

    let final_type = types.get_or_create_type(ty.kind, params)

    cons.unify(unresolved, final_type, inst.span)
}