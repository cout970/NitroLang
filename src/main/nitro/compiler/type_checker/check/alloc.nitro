
fun TypeChecker.check_inst_alloc(kind: NInstKind::Alloc, inst: NInst, code: NCode) {
    let ty = check_type_usage_with(code.generics, kind.type_usage)
    kind.type_token = Some(ty.to_token())

    let unresolved: TypeToken = create_unresolved_type(inst.span).to_token()
    inst.type_token = Some(unresolved)

    // Propagate error
    if ty.kind is TypeKind::Invalid {
        cons.add_unify(unresolved, ty.to_token(), inst.span, TypeConstraintSource::Alloc)
        ret
    }

    // Not a struct
    if ty.kind !is TypeKind::Struct && ty.kind !is TypeKind::OptionItem {
        let error = create_error_type("Type '$ty' cannot be instantiated", inst.span).to_token()
        cons.add_unify(unresolved, error, inst.span, TypeConstraintSource::Alloc)
        ret
    }

    // Get struct
    let instance: NStruct = if ty.kind is TypeKind::Struct {
        (ty.kind as TypeKind::Struct).instance
    } else {
        (ty.kind as TypeKind::OptionItem).instance
    }

    // Check enum
    if instance.is_enum && !kind.is_enum {
        let error = create_error_type("Type '$ty' is an enum and cannot be instantiated", inst.span).to_token()
        cons.add_unify(unresolved, error, inst.span, TypeConstraintSource::Alloc)
        ret
    }

    let params: List<Type> = []
    let call_site = create_call_site_generics(instance.generics, inst.span)

    repeat min(call_site.resolved.len, ty.params.len) {
        cons.add_unify(types.create_type_token(ty.params[it]!!), call_site.resolved[it]!!, inst.span, TypeConstraintSource::TypeParameter)
    }

    let final_type: Type = types.create_type_direct(ty.kind, call_site.resolved.find_types())

    cons.add_unify(unresolved, final_type.to_token(), inst.span, TypeConstraintSource::InstType)

    let init_fields = Set::new()
    for sub_inst in code.inst_list {
        if sub_inst.kind !is NInstKind::InitField {
            continue
        }
        let init_field = sub_inst.kind as NInstKind::InitField
        if init_field.instance != inst.id {
            continue
        }
        init_fields[] = init_field.name
    }

    // Check for missing fields
    for field in instance.fields {
        if field.name in init_fields {
            continue
        }

        if field.name == VARIANT_FIELD_NAME {
            if instance.parent.is_some() {
                let option_instance: NOption = instance.parent!!
                let index = option_instance.get_index_of_item(instance)!!

                code.seek_after_inst(inst.id)
                let lit = code.add_lit_int(inst.span, index)
                code.add_init_field(inst.span, inst.id, VARIANT_FIELD_NAME, lit.id)
                code.seek_end()
                continue
            }
        }

        if field.name == FIELD_RC_HEADER {
            continue // RC header is initialized in generate_rc_instructions_for_inst()
        }

        reporter.report_error("Field '${field.name}' is not initialized", inst.span)
    }
}
