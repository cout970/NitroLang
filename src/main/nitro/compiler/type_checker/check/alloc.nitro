
fun TypeChecker.check_inst_alloc(kind: NInstKind::Alloc, inst: NInst, code: NCode) {
    let ty = check_type_usage(kind.type_usage)
    kind.type_token = Some(ty.to_token())

    let unresolved: TypeToken = create_unresolved_type(inst.span).to_token()
    inst.type_token = Some(unresolved)

    // Not a struct
    if ty.kind !is TypeKind::Struct && ty.kind !is TypeKind::OptionItem {
        let error = create_error_type("Type '$ty' cannot be instantiated", inst.span).to_token()
        cons.add_unify(unresolved, error, inst.span)
        ret
    }

    // Get struct
    let instance: NStruct = if ty.kind is TypeKind::Struct {
        (ty.kind as TypeKind::Struct).instance
    } else {
        (ty.kind as TypeKind::OptionItem).instance
    }

    // Check enum
    if instance.is_enum && !kind.is_enum {
        let error = create_error_type("Type '$ty' is an enum and cannot be instantiated", inst.span).to_token()
        cons.add_unify(unresolved, error, inst.span)
        ret
    }

    let params: List<Type> = []
    let call_site = create_call_site_generics(instance.generics, inst.span)

    repeat min(call_site.resolved.len, ty.params.len) {
        cons.add_unify(types.create_type_token(ty.params[it]!!), call_site.resolved[it]!!, inst.span)
    }

    let final_type: Type = types.create_type_direct(ty.kind, call_site.resolved.find_types())

    cons.add_unify(unresolved, final_type.to_token(), inst.span)
}