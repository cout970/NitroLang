
// Transforms a NTypeUsage (type written in the source code) into a Type (internal representation linked with the type declaration)
fun TypeChecker.check_type_usage_with(generics: NGenericParams, tu: NTypeUsage): Type {
    if tu.type_token.is_some() {
        ret tu.type_token!!.find_type()
    }

    let ty = check_type_usage_with_aux(generics, tu)
    tu.type_token = Some(ty.to_token())
    ret ty
}

fun TypeChecker.check_type_usage_with_aux(generics: NGenericParams, tu: NTypeUsage): Type {
    if tu.type_token.is_some() {
        ret tu.type_token!!.find_type()
    }

    let params: List<Type> = []

    for tp in tu.params {
        params[] = check_type_usage_with(generics, tp)
    }

    if tu.kind == TypeUsageKind::TYPE_SIMPLE {
        let full_name = Path::join(tu.path, tu.name)
        ret find_type_by_name(full_name, params, tu.span)
    }

    if tu.kind == TypeUsageKind::TYPE_UNRESOLVED {
        ret create_unresolved_type(tu.span)
    }

    if tu.kind == TypeUsageKind::TYPE_PARAM {
        let generic_def_index: Optional<Int> = tu.generic_def_index

        if generic_def_index.is_some() {
            let index = generic_def_index!!

            let generic = generics.definitions[index]!!
            ret create_generic_type(generic)
        }

        repeat generics.definitions.len {
            let def: NGeneric = generics.definitions[it]!!

            if def.name == tu.name {
                ret create_generic_type(def)
            }
       }

        // Not found
        ret create_error_type("Generic not found '${tu.name}' not found", tu.span)
    }

    unreachable()
}

fun TypeChecker.find_type_by_name(full_name: String, params: List<Type>, span: Span): Type {
    let path_segments = create_path_segments(full_name)

    for segment in path_segments {
        // type_cache only works by name, it doesn't take into account the type arguments
        // so it's limited on what it can cache
        if params.is_empty() {
            let cache = type_cache[segment]
            if cache.is_some() {
                ret cache!!
            }
        }

        // Type alias
        for i in program.type_aliases {
            if i.full_name != segment {
                continue
            }
            let alias_type = check_type_usage_with(i.generics, i.type_usage)
            let ty = types.replace_generics(alias_type, i.generics.definitions, params)

            if params.is_empty() {
                type_cache[segment] = ty
            }

            ret ty
        }

        // Cache for type kinds
        let kind_cache = type_kind_cache[segment]
        if kind_cache.is_some() {
            let kind = kind_cache!!
            let ty = types.create_type_direct(kind, params)

            if params.is_empty() {
                type_cache[segment] = ty
            }

            ret ty
        }

        // Is an Option?
        for i in program.options {
            if i.full_name != segment {
                continue
            }
            let kind: TypeKind = TypeKind::Option @[instance: i]
            type_kind_cache[segment] = kind

            let ty = types.create_type_direct(kind, params)

            if params.is_empty() {
                type_cache[segment] = ty
            }

            ret ty
        }

        // Is a Struct?
        for i in program.structs {
            if i.full_name != segment {
                continue
            }
            let kind: TypeKind = if i.parent.is_some() {
                TypeKind::OptionItem @[instance: i]
            } else {
                TypeKind::Struct @[instance: i]
            }

            type_kind_cache[segment] = kind

            let ty = types.create_type_direct(kind, params)

            if params.is_empty() {
                type_cache[segment] = ty
            }

            ret ty
        }
    }

    // Not found
    ret create_error_type("Type '$full_name' not found", span)
}
