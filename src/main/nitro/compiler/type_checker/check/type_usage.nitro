
fun TypeChecker.check_local_type_usage(tu: NTypeUsage, code: NCode): TypeToken {
    ret check_type_usage(tu).to_token()
}

// Transforms a NTypeUsage (type written in the source code) into a Type (internal representation linked with the type declaration)
fun TypeChecker.check_type_usage(tu: NTypeUsage): Type {
    if tu.type_token.is_some() {
        ret tu.type_token!!.find_type()
    }

    let params: List<Type> = []

    for tp in tu.params {
        params[] = check_type_usage(tp)
    }

    when tu.kind {
        TypeUsageKind::TYPE_SIMPLE -> {
            ret check_type_usage_simple(tu, params)
        }
        TypeUsageKind::TYPE_PARAM -> {
            let generic: Optional<NGeneric> = tu.generic_definition

            // Usage in definition
            if generic.is_some() {
                let ty = create_generic_type(generic!!)
                tu.type_token = Some(ty.to_token())
                ret ty
            }

            // Usage in code
            if current_code.is_some() {
                let opt = find_generic_by_name(current_code!!, tu.name)

                if opt.is_some() {
                    tu.type_token = opt.to_token()
                    ret opt!!
                }
            }

            // Not found
            let ty = create_error_type("Generic not found: ${tu.name}", tu.span)
            tu.type_token = Some(ty.to_token())
            ret ty
        }
        TypeUsageKind::TYPE_UNRESOLVED -> {
            let ty = create_unresolved_type(tu.span)
            tu.type_token = Some(ty.to_token())
            ret ty
        }
    }

    unreachable()
}

fun TypeChecker.check_type_usage_simple(tu: NTypeUsage, params: List<Type>): Type {
    let full_name = get_full_path(tu.path, tu.name)
    let ty = find_type_by_name(full_name, params, tu.span)
    tu.type_token = Some(ty.to_token())
    ret ty
}

fun TypeChecker.find_type_by_name(full_name: String, params: List<Type>, span: Span): Type {
    let path_segments = create_path_segments(full_name)

    for segment in path_segments {
        // type_cache only works by name, it doesn't take into account the type arguments
        // so it's limited on what it can cache
        if params.is_empty() {
            let cache = type_cache[segment]
            if cache.is_some() {
                ret cache!!
            }
        }

        // Type alias
        for i in program.type_aliases {
            if get_full_path(i.path, i.name) != segment {
                continue
            }
            let alias_type = check_type_usage(i.type_usage)
            let ty = types.replace_generics(alias_type, i.generics.definitions, params)

            if params.is_empty() {
                type_cache[segment] = ty
            }

            ret ty
        }

        // Cache for type kinds
        let kind_cache = type_kind_cache[segment]
        if kind_cache.is_some() {
            let kind = kind_cache!!
            let ty = types.create_type_direct(kind, params)

            if params.is_empty() {
                type_cache[segment] = ty
            }

            ret ty
        }

        // Is an Option?
        for i in program.options {
            if i.full_name != segment {
                continue
            }
            let kind: TypeKind = TypeKind::Option @[instance: i]
            type_kind_cache[segment] = kind

            let ty = types.create_type_direct(kind, params)

            if params.is_empty() {
                type_cache[segment] = ty
            }

            ret ty
        }

        // Is a Struct?
        for i in program.structs {
            if i.full_name != segment {
                continue
            }
            let kind: TypeKind = if i.parent.is_some() {
                TypeKind::OptionItem @[instance: i]
            } else {
                TypeKind::Struct @[instance: i]
            }

            type_kind_cache[segment] = kind

            let ty = types.create_type_direct(kind, params)

            if params.is_empty() {
                type_cache[segment] = ty
            }

            ret ty
        }
    }

    // Not found
    ret create_error_type("Type '$full_name' not found", span)
}

fun TypeChecker.find_generic_by_name(code: NCode, name: String): Optional<Type> {
    repeat code.generics.definitions.len {
        let def: NGeneric = code.generics.definitions[it]!!

        // Safety check
        check_not(def.source != NGenericSource::Function && def.source != NGenericSource::Lambda) @{
            "Invalid generic source $def"
        }

        if def.name == name {
            ret Some(code.generics.type_tokens[it]!!.find_type())
        }
   }

   if code.parent_code.is_some() {
       ret find_generic_by_name(code.parent_code!!, name)
   }

   ret None()
}