
fun TypeChecker.find_variable(code: NCode, name: String, block_id: NBlockId, inst_id: NInstId): Optional<NVar> {
    let block = code.find_block(block_id)
    let depth = block.depth
    let index_opt = code.index_of(inst_id)
    let index = 0

    if index_opt.is_some() && index_opt!!.current >= 0 {
        index = index_opt!!.current
    }

    // Go backwards from this instruction to the beginning of the code
    // We are looking for a variable declaration with same name and within the same block or a block that is less deep
    repeat index {
        let i = index - it - 1
        let curr_inst: NInst = code.inst_list[i]!!
        let inst_block = code.find_block(curr_inst.block)

        // If the instruction is in another block, there are 2 options:

        // 1. The instruction is in a block that is deeper than the block we are looking for, we skip everything in this block
        if inst_block.depth > depth {
            continue
        }

        // 2. The instruction is in a block that is less deep than the block we are looking for,
        // we update the depth to apply case 1. to the following blocks
        if inst_block.depth < depth {
            depth = inst_block.depth
        }

        if curr_inst.kind is NInstKind::Let {
            let kind = curr_inst.kind as NInstKind::Let
            let nvar = code.find_var(kind.variable)

            if nvar.name == name {
                ret Some(nvar)
            }
        }
    }

    // Try searching in the parent code
    if code.parent_code.is_some() {
        let parent_code = code.parent_code!!
        let parent_block = code.parent_block!!
        let parent_inst = code.parent_inst!!

        let opt = find_variable(parent_code, name, parent_block, parent_inst)

        if opt.is_some() {
            let variable = opt!!
            variable.is_upvalue = true

            if variable.id !in code.upvalues {
                code.upvalues[] = variable.id
            }
        }

        ret opt
    }

    // Not found
    ret None()
}

fun TypeChecker.find_constant(code: NCode, full_name: String): Optional<NConst> {
    let path_segments = create_path_segments(full_name)

    for segment in path_segments {
        // The same name will always refer to the same constant, given that we are in the same function/constant (NCode)
        let cached = code.const_cache[segment]
        if cached.is_some() {
            ret cached
        }

        // If the constant is not in the cache, we look for it in the global scope
        for constant in program.consts {
            if constant.full_name == segment || constant.name == segment {
                code.const_cache[segment] = constant
                ret Some(constant)
            }
        }
    }

    // Not found
    ret None()
}

// find_field
fun TypeChecker.find_field(receiver_type: Type, full_name: String): Optional<NStructField> {

    // Field in Struct
    if receiver_type.kind is TypeKind::Struct {
        let kind = receiver_type.kind as TypeKind::Struct
        let str: NStruct = kind.instance

        for field in str.fields {
            if field.name == full_name {
                ret Some(field)
            }
        }
    }

    // Field in Option variant
    if receiver_type.kind is TypeKind::OptionItem {
        let kind = receiver_type.kind as TypeKind::OptionItem
        let str: NStruct = kind.instance

        for field in str.fields {
            if field.name == full_name {
                ret Some(field)
            }
        }
    }

    // Not found
    ret None()
}
