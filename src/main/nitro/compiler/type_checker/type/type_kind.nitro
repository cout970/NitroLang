

option TypeKind {
    Struct {
        instance: NStruct
    }
    Option {
        instance: NOption
    }
    OptionItem {
        instance: NStruct
    }
    Lambda {
        instance: NLambda
    }
    Generic {
        instance: NGeneric
    }
    Union {
        span: Span
    }
    Unresolved {
        id: Int
        span: Span
    }
    UnresolvedFunction {
        id: Int
        span: Span
    }
    Invalid {
        message: String
        span: Span
    }
}

fun TypeKind.get_kind_name(): String {
    ret when {
        this is TypeKind::Struct -> "Struct"
        this is TypeKind::Option -> "Option"
        this is TypeKind::OptionItem -> "OptionItem"
        this is TypeKind::Lambda -> "Lambda"
        this is TypeKind::Generic -> "Generic"
        this is TypeKind::Union -> "Union"
        this is TypeKind::Unresolved -> "Unresolved"
        this is TypeKind::UnresolvedFunction -> "UnresolvedFunction"
        this is TypeKind::Invalid -> "Invalid"
        else -> unreachable()
    }
}

fun TypeKind.get_span(): Span {
    ret when {
        this is TypeKind::Struct -> (this as TypeKind::Struct).instance.span
        this is TypeKind::Option -> (this as TypeKind::Option).instance.span
        this is TypeKind::OptionItem -> (this as TypeKind::OptionItem).instance.span
        this is TypeKind::Lambda -> (this as TypeKind::Lambda).instance.span
        this is TypeKind::Generic -> (this as TypeKind::Generic).instance.span
        this is TypeKind::Union -> (this as TypeKind::Union).span
        this is TypeKind::Unresolved -> (this as TypeKind::Unresolved).span
        this is TypeKind::UnresolvedFunction -> (this as TypeKind::UnresolvedFunction).span
        this is TypeKind::Invalid -> (this as TypeKind::Invalid).span
        else -> unreachable()
    }
}

fun StringBuilder.add(tk: TypeKind) {
    if tk is TypeKind::Struct {
        let kind = tk as TypeKind::Struct
        let instance: NStruct = kind.instance
        this[] = "S"
        this[] = instance.id.current_value
        ret
    }
    if tk is TypeKind::Option {
        let kind = tk as TypeKind::Option
        let instance: NOption = kind.instance
        this[] = "O"
        this[] = instance.id.current_value
        ret
    }
    if tk is TypeKind::OptionItem {
        let kind = tk as TypeKind::OptionItem
        let instance: NStruct = kind.instance
        this[] = "I"
        this[] = instance.id.current_value
        ret
    }
    if tk is TypeKind::Lambda {
        let kind = tk as TypeKind::Lambda
        let instance: NLambda = kind.instance
        this[] = "L"
        this[] = instance.id.current_value
        ret
    }
    if tk is TypeKind::Generic {
        let kind = tk as TypeKind::Generic
        let instance: NGeneric = kind.instance
        this[] = "G"
        this[] = instance.id.current_value
        ret
    }
    if tk is TypeKind::Union {
        this[] = "U"
        ret
    }
    if tk is TypeKind::Unresolved {
        let kind = tk as TypeKind::Unresolved
        this[] = "N"
        this[] = kind.id
        ret
    }
    if tk is TypeKind::UnresolvedFunction {
        let kind = tk as TypeKind::UnresolvedFunction
        this[] = "F"
        this[] = kind.id
        ret
    }
    if tk is TypeKind::Invalid {
        let kind = tk as TypeKind::Invalid
        this[] = "E'"
        this[] = kind.message
        this[] = "'"
        ret
    }
    crash("Unknown type kind")
}

fun TypeKind.get_signature(): String {
    if this is TypeKind::Struct {
        let kind = this as TypeKind::Struct
        let instance: NStruct = kind.instance
        ret "S${instance.id}"
//        ret "struct ${instance.full_name}"
    }
    if this is TypeKind::Option {
        let kind = this as TypeKind::Option
        let instance: NOption = kind.instance
        ret "O${instance.id}"
//        ret "option ${instance.full_name}"
    }
    if this is TypeKind::OptionItem {
        let kind = this as TypeKind::OptionItem
        let instance: NStruct = kind.instance
        ret "I${instance.id}"
//        ret "option-item ${instance.full_name}"
    }
    if this is TypeKind::Lambda {
        let kind = this as TypeKind::Lambda
        let instance: NLambda = kind.instance
        ret "L${instance.id}"
    }
    if this is TypeKind::Generic {
        let kind = this as TypeKind::Generic
        let instance: NGeneric = kind.instance
        ret "G${instance.id}"
    }
    if this is TypeKind::Union {
        let kind = this as TypeKind::Union
        ret "U"
    }
    if this is TypeKind::Unresolved {
        let kind = this as TypeKind::Unresolved
        ret "N${kind.id}"
    }
    if this is TypeKind::UnresolvedFunction {
        let kind = this as TypeKind::UnresolvedFunction
        ret "F${kind.id}"
    }
    if this is TypeKind::Invalid {
        let kind = this as TypeKind::Invalid
        ret "E'${kind.message}'"
    }
    unreachable()
}

fun TypeKind.is_equal(other: TypeKind): Boolean = this.signature == other.signature

fun TypeKind.get_ordering(other: TypeKind): Ordering = this.signature <=> other.signature

fun TypeKind.to_string(): String {
    if this is TypeKind::Struct {
        let kind = this as TypeKind::Struct
        let instance: NStruct = kind.instance
        ret instance.full_name
//        ret "[struct ${instance.full_name}]"
    }
    if this is TypeKind::Option {
        let kind = this as TypeKind::Option
        let instance: NOption = kind.instance
        ret instance.full_name
//        ret "[option ${instance.full_name}]"
    }
    if this is TypeKind::OptionItem {
        let kind = this as TypeKind::OptionItem
        let instance: NStruct = kind.instance
        ret instance.full_name
//        ret "[option-item ${instance.full_name}]"
    }
    if this is TypeKind::Lambda {
        let kind = this as TypeKind::Lambda
        ret "[lambda ${kind.instance.span}]"
    }
    if this is TypeKind::Generic {
        let kind = this as TypeKind::Generic
        let instance: NGeneric = kind.instance
        ret "#${instance.name}"
//        ret "[generic #${instance.name} ${instance.source} ${instance.span.link}]"
    }
    if this is TypeKind::Union {
        let kind = this as TypeKind::Union
        ret "[union]"
    }
    if this is TypeKind::Unresolved {
        let kind = this as TypeKind::Unresolved
        ret "[unresolved ${kind.id}]"
    }
    if this is TypeKind::UnresolvedFunction {
        let kind = this as TypeKind::UnresolvedFunction
        ret "[unresolved-function ${kind.id}]"
    }
    if this is TypeKind::Invalid {
        let kind = this as TypeKind::Invalid
        ret "[invalid \"${kind.message}\"]"
    }
    unreachable()
}
