
fun TypeContainer.replace_all(from: Type, to: Type) {
    if from == to {
        ret
    }

    let from_id = from.id
    let to_id = to.id
    let to_remove = %[from_id]

    let und_id: Optional<Int> = None()

    if from.kind is TypeKind::Unresolved {
        let kind = from.kind as TypeKind::Unresolved
        und_id = Some(kind.id)
    }
    if from.kind is TypeKind::UnresolvedFunction {
        let kind = from.kind as TypeKind::UnresolvedFunction
        und_id = Some(kind.id)
    }

    if und_id.is_none() {
        crash("Attempt to replace a final type, only unresolved types can be replaced")
    }

    let related_types = unresolved_index[und_id!!]
    for type_id in related_types {
        let tts = type_token_cache[type_id]

        for tt in tts {
            let new_type_id = replace_type_id(tt.type_id, from_id, to_id, to_remove)
            if new_type_id != tt.type_id {
                type_token_cache.add(new_type_id, tt)
                tt.type_id = new_type_id
            }
        }
    }

    unresolved_index.remove(und_id!!)

    for id in to_remove {
        let debug = all_types[id]
        all_types.remove(id)
        type_token_cache.remove(id)
    }
}

fun TypeContainer.replace_type_id(id: TypeId, from: TypeId, to: TypeId, to_remove: Set<TypeId>): TypeId {
    if id == from {
        ret to
    }

    let ty = get_type_by_id(id)
    let new_params = []

    for param in ty.params {
        new_params[] = replace_type_id(param, from, to, to_remove)
    }

    let new_type_id = create_type_id_by_ids(ty.kind, new_params)

    if new_type_id != id {
        to_remove[] = id
    }

    ret new_type_id
}

fun TypeContainer.replace_list(list: List<Type>, find: Type, replace: Type): List<Type> {
    let new_list = []

    for item in list {
        new_list[] = replace(item, find, replace)
    }

    ret new_list
}

fun TypeContainer.replace(src: Type, find: Type, replace: Type): Type {
    if src == find {
        ret replace
    }

    let new_params = []

    for param in src.params {
        new_params[] = replace(get_type_by_id(param), find, replace)
    }

    ret create_type_direct(src.kind, new_params)
}

fun TypeContainer.replace_with_map(src: Type, replacements: Map<Type, Type>): Type {
    let aux = src

    for entry in replacements {
        aux = this.replace(aux, entry.first, entry.second)
    }

    ret aux
}

fun TypeContainer.replace_generics(ty: Type, generics: List<NGeneric>, args: List<Type>): Type {
    if generics.is_empty() || args.is_empty() {
        ret ty
    }

    let replacements: Map<NGeneric, Type> = #[]

    repeat min(generics.len, args.len) {
        replacements[generics[it]!!] = args[it]!!
    }

    let new_params = []

    for param in ty.type_params {
        let kind = param.kind

        if kind is TypeKind::Generic {
            let replacement = replacements[(kind as TypeKind::Generic).instance]

            if replacement.is_some() {
                new_params[] = replacement!!
            } else {
                new_params[] = param
            }
        } else {
            new_params[] = param
        }
    }

    ret create_type_direct(ty.kind, new_params)
}