
fun TypeContainer.common_type(left: Type, right: Type): Optional<Type> {
    if left == right {
        ret Some(left)
    }

    // Invalid
    if left.is_invalid() {
        ret Some(right)
    }
    if right.is_invalid() {
        ret Some(left)
    }

    // Never
    if left.is_never() {
        ret Some(right)
    }
    if right.is_never() {
        ret Some(left)
    }

    // Union
    if left.is_union() && right.is_union() {
        let set = %[]

        set.add_all(left.params)
        set.add_all(right.params)

        ret common_type_of_list(set.to_list())
    }
    if left.is_union() {
        let set = %[]

        set.add_all(left.params)
        set.add(right.id)

        ret common_type_of_list(set.to_list())
    }
    if right.is_union() {
        let set = %[]

        set.add_all(right.params)
        set.add(left.id)

        ret common_type_of_list(set.to_list())
    }

    // Composite
    if left.is_composite() && right.is_composite() {
        if left.params.len != right.params.len {
            ret None()
        }

        let opt = common_kind_type(left.kind, right.kind)

        if opt.is_none() {
            ret None()
        }

        let params: List<Type> = []

        repeat left.params.len {
            let aux = common_type(
                get_type_by_id(left.params[it]!!),
                get_type_by_id(right.params[it]!!)
            )

            if aux.is_none() {
                ret None()
            }
            params[] = aux!!
        }

        ret Some(create_type_direct(opt!!, params))
    }

    ret None()
}

fun TypeContainer.common_type_of_list(list: List<TypeId>): Optional<Type> {
    ret when list.len {
        0 -> None()
        1 -> Some(get_type_by_id(list.first()!!))
        2 -> common_type(get_type_by_id(list[0]!!), get_type_by_id(list[1]!!))
        else -> {
            let curr: Type = get_type_by_id(list.first()!!)

            for other in list.rest() {
                let aux = common_type(curr, get_type_by_id(other))

                if aux.is_none() {
                    ret None()
                }
                curr = aux!!
            }

            ret Some(curr)
        }
    }
}

fun TypeContainer.common_kind_type(left: TypeKind, right: TypeKind): Optional<TypeKind> {
    if left == right {
        ret Some(left)
    }

    if left is TypeKind::Struct && (left as TypeKind::Struct).instance.full_name == "Never" {
        ret Some(right)
    }
    if right is TypeKind::Struct && (right as TypeKind::Struct).instance.full_name == "Never" {
        ret Some(left)
    }

    // Ordering and Ordering::Equals => Ordering
    if left is TypeKind::Option && right is TypeKind::OptionItem {
        let left_option: NOption = (left as TypeKind::Option).instance
        let right_struct = (right as TypeKind::OptionItem).instance

        for item in left_option.items {
            if item.def == right_struct {
                ret Some(left)
            }
        }

        ret None()
    }

    // Ordering::Equals and Ordering => Ordering
    if left is TypeKind::OptionItem && right is TypeKind::Option {
        let left_struct = (left as TypeKind::OptionItem).instance
        let right_option: NOption = (right as TypeKind::Option).instance

        for item in right_option.items {
            if item.def == left_struct {
                ret Some(right)
            }
        }

        ret None()
    }

    // Ordering::Less and Ordering::Equals => Ordering
    if left is TypeKind::OptionItem && right is TypeKind::OptionItem {
        let left_option = (left as TypeKind::OptionItem).instance.parent!!
        let right_option = (right as TypeKind::OptionItem).instance.parent!!

        // Same option in common
        if left_option == right_option {
            ret Some(TypeKind::Option @[instance: left_option])
        }

        ret None()
    }

    // Function and Lambda => Function
    if left is TypeKind::Struct && (left as TypeKind::Struct).instance.full_name == "Function" && right is TypeKind::Lambda {
        ret Some(left)
    }
    if right is TypeKind::Struct && (right as TypeKind::Struct).instance.full_name == "Function" && left is TypeKind::Lambda {
        ret Some(right)
    }

    ret None()
}

fun Type.contains_generic(): Boolean {
    if kind is TypeKind::Generic {
        ret true
    }

    for param in params {
        let param_type = container.get_type_by_id(param)

        if param_type.contains_generic() {
            ret true
        }
    }

    ret false
}


