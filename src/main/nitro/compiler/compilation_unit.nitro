
let CACHE_VERSION: Int = 0x02

struct CompilationUnit {
    reporter: Reporter
    module_paths: Map<String, String>
    included_paths: List<String>
    included_files: List<IncludedFile>
    include_queue: ArrayDeque<IncludedFile>
    enqueued_paths: Set<String>
    program: Program
    types: TypeContainer
    type_checker: TypeChecker
    backend: WasmBackend
    cache_path: Optional<String>
    core_path: Optional<String>
    verify_cache: Boolean
}

fun CompilationUnit::new(): CompilationUnit {
    let reporter = Reporter::new()
    let program = Program::new()
    let types = TypeContainer::new()

    ret CompilationUnit @[
        reporter,
        module_paths: #[],
        included_paths: [],
        included_files: [],
        include_queue: ArrayDeque::new(),
        enqueued_paths: %[],
        program,
        types,
        type_checker: TypeChecker::new(reporter, program, types),
        backend: WasmBackend::new(reporter, program),
        cache_path: None(),
        core_path: None(),
        verify_cache: false,
    ]
}

fun CompilationUnit.add_file(path: String, root: String) {
    add_file(IncludedFile::new(path, root))
}

fun CompilationUnit.add_file(file: IncludedFile) {
    if file.path in enqueued_paths {
        ret
    }
    enqueued_paths[] = file.path
    include_queue[] = file
}

fun CompilationUnit.add_source(source: String, path: String, root: String) {
    add_file(IncludedFile::from_string(source, path, root))
}

fun CompilationUnit.parse() {
    while include_queue.is_not_empty() {
        let file = include_queue.remove_last()!!

        let opt = parse_file_from_cache(file)
        let sub_program = if opt.is_some() { opt!! } else {
            let p = parse_file(file)
            save_parse_cache(file, p)
            p
        }

        included_files[] = file

        for inc in sub_program.includes {
            let include_path = resolve_full_path(inc.path, file.path, inc.span)

            add_file(include_path, file.root)
        }

        program.extend_with(sub_program)
    }
}

fun CompilationUnit.parse_file_from_cache(file: IncludedFile): Optional<Program> {
    if cache_path.is_none() {
        ret None()
    }

    let file_path = get_cache_file_path(file.file_path.path)
    if !file_path.exists()!! {
        ret None()
    }

    let bytes_list: List<Byte> = file_path.read_bytes()!!
    let buffer = ByteBuffer::new(bytes_list)
    buffer.start_read()

    // Header
    let cache_version = buffer.reader.read_int_be()
    let cache_time = buffer.reader.read_int_be()
    let cache_crc = buffer.reader.read_int_be()
    let cache_last_modified = buffer.reader.read_int_be()

    if cache_version != CACHE_VERSION {
        Log::info("Ignoring cache file: ${file.file_path.path}, invalid version: $cache_version")
        ret None()
    }

    if cache_last_modified != file.last_modified {
        Log::info("Ignoring cache file: ${file.file_path.path}, last modified mismatch: ${file.last_modified} != $cache_last_modified")
        ret None()
    }

    // If the last_modified is 0, it means it is not supported, so wee to check the CRC
    if file.last_modified == 0 && CRC32::from_string(file.source) != cache_crc {
        Log::info("Ignoring cache file: ${file.file_path.path}, CRC mismatch")
        ret None()
    }

    // Content
    let deserialized_sub_program = buffer.deserialize_program()

    if verify_cache {
        let parsed_sub_program = parse_file(file)
        let a = deserialized_sub_program.to_string()
        let b = parsed_sub_program.to_string()

        if a != b {
            Log::info("Cache mismatch: ${file.file_path.path}")
            Log::info("Deserialized: $a")
            Log::info("-" * 80)
            Log::info("Parsed: $b")
            Log::info("-" * 80)
        }

        // More expensive cache checks
//        let collector = ChangeCollector::new()
//        collector.diff(deserialized_sub_program, parsed_sub_program)
//
//        if collector.changes.is_not_empty() {
//            Log::info("Changes: ${collector.changes.len} at file ${file.path}")
//            for c in collector.changes {
//                Log::info(c)
//            }
//            Log::info("-" * 80)
//            Log::info(deserialized_sub_program)
//            Log::info("-" * 80)
//            Log::info(parsed_sub_program)
//        }
    }

    ret Some(deserialized_sub_program)
}

fun CompilationUnit.save_parse_cache(file: IncludedFile, sub_program: Program) {
    if cache_path.is_none() {
        ret
    }

    let buffer = ByteBuffer::new()

    // Header
    buffer.writer.add_int_be(CACHE_VERSION)
    buffer.writer.add_int_be(Instant::now().unix_timestamp.to_int())
    buffer.writer.add_int_be(CRC32::from_string(file.source))
    buffer.writer.add_int_be(file.last_modified)
    // Content
    buffer.serialize_program(sub_program)

    let bytes = buffer.finish_write()
    let file_path = get_cache_file_path(file.file_path.path)

    let res = file_path.write_bytes(bytes)
    if res.is_err() {
        crash("Failed to write cache file: ${file_path.path}: ${res.err}")
    }
}

fun CompilationUnit.parse_file(file: IncludedFile): Program {
    let start = Instant::now()
    let sub_program = Program::new()

    let lexer = Lexer::new(file.source, file)
    lexer.read_all()

    let parser = Parser::new(lexer, reporter, sub_program)
    parser.current_path = file.path
    parser.read_file()
    parser.deinit()

    let end = Instant::now()
    ret sub_program
}

fun CompilationUnit.get_cache_file_path(path: String): FilePath {
    let invalid_chars = [".", "/", "\\", ":", "*", "?", "\"", "<", ">", "|", " "]
    let safe_path = path

    if safe_path.starts_with("..") {
        safe_path = safe_path.substring(2, safe_path.len)
    }
    if safe_path.starts_with("/") {
        safe_path = safe_path.substring(1, safe_path.len)
    }
    if safe_path.starts_with("../") {
        safe_path = safe_path.substring(3, safe_path.len)
    }
    if safe_path.starts_with("./") {
        safe_path = safe_path.substring(2, safe_path.len)
    }
    if safe_path.ends_with(".nitro") {
        safe_path = safe_path.substring(0, safe_path.len - 6)
    }
    for c in invalid_chars {
        safe_path = safe_path.replace(c, "_")
    }

    let base_path = cache_path!!
    ret FilePath::new("$base_path/$safe_path.bin")
}

fun CompilationUnit::process_path(path: String, current_path: String): String {
    if ":" in path {
        path = path.split(":")[1]!!
    }

    let dir = FilePath::directory_name(current_path)
    ret FilePath::join(dir, path)
}

fun CompilationUnit.resolve_full_path(path: String, current_path: String, span: Span): String {
    if ":" in path {
        let module_name = path.split(":")[0]!!
        let sub_path = path.split(":")[1]!!

        let opt = module_paths[module_name]
        if opt.is_none() {
            reporter.report_error("Unknown module: $module_name", span)
        }

        ret FilePath::join(opt!!, sub_path)
    }

    let dir = FilePath::directory_name(current_path)
    ret FilePath::join(dir, path)
}

fun CompilationUnit.check_types() {
    type_checker.check_all()
}

fun CompilationUnit.compile(output_path: FilePath) {
    backend.compile_program()

    let buffer = backend.emitter.buffer

    // Temporary for debugging
    if backend.emitter.debug_print {
        Log::info(backend.emitter.debug_buffer.to_string())
    }

    output_path.write_bytes(buffer)!!
}

fun CompilationUnit.include_core() {
    // If specified, use the core path provided
    if core_path.is_some() {
        module_paths["core"] = FilePath::directory_name(core_path!!)
        add_file(IncludedFile::new(core_path!!, "core"))
        ret
    }

    // Otherwise, use the embedded core library in the executable
    let root = "src/main/nitro/core/core.nitro"
    module_paths["core"] = "src/main/nitro/core"
    add_source(include_as_string!("../core/collections/array_deque.nitro"), "collections/array_deque.nitro", root)
    add_source(include_as_string!("../core/collections/array_deque_iterator.nitro"), "collections/array_deque_iterator.nitro", root)
    add_source(include_as_string!("../core/collections/iterator.nitro"), "collections/iterator.nitro", root)
    add_source(include_as_string!("../core/collections/json.nitro"), "collections/json.nitro", root)
    add_source(include_as_string!("../core/collections/list.nitro"), "collections/list.nitro", root)
    add_source(include_as_string!("../core/collections/list_iterator.nitro"), "collections/list_iterator.nitro", root)
    add_source(include_as_string!("../core/collections/map.nitro"), "collections/map.nitro", root)
    add_source(include_as_string!("../core/collections/map_iterator.nitro"), "collections/map_iterator.nitro", root)
    add_source(include_as_string!("../core/collections/multimap.nitro"), "collections/multimap.nitro", root)
    add_source(include_as_string!("../core/collections/optional.nitro"), "collections/optional.nitro", root)
    add_source(include_as_string!("../core/collections/pair.nitro"), "collections/pair.nitro", root)
    add_source(include_as_string!("../core/collections/range_iterator.nitro"), "collections/range_iterator.nitro", root)
    add_source(include_as_string!("../core/collections/range_to.nitro"), "collections/range_to.nitro", root)
    add_source(include_as_string!("../core/collections/range_up_to.nitro"), "collections/range_up_to.nitro", root)
    add_source(include_as_string!("../core/collections/result.nitro"), "collections/result.nitro", root)
    add_source(include_as_string!("../core/collections/set.nitro"), "collections/set.nitro", root)
    add_source(include_as_string!("../core/collections/slice.nitro"), "collections/slice.nitro", root)
    add_source(include_as_string!("../core/debug/check.nitro"), "debug/check.nitro", root)
    add_source(include_as_string!("../core/debug/crash.nitro"), "debug/crash.nitro", root)
    add_source(include_as_string!("../core/debug/debug.nitro"), "debug/debug.nitro", root)
    add_source(include_as_string!("../core/debug/log.nitro"), "debug/log.nitro", root)
    add_source(include_as_string!("../core/debug/logger.nitro"), "debug/logger.nitro", root)
    add_source(include_as_string!("../core/debug/trace.nitro"), "debug/trace.nitro", root)
    add_source(include_as_string!("../core/fs/file_metadata.nitro"), "fs/file_metadata.nitro", root)
    add_source(include_as_string!("../core/fs/file_path.nitro"), "fs/file_path.nitro", root)
    add_source(include_as_string!("../core/lang/annotations.nitro"), "lang/annotations.nitro", root)
    add_source(include_as_string!("../core/lang/intrinsic.nitro"), "lang/intrinsic.nitro", root)
    add_source(include_as_string!("../core/math/hash/crc32.nitro"), "math/hash/crc32.nitro", root)
//    add_source(include_as_string!("../core/math/hash/md5.nitro"), "math/hash/md5.nitro", root)
    add_source(include_as_string!("../core/math/random/random.nitro"), "math/random/random.nitro", root)
    add_source(include_as_string!("../core/math/exponentiation.nitro"), "math/exponentiation.nitro", root)
    add_source(include_as_string!("../core/math/logarithms.nitro"), "math/logarithms.nitro", root)
    add_source(include_as_string!("../core/math/trigonometry.nitro"), "math/trigonometry.nitro", root)
    add_source(include_as_string!("../core/memory/array.nitro"), "memory/array.nitro", root)
    add_source(include_as_string!("../core/memory/bytes.nitro"), "memory/bytes.nitro", root)
//    add_source(include_as_string!("../core/memory/encoding.nitro"), "memory/encoding.nitro", root)
    add_source(include_as_string!("../core/memory/ffi.nitro"), "memory/ffi.nitro", root)
    add_source(include_as_string!("../core/memory/intrinsic_memory.nitro"), "memory/intrinsic_memory.nitro", root)
    add_source(include_as_string!("../core/memory/memory_allocator.nitro"), "memory/memory_allocator.nitro", root)
    add_source(include_as_string!("../core/memory/memory_arena.nitro"), "memory/memory_arena.nitro", root)
    add_source(include_as_string!("../core/memory/memory_stack.nitro"), "memory/memory_stack.nitro", root)
    add_source(include_as_string!("../core/memory/ptr.nitro"), "memory/ptr.nitro", root)
    add_source(include_as_string!("../core/primitives/boolean.nitro"), "primitives/boolean.nitro", root)
    add_source(include_as_string!("../core/primitives/byte.nitro"), "primitives/byte.nitro", root)
    add_source(include_as_string!("../core/primitives/float.nitro"), "primitives/float.nitro", root)
    add_source(include_as_string!("../core/primitives/function.nitro"), "primitives/function.nitro", root)
    add_source(include_as_string!("../core/primitives/int.nitro"), "primitives/int.nitro", root)
    add_source(include_as_string!("../core/primitives/long.nitro"), "primitives/long.nitro", root)
    add_source(include_as_string!("../core/primitives/never.nitro"), "primitives/never.nitro", root)
    add_source(include_as_string!("../core/primitives/nothing.nitro"), "primitives/nothing.nitro", root)
    add_source(include_as_string!("../core/sorting/ordering.nitro"), "sorting/ordering.nitro", root)
    add_source(include_as_string!("../core/sorting/quicksort.nitro"), "sorting/quicksort.nitro", root)
    add_source(include_as_string!("../core/string/char.nitro"), "string/char.nitro", root)
    add_source(include_as_string!("../core/string/string.nitro"), "string/string.nitro", root)
    add_source(include_as_string!("../core/string/string_builder.nitro"), "string/string_builder.nitro", root)
    add_source(include_as_string!("../core/time/duration.nitro"), "time/duration.nitro", root)
    add_source(include_as_string!("../core/time/instant.nitro"), "time/instant.nitro", root)
    add_source(include_as_string!("../core/wasi/runtime.nitro"), "wasi/runtime.nitro", root)
    add_source(include_as_string!("../core/wasi/wasi.nitro"), "wasi/wasi.nitro", root)
}

fun CompilationUnit::compile_all(args: ProgramArgs): Boolean {
    let start_compile_all = Instant::now()
    let unit = CompilationUnit::new()
    unit.cache_path = args.cache_dir
    unit.core_path = args.core_path

    if !args.no_core_lib {
        // Include core library
        let start_core = Instant::now()
        unit.include_core()
        unit.parse()

        // Parse errors
        if unit.reporter.has_reports() {
            if !unit.reporter.immediate_output {
                unit.reporter.report_errors()
            }
            ret false
        }

        let time_core = start_core.elapsed().to_milliseconds()
        Log::info("Core included (Time $time_core ms, Memory ${get_memory().get_stats()})")
    }

    // Copy module paths
    for pair in args.module_paths {
        unit.module_paths[pair.key] = pair.value
    }

    // Include compiler
    let start_compiler = Instant::now()
    unit.add_file(args.input, "mod")
    unit.parse()

    // Parse errors
    if unit.reporter.has_reports() {
        if !unit.reporter.immediate_output {
            unit.reporter.report_errors()
        }
        ret false
    }

   let time_compiler = start_compiler.elapsed().to_milliseconds()
    Log::info("Program included (Time $time_compiler ms, Memory ${get_memory().get_stats()})")

    // Perform type checking
    let start_checking = Instant::now()
    unit.check_types()

    // Type errors
    if unit.reporter.has_reports() {
        if !unit.reporter.immediate_output {
            unit.reporter.report_errors()
        }
        ret false
    }

    let time_checking = start_checking.elapsed().to_milliseconds()
    Log::info("Type checking finished (Time $time_checking ms, Memory ${get_memory().get_stats()})")

    if args.dump_ir {
        let str = unit.program.to_string()
        FilePath::new(args.output).write_text(str)!!
        Log::info("IR dumped to ${args.output}")
        ret true
    }

    // Perform code generation
    let start_compiling = Instant::now()
    unit.compile(FilePath::new(args.output))

    // Final errors
    if unit.reporter.has_reports() {
        if !unit.reporter.immediate_output {
            unit.reporter.report_errors()
        }
        ret false
    }

    let time_compiling = start_compiling.elapsed().to_milliseconds()
    Log::info("Compilation finished (Time $time_compiling ms, Memory ${get_memory().get_stats()})")

    let total_time = start_compile_all.elapsed().to_milliseconds()
    Log::info("Total time: $total_time ms")
    ret true
}
