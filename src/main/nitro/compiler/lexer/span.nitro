
struct Span {
    start: Int
    len: Int
    file: IncludedFile
    lazy_line: Optional<Int>
    lazy_column: Optional<Int>
}

fun Span::new(start: Int, len: Int, file: IncludedFile): Span {
    ret Span @[
        start, len, file,
        lazy_line: None(),
        lazy_column: None(),
    ]
}

fun Span::none(): Span {
    ret Span @[
        start: 0,
        len: 0,
        file: IncludedFile::from_string("", "<internal>", ""),
        lazy_line: Some(0),
        lazy_column: Some(0),
    ]
}

fun Span.calculate_line_number() {
    let line = 1
    let column = 1
    let i = 0

    let source = file.source

    while i < start {
        if source.get_byte(i).to_int() == a"\n" {
            line += 1
            column = 1
        } else {
            column += 1
        }
        i += 1
    }

    lazy_line = Some(line)
    lazy_column = Some(column)
}

fun Span.get_line(): Int {
    if lazy_line.is_none() {
        calculate_line_number()
    }
    ret lazy_line!!
}

fun Span.get_column(): Int {
    if lazy_column.is_none() {
        calculate_line_number()
    }
    ret lazy_column!!
}

fun Span.to_string(): String {
    let path = file.path
    let filename = if "/" in path {
        path.split("/").last()!!
    } else {
        path
    }

    let m = max(path.bytes_len, 27)
    let sub = if m < path.bytes_len {
        "..." + path.slice(path.bytes_len - m, m)
    } else {
        path
    }

    ret "$sub($filename:$line)"
}

fun Span.get_link(): String {
    let path = file.path
    let filename = if "/" in path {
        path.split("/").last()!!
    } else {
        path
    }

    ret " go.to($filename:$line)"
}

fun Span.get_link_params(): String {
    let path = file.path
    let filename = if "/" in path {
        path.split("/").last()!!
    } else {
        path
    }

    ret "($filename:$line)"
}

fun Span.is_equal(other: Span): Boolean {
    ret this.start == other.start && this.file.path == other.file.path
}

fun Span.get_ordering(other: Span): Ordering {
    if this.start < other.start {
        ret Ordering::Less
    }
    if this.start > other.start {
        ret Ordering::Greater
    }
    ret this.file.path.get_ordering(other.file.path)
}

fun Span.get_hash(): Int = start ^ file.path.get_hash()

fun ByteBuffer.serialize_span(value: Span) {
    let frame = start_frame(true)
    write_int(value.start)
    write_int(value.len)
    write_string(value.file.path)
    write_string(value.file.root)
    write_string(value.file.source)
    end_frame(frame)
}

fun ByteBuffer.deserialize_span(): Span {
    let frame = start_frame(false)
    let start = read_int()
    let len = read_int()

    let file_path = read_string()
    let file_root = read_string()
    let file_source = read_string()
    let file = IncludedFile::from_string(file_source, file_path, file_root)

    let value = Span @[
        start,
        len,
        file,
        lazy_line: None(),
        lazy_column: None(),
    ]
    end_frame(frame)
    ret value
}