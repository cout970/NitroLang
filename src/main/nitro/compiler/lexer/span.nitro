
struct Span {
    start: Int
    len: Int
    source: String
    file: String
    lazy_line: Optional<Int>
    lazy_column: Optional<Int>
}

fun Span::new(start: Int, len: Int, source: String, file: String): Span {
    ret Span @[
        start, len,
        source, file,
        lazy_line: None<Int>(),
        lazy_column: None<Int>(),
    ]
}

fun Span.calculate_line_number() {
    let line = 1
    let column = 1
    let i = 0

    while i < start {
        if source.get_byte(i).to_int() == a"\n" {
            line += 1
            column = 1
        } else {
            column += 1
        }
        i += 1
    }

    lazy_line = Some(line)
    lazy_column = Some(column)
}

fun Span.get_line(): Int {
    if lazy_line.is_none() {
        calculate_line_number()
    }
    ret lazy_line!!
}

fun Span.get_column(): Int {
    if lazy_column.is_none() {
        calculate_line_number()
    }
    ret lazy_column!!
}

fun Span.to_string(): String {
    let filename = if "/" in file {
        file.split("/").last()!!
    } else {
        file
    }

    let m = max(file.len, 27)
    let sub = if m < file.len {
        "..." + file.slice(file.len - m, m)
    } else {
        file
    }

    ret "$sub($filename:$line)"
}

fun Span.get_link(): String {
    let filename = if "/" in file {
        file.split("/").last()!!
    } else {
        file
    }

    ret " go.to($filename:$line)"
}

fun Span.is_equal(other: Span): Boolean {
    ret this.start == other.start && this.file == other.file
}

fun Span.get_ordering(other: Span): Ordering {
    if this.start < other.start {
        ret Ordering::Less
    }
    if this.start > other.start {
        ret Ordering::Greater
    }
    ret this.file.get_ordering(other.file)
}

fun Span.get_hash(): Int = start ^ file.get_hash()
