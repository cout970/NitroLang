
struct Token {
    kind: TokenKind
    offset: Int,
    extra: String
}

fun Token::new(kind: TokenKind, offset: Int): Token {
    ret Token @[kind, offset, extra: ""]
}

fun Token::new_with_extra(kind: TokenKind, offset: Int, extra: String): Token {
    ret Token @[kind, offset, extra]
}

fun Token.to_string(): String {
    ret "[$kind, $offset, '$extra']"
}

enum TokenKind {
    let text: String

    EOF @[text: "EOF"]
    NL @[text: "NL"]
    ERROR_CHARACTER @[text: "ERROR_CHARACTER"]
    RESERVED @[text: "RESERVED"]
//
    RANGE_INCLUSIVE @[text: "..="]
    RANGE_EXCLUSIVE @[text: "..<"]
    LAMBDA_START @[text: "@{"]
    SET_START @[text: "%["]
    MAP_START @[text: "#["]
    STRUCT_START @[text: "@["]
    DOUBLE_COLON @[text: "::"]
    ARROW @[text: "->"]
    OROR @[text: "||"]
    ANDAND @[text: "&&"]
    XORXOR @[text: "^^"]
    COMPARE @[text: "<=>"]
    EQ @[text: "=="]
    NEQ @[text: "!="]
    LEQ @[text: "<="]
    GEQ @[text: ">="]
    BANGBANG @[text: "!!"]
    ADD_ASSIGN @[text: "+="]
    SUB_ASSIGN @[text: "-="]
    MUL_ASSIGN @[text: "*="]
    DIV_ASSIGN @[text: "/="]
    MOD_ASSIGN @[text: "%="]
    QUESTION_MARK @[text: "?"]
    UNDERSCORE @[text: "_"]
    DOT @[text: "."]
    LPAREN @[text: "("]
    RPAREN @[text: ")"]
    LBRACE @[text: "{"]
    RBRACE @[text: "}"]
    LBRACKET @[text: "["]
    RBRACKET @[text: "]"]
    COMMA @[text: ","]
    COLON @[text: ":"]
    ADD @[text: "+"]
    SUB @[text: "-"]
    MUL @[text: "*"]
    DIV @[text: "/"]
    XOR @[text: "^"]
    DOLAR @[text: "\$"]
    MOD @[text: "%"]
    AT @[text: "@"]
    HASH @[text: "#"]
    OR @[text: "|"]
    AND @[text: "&"]
    NOT @[text: "!"]
    ASSIGN @[text: "="]
    LTH @[text: "<"]
    GTH @[text: ">"]
    THIS @[text: "this"]
    THIS_TYPE @[text: "This"]
    FUN @[text: "fun"]
    LET @[text: "let"]
    MODULE @[text: "mod"]
    STRUCT @[text: "struct"]
    RETURN @[text: "ret"]
    SIZE_OF @[text: "size_of"]
    OPTION @[text: "option"]
    INTERNAL @[text: "internal"]
    REC @[text: "rec"]
    TAG @[text: "tag"]
    DEFER @[text: "defer"]
    TYPE_ALIAS @[text: "type_alias"]
    ENUM @[text: "enum"]
    NOTHING @[text: "nothing"]
    WHEN @[text: "when"]
    MATCH @[text: "match"]
    ALIAS @[text: "alias"]
    IF @[text: "if"]
    ELSE @[text: "else"]
    FOR @[text: "for"]
    IN @[text: "in"]
    WHILE @[text: "while"]
    REPEAT @[text: "repeat"]
    LOOP @[text: "loop"]
    IS @[text: "is"]
    AS @[text: "as"]
    TRUE @[text: "true"]
    FALSE @[text: "false"]
    NULL @[text: "null"]
    INCLUDE @[text: "include"]
    BREAK @[text: "break"]
    CONTINUE @[text: "continue"]
    USE @[text: "use"]
    MUT @[text: "mut"]
    JSON @[text: "json!"]
    TEST @[text: "test!"]
//
    FOREIGN_BLOCK @[text: "foreign_block"]
    WHITE_SPACE @[text: "white_space"]
    LINE_COMMENT @[text: "line_comment"]
    DOC_COMMENT @[text: "doc_comment"]
    BLOCK_COMMENT @[text: "block_comment"]
//
    INT_NUMBER @[text: "int_number"]
    LONG_NUMBER @[text: "long_number"]
    FLOAT_NUMBER @[text: "float_number"]
    UPPER_IDENTIFIER @[text: "upper_identifier"]
    LOWER_IDENTIFIER @[text: "lower_identifier"]
//
    PLAIN_STRING @[text: "plain_string"]
    STRING_START @[text: "string_start"]
    STRING_ESCAPE @[text: "string_escape"]
    STRING_INTERP_START @[text: "string_interp_start"]
    STRING_INTERP_END @[text: "string_interp_end"]
    STRING_VAR @[text: "string_var"]
    STRING_BLOB @[text: "string_blob"]
    STRING_END @[text: "string_end"]
//
    STRING2_START @[text: "string2_start"]
    STRING2_NL @[text: "string2_nl"]
    STRING2_BLOB @[text: "string2_blob"]
    STRING2_END @[text: "string2_end"]
}