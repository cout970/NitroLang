
struct Token {
    kind: TokenKind
    offset: Int,
    extra: String
}

fun Token::new(kind: TokenKind, offset: Int): Token {
    ret Token @[kind, offset, extra: ""]
}

fun Token::new_with_extra(kind: TokenKind, offset: Int, extra: String): Token {
    ret Token @[kind, offset, extra]
}

fun Token.to_string(): String {
    ret "[$kind, $offset, '$extra']"
}

enum TokenKind {
    let text: String
    let len: Int

    EOF @[text: "EOF", len: 0]
    NL @[text: "NL", len: 1]
    ERROR_CHARACTER @[text: "ERROR_CHARACTER", len: 1]
    RESERVED @[text: "RESERVED", len: 0]
//
    RANGE_INCLUSIVE @[text: "..=", len: 3]
    RANGE_EXCLUSIVE @[text: "..<", len: 3]
    LAMBDA_START @[text: "@{", len: 2]
    SET_START @[text: "%[", len: 2]
    MAP_START @[text: "#[", len: 2]
    STRUCT_START @[text: "@[", len: 2]
    DOUBLE_COLON @[text: "::", len: 2]
    ARROW @[text: "->", len: 2]
    OROR @[text: "||", len: 2]
    ANDAND @[text: "&&", len: 2]
    XORXOR @[text: "^^", len: 2]
    COMPARE @[text: "<=>", len: 3]
    EQ @[text: "==", len: 2]
    NEQ @[text: "!=", len: 2]
    LEQ @[text: "<=", len: 2]
    GEQ @[text: ">=", len: 2]
    BANGBANG @[text: "!!", len: 2]
    ADD_ASSIGN @[text: "+=", len: 2]
    SUB_ASSIGN @[text: "-=", len: 2]
    MUL_ASSIGN @[text: "*=", len: 2]
    DIV_ASSIGN @[text: "/=", len: 2]
    MOD_ASSIGN @[text: "%=", len: 2]
    QUESTION_MARK @[text: "?", len: 1]
    UNDERSCORE @[text: "_", len: 1]
    DOT @[text: ".", len: 1]
    LPAREN @[text: "(", len: 1]
    RPAREN @[text: ")", len: 1]
    LBRACE @[text: "{", len: 1]
    RBRACE @[text: "}", len: 1]
    LBRACKET @[text: "[", len: 1]
    RBRACKET @[text: "]", len: 1]
    COMMA @[text: ",", len: 1]
    COLON @[text: ":", len: 1]
    ADD @[text: "+", len: 1]
    SUB @[text: "-", len: 1]
    MUL @[text: "*", len: 1]
    DIV @[text: "/", len: 1]
    XOR @[text: "^", len: 1]
    DOLAR @[text: "\$", len: 1]
    MOD @[text: "%", len: 1]
    AT @[text: "@", len: 1]
    HASH @[text: "#", len: 1]
    OR @[text: "|", len: 1]
    AND @[text: "&", len: 1]
    NOT @[text: "!", len: 1]
    ASSIGN @[text: "=", len: 1]
    LTH @[text: "<", len: 1]
    GTH @[text: ">", len: 1]
    THIS @[text: "this", len: 4]
    THIS_TYPE @[text: "This", len: 4]
    FUN @[text: "fun", len: 3]
    LET @[text: "let", len: 3]
    MODULE @[text: "mod", len: 3]
    STRUCT @[text: "struct", len: 6]
    RETURN @[text: "ret", len: 3]
    SIZE_OF @[text: "size_of", len: 7]
    OPTION @[text: "option", len: 6]
    INTERNAL @[text: "internal", len: 8]
    REC @[text: "rec", len: 3]
    TAG @[text: "tag", len: 3]
    DEFER @[text: "defer", len: 5]
    TYPE_ALIAS @[text: "type_alias", len: 10]
    ENUM @[text: "enum", len: 4]
    NOTHING @[text: "nothing", len: 7]
    WHEN @[text: "when", len: 4]
    MATCH @[text: "match", len: 5]
    ALIAS @[text: "alias", len: 5]
    IF @[text: "if", len: 2]
    ELSE @[text: "else", len: 4]
    FOR @[text: "for", len: 3]
    IN @[text: "in", len: 2]
    WHILE @[text: "while", len: 5]
    REPEAT @[text: "repeat", len: 6]
    LOOP @[text: "loop", len: 4]
    IS @[text: "is", len: 2]
    AS @[text: "as", len: 2]
    TRUE @[text: "true", len: 4]
    FALSE @[text: "false", len: 5]
    NULL @[text: "null", len: 4]
    INCLUDE @[text: "include", len: 7]
    BREAK @[text: "break", len: 5]
    CONTINUE @[text: "continue", len: 8]
    USE @[text: "use", len: 3]
    MUT @[text: "mut", len: 3]
    JSON @[text: "json!", len: 5]
    TEST @[text: "test!", len: 5]
    INCLUDE_AS_BYTES @[text: "include_as_bytes!", len: 17]
    INCLUDE_AS_STRING @[text: "include_as_string!", len: 18]
//
    FOREIGN_BLOCK @[text: "foreign_block", len: 0]
    WHITE_SPACE @[text: "white_space", len: 0]
    LINE_COMMENT @[text: "line_comment", len: 0]
    DOC_COMMENT @[text: "doc_comment", len: 0]
    BLOCK_COMMENT @[text: "block_comment", len: 0]
//
    INT_NUMBER @[text: "int_number", len: 0]
    LONG_NUMBER @[text: "long_number", len: 0]
    FLOAT_NUMBER @[text: "float_number", len: 0]
    IDENTIFIER @[text: "identifier", len: 0]
//
    PLAIN_STRING @[text: "plain_string", len: 0]
    ASCII_STRING @[text: "ascii_string", len: 0]
    STRING_START @[text: "string_start", len: 1]
    STRING_INTERP_START @[text: "string_interp_start", len: 2]
    STRING_INTERP_END @[text: "string_interp_end", len: 1]
    STRING_VAR @[text: "string_var", len: 0]
    STRING_BLOB @[text: "string_blob", len: 0]
    STRING_END @[text: "string_end", len: 1]
//
    STRING2_START @[text: "string2_start", len: 3]
    STRING2_NL @[text: "string2_nl", len: 1]
    STRING2_BLOB @[text: "string2_blob", len: 0]
    STRING2_END @[text: "string2_end", len: 2]
}

fun TokenKind.is_equal(other: TokenKind): Boolean {
    ret this.variant == other.variant
}