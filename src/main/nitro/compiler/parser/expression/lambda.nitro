
// @{ a -> a + 1 }
// @{}
// lambdaExpr
//     : LAMBDA_START lambdaDef? NL* statement (NL+ statement)* NL* RBRACE
//     | LAMBDA_START lambdaDef? NL* RBRACE
//     ;

// a, b, rec Int, ret Int ->
// lambdaDef
//     : lambdaReceiver COMMA lambdaParams COMMA lambdaReturn ARROW
//     | lambdaReceiver COMMA lambdaParams                    ARROW
//     | lambdaReceiver                    COMMA lambdaReturn ARROW
//     | lambdaReceiver                                       ARROW
//     |                      lambdaParams COMMA lambdaReturn ARROW
//     |                      lambdaParams                    ARROW
//     |                                         lambdaReturn ARROW
//     ;

// lambdaParams
//     : lambdaArgument (COMMA lambdaArgument)* ;

// lambdaReceiver
//     : REC typeUsage;

// lambdaReturn
//     : RETURN typeUsage;

// lambdaArgument
//     : anyName (COLON typeUsage)?
//     | UNDERSCORE (COLON typeUsage)?
//     ;

fun Parser.read_expression_lambda(code: NCode): Parsed<NInstId> {
    let span = lexer.current_token_span
    skip_token_kind(TokenKind::LAMBDA_START)

    let lambda = create_lambda(code)
    let lambda_code = lambda.code

    // Parameter definition
    read_lambda_header(lambda)?

    // Code of the lambda
    skip_nl()
    read_statement_block_end(lambda_code)

    // Make sure the last expression is a return
    if lambda_code.last_expression.is_some() {
        let inst = lambda_code.find_inst(lambda_code.last_expression!!)

        if inst.kind !is NInstKind::Return {
            let inst = lambda_code.add_return(span, lambda_code.last_expression!!)
            lambda_code.last_expression = Some(inst.id)
        }
    } else {
        let inst = lambda_code.add_lit_nothing(span)
        lambda_code.last_expression = Some(inst.id)
    }

    let inst = code.add_lambda(span, lambda.id)
    ret found(inst.id)
}

fun Parser.read_lambda_header(lambda: NLambda): Parsed<Nothing> {
    // Has lambdaDef
    if lexer.find_token_kind_before2(TokenKind::ARROW, [TokenKind::NL, TokenKind::RBRACE]) {
        loop {
            when lexer.current_token_kind {
                TokenKind::REC -> {
                    lexer.next_token()
                    lambda.receiver_type = Some(read_type_usage()?)
                }
                TokenKind::RETURN -> {
                    lexer.next_token()
                    lambda.return_type_usage = Some(read_type_usage()?)
                }
                else -> {
                    read_lambda_parameter(lambda)?
                }
            }

            if lexer.current_token_kind == TokenKind::ARROW {
                break
            }

            skip_token_kind(TokenKind::COMMA)?
        }
        skip_token_kind(TokenKind::ARROW)
    }

    ret found(nothing)
}

fun Parser.read_lambda_parameter(lambda: NLambda): Parsed<Nothing> {
    let span = lexer.current_token_span
    read_var_modifier()?

    let name = if lexer.current_token_kind == TokenKind::UNDERSCORE {
        skip_token_kind(TokenKind::UNDERSCORE)?
        "_"
    } else {
        read_name()?
    }
    skip_nl()

    let type_usage = if lexer.current_token_kind == TokenKind::COLON {
        skip_token_kind(TokenKind::COLON)
        read_type_usage()?
    } else {
        NTypeUsage::unresolved(span)
    }

    lambda.add_parameter(span, name, type_usage)
    ret found(nothing)
}

fun Parser.create_lambda(code: NCode): NLambda {
    let span = lexer.current_token_span
    let new_code = code.new_child_code(NCodeContainer::None @[], false)
    program.codes[] = new_code

    let lambda_id = program.id_provider.next()

    let lambda = NLambda @[
        program,
        container: code.container,
        id: lambda_id,
        name: "lambda#${lambda_id}",
        span,
        receiver_type: None(),
        return_type_usage: None(),
        return_type_token: None(),
        type_token: None(),
        parameters: [],
        code_id: new_code.id.new_copy(),
        parent_inst: Id @[current_value: code.inst_id_provider.last_id + 1],
        parent_block: code.current_block
        ctx: None(),
    ]

    program.lambdas[] = lambda
    new_code.container = NCodeContainer::Lambda @[def: lambda]
    code.lambdas[] = lambda.id
    ret lambda
}
