
//    constExpr
//        : INT_NUMBER
//        | LONG_NUMBER
//        | FLOAT_NUMBER
//        | string
//        | TRUE
//        | FALSE
//        | NULL
//        | NOTHING
//        ;

option NConstExpr {
    NConstInt {
        value: Int
    }
    NConstLong {
        value: Long
    }
    NConstFloat {
        value: Float
    }
    NConstString {
        value: String
    }
    NConstBoolean {
        value: Boolean
    }
    NConstNothing
}

// Parse a constant expression, a value that can be evaluated at compile time
fun Parser.read_const_expr(): Parsed<NConstExpr> {
    let expr = when lexer.current_token_kind {
        TokenKind::INT_NUMBER -> {
            let value: Int = read_int()?
            NConstExpr::NConstInt @[value]
        }
        TokenKind::LONG_NUMBER -> {
            let value: Long = read_long()?
            NConstExpr::NConstLong @[value]
        }
        TokenKind::FLOAT_NUMBER -> {
            let value: Float = read_float()?
            NConstExpr::NConstFloat @[value]
        }
        TokenKind::PLAIN_STRING -> {
            let value: String = read_plain_string()?
            NConstExpr::NConstString @[value]
        }
        TokenKind::ASCII_STRING -> {
            let value: Int = read_ascii_string()?
            NConstExpr::NConstInt @[value]
        }
        TokenKind::TRUE -> {
            lexer.next_token()
            NConstExpr::NConstBoolean @[value: true]
        }
        TokenKind::FALSE -> {
            lexer.next_token()
            NConstExpr::NConstBoolean @[value: false]
        }
        TokenKind::NULL -> {
            lexer.next_token()
            NConstExpr::NConstNothing @[]
        }
        TokenKind::NOTHING -> {
            lexer.next_token()
            NConstExpr::NConstNothing @[]
        }
        else -> {
            ret parse_error(ParseError::ExpectedConstExpr, lexer.current_token)
        }
    }

    ret found(expr)
}

fun Parser.read_int(): Parsed<Int> {
    if lexer.current_token_kind != TokenKind::INT_NUMBER {
        ret parse_error(ParseError::ExpectedInt, lexer.current_token)
    }

    let text: String = lexer.current_token_text
    lexer.next_token()

    let parse_result = when {
        text.starts_with("0x") -> text.slice(2, text.bytes_len).to_int_in_base(16)
        text.starts_with("0o") -> text.slice(2, text.bytes_len).to_int_in_base(8)
        text.starts_with("0b") -> text.slice(2, text.bytes_len).to_int_in_base(2)
        else -> text.to_int()
    }

    check_not(parse_result.is_none()) @{
        "Failed to parse int: $text"
    }

    ret found(parse_result!!)
}

fun Parser.read_long(): Parsed<Long> {
    if lexer.current_token_kind != TokenKind::LONG_NUMBER {
        ret parse_error(ParseError::ExpectedLong, lexer.current_token)
    }

    let text: String = lexer.current_token_text
    lexer.next_token()

    let parse_result = when {
        text.starts_with("0x") -> text.slice(2, text.bytes_len).to_long_in_base(16L)
        text.starts_with("0o") -> text.slice(2, text.bytes_len).to_long_in_base(8L)
        text.starts_with("0b") -> text.slice(2, text.bytes_len).to_long_in_base(2L)
        else -> text.to_long()
    }

    check_not(parse_result.is_none()) @{
        "Failed to parse long: $text"
    }

    ret found(parse_result!!)
}

fun Parser.read_float(): Parsed<Float> {
    if lexer.current_token_kind != TokenKind::FLOAT_NUMBER {
        ret parse_error(ParseError::ExpectedFloat, lexer.current_token)
    }

    let text: String = lexer.current_token_text
    lexer.next_token()
    let parse_result = text.to_float()

    check_not(parse_result.is_none()) @{
        "Failed to parse float: $text"
    }

    ret found(parse_result!!)
}

fun NConstExpr.get_string(): Optional<String> {
    if this is NConstExpr::NConstString {
        ret Some((this as NConstExpr::NConstString).value)
    }
    ret None()
}

fun NConstExpr.get_boolean(): Optional<Boolean> {
    if this is NConstExpr::NConstBoolean {
        ret Some((this as NConstExpr::NConstBoolean).value)
    }
    ret None()
}

fun NConstExpr.to_string(): String {
    ret when {
        this is NConstExpr::NConstInt -> (this as NConstExpr::NConstInt).value.to_string()
        this is NConstExpr::NConstLong -> (this as NConstExpr::NConstLong).value.to_string()
        this is NConstExpr::NConstFloat -> (this as NConstExpr::NConstFloat).value.to_string()
        this is NConstExpr::NConstString -> "\"" + (this as NConstExpr::NConstString).value.replace("\n", "\\n") + "\""
        this is NConstExpr::NConstBoolean -> (this as NConstExpr::NConstBoolean).value.to_string()
        this is NConstExpr::NConstNothing -> "nothing"
        else -> unreachable()
    }
}

fun ByteBuffer.serialize_const_expr(value: NConstExpr) {
    let frame = start_frame(true)
    when {
        value is NConstExpr::NConstInt -> {
            write_int(0)
            write_int((value as NConstExpr::NConstInt).value)
        }
        value is NConstExpr::NConstLong -> {
            write_int(1)
            write_long((value as NConstExpr::NConstLong).value)
        }
        value is NConstExpr::NConstFloat -> {
            write_int(2)
            write_float((value as NConstExpr::NConstFloat).value)
        }
        value is NConstExpr::NConstString -> {
            write_int(3)
            write_string((value as NConstExpr::NConstString).value)
        }
        value is NConstExpr::NConstBoolean -> {
            write_int(4)
            write_boolean((value as NConstExpr::NConstBoolean).value)
        }
        value is NConstExpr::NConstNothing -> {
            write_int(5)
        }
    }
    end_frame(frame)
}

fun ByteBuffer.deserialize_const_expr(): NConstExpr {
    let frame = start_frame(false)
    let variant = read_int()
    let value = when variant {
        0 -> NConstExpr::NConstInt @[value: read_int()]
        1 -> NConstExpr::NConstLong @[value: read_long()]
        2 -> NConstExpr::NConstFloat @[value: read_float()]
        3 -> NConstExpr::NConstString @[value: read_string()]
        4 -> NConstExpr::NConstBoolean @[value: read_boolean()]
        5 -> NConstExpr::NConstNothing @[]
        else -> unreachable()
    }
    end_frame(frame)
    ret value
}