
// E.g. when <cond> {
//     <expr> -> <expr>
//     else -> <expr>
// }
//
// whenExpr
//     : WHEN NL* expression? NL* LBRACE NL* (whenEntry (commaOrNl whenEntry)* COMMA?)? NL* RBRACE ;
//
// whenEntry
//     : whenKey ARROW expression
//     | whenKey ARROW statementBlock
//     ;
//
// whenKey
//     : expression
//     | ELSE
//     ;

fun Parser.read_expression_when(code: NCode, exhaustive: Boolean): Parsed<NInstId> {
    if exhaustive { skip_token_kind(TokenKind::WHEN_BANG)? } else { skip_token_kind(TokenKind::WHEN)? }
    skip_nl()

    let span = lexer.current_token_span
    let expr: Optional<NInstId> = None()

    if lexer.current_token_kind != TokenKind::LBRACE {
        expr = Some(read_expression(code)?)
        skip_nl()
    }

    skip_token_kind(TokenKind::LBRACE)?
    skip_nl()

    let when_info = WhenInfo @[
        is_expression: true,
        is_exhaustive: exhaustive,
        has_else: false,
        expr,
        branches: [],
        conditions: [],
        result_variable: None(),
    ]

    let start = code.add_when_start(span, when_info)

    let type_usage = NTypeUsage::unresolved(span)
    let when_var = code.add_let(span, "when-result", Some(type_usage))
    when_info.result_variable = Some(when_var.id)

    let when_block = code.enter_block(span, false)

    read_until_delimited(TokenKind::RBRACE) @{
        // else -> {}
        if lexer.current_token_kind == TokenKind::ELSE {
            let span = lexer.current_token_span
            skip_token_kind(TokenKind::ELSE)?
            skip_token_kind(TokenKind::ARROW)?

            if when_info.has_else {
                // only one else is allowed
                ret parse_error(ParseError::WhenMultipleElse, lexer.current_token)
            }

            when_info.has_else = true

            if lexer.current_token_kind == TokenKind::LBRACE {
                read_statement_block_expr(code)?
            } else {
                code.last_expression = Some(read_expression(code)?)
            }

            when_info.branches[] = code.last_expression!!
            code.add_store_var(span, "", "when-result", code.last_expression!!, Some(when_var.id))

            ret found(nothing)
        }

        if when_info.has_else {
            // 'else' must be the last entry, cannot have anything after it
            ret parse_error(ParseError::WhenUnorderedElse, lexer.current_token)
        }

        let condition: NInstId
        when {
            lexer.current_token_kind == TokenKind::IS -> {
                let span = lexer.current_token_span
                skip_token_kind(TokenKind::IS)?

                if expr.is_none() {
                    // 'is' can only be used with a condition
                    ret parse_error(ParseError::WhenIsWithoutCondition, lexer.current_token)
                }

                let type_pattern = read_type_pattern_excluding_function_types()?
                let inst = code.add_is_type(span, expr!!, type_pattern)
                condition = inst.id
            }
            expr.is_some() -> {
                let span = lexer.current_token_span
                let cond_aux = read_expression(code)?

                let inst = code.add_fun_call(span, "", "is_equal", true, [expr!!, cond_aux], [])
                condition = inst.id
            }
            else -> {
                condition = read_expression(code)?
            }
        }

        // Multiple values
        while lexer.current_token_kind == TokenKind::COMMA {
            skip_token_kind(TokenKind::COMMA)?
            skip_nl()

            code.add_if_start(span, condition)

            code.enter_block(span, false)
            let if_true = code.add_lit_boolean(span, true)
            code.exit_block(span)

            code.add_if_else(span)

            code.enter_block(span, false)
            let new_cond: NInstId

            when {
               lexer.current_token_kind == TokenKind::IS -> {
                   let span = lexer.current_token_span
                   skip_token_kind(TokenKind::IS)?

                   if expr.is_none() {
                       // 'is' can only be used with a condition
                       ret parse_error(ParseError::WhenIsWithoutCondition, lexer.current_token)
                   }

                   let type_pattern = read_type_pattern_excluding_function_types()?
                   let inst = code.add_is_type(span, expr!!, type_pattern)
                   new_cond = inst.id
               }
               expr.is_some() -> {
                   let span = lexer.current_token_span
                   let cond_aux = read_expression(code)?

                   let inst = code.add_fun_call(span, "", "is_equal", true, [expr!!, cond_aux], [])
                   new_cond = inst.id
               }
               else -> {
                   new_cond = read_expression(code)?
               }
            }

            code.exit_block(span)
            code.add_if_end(span)

            let choose = code.add_if_choose(span, condition, if_true.id, new_cond)
            condition = choose.id
        }

        let span = lexer.current_token_span
        skip_token_kind(TokenKind::ARROW)?

        when_info.conditions[] = condition
        code.add_if_start(span, condition)
        code.enter_block(span, false)

        if lexer.current_token_kind == TokenKind::LBRACE {
            read_statement_block_expr(code)?
        } else {
            code.last_expression = Some(read_expression(code)?)
        }

        when_info.branches[] = code.last_expression!!
        code.add_store_var(span, "", "when-result", code.last_expression!!, Some(when_var.id))

        code.add_block_jump(span, false, Some(when_block))
        code.exit_block(span)

        code.add_if_end(span)

        ret found(nothing)
    }?

    code.exit_block(span)
    code.add_when_end(span, start.id)

    let inst = code.add_load_var(span, "", "when-result", Some(when_var.id))

    ret found(inst.id)
}
