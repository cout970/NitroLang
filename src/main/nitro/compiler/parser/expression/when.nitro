
// E.g. when <cond> {
//     <expr> -> <expr>
//     else -> <expr>
// }
//
// whenExpr
//     : WHEN NL* expression? NL* LBRACE NL* (whenEntry (commaOrNl whenEntry)* COMMA?)? NL* RBRACE ;
//
// whenEntry
//     : whenKey ARROW expression
//     | whenKey ARROW statementBlock
//     ;
//
// whenKey
//     : expression
//     | ELSE
//     ;

fun Parser.read_expression_when(code: NCode): Parsed<NInstId> {
    skip_token_kind(TokenKind::WHEN)?
    skip_nl()

    let span = lexer.current_token_span
    let expr: Optional<NInstId> = None()

    if lexer.current_token_kind != TokenKind::LBRACE {
        expr = Some(read_expression(code)?)
        skip_nl()
    }

    skip_token_kind(TokenKind::LBRACE)?
    skip_nl()

    code.add_when_start(span)
    code.enter_block(false)

    let type_usage = NTypeUsage::unresolved(span)
    let when_var = code.add_let(span, "when-result", Some(type_usage))

    let when_block = code.current_block
    let has_read_else = false

    read_until_delimited(TokenKind::RBRACE) @{
        // else -> {}
        if lexer.current_token_kind == TokenKind::ELSE {
            let span = lexer.current_token_span
            skip_token_kind(TokenKind::ELSE)?
            skip_token_kind(TokenKind::ARROW)?

            if has_read_else {
                // only one else is allowed
                ret parse_error(ParseError::WhenMultipleElse, lexer.current_token)
            }

            has_read_else = true

            if lexer.current_token_kind == TokenKind::LBRACE {
                read_statement_block_expr(code)?
            } else {
                read_expression(code)?
            }

            code.add_store_var(span, "", "when-result", code.last_expression!!, Some(when_var))

            ret found(nothing)
        }

        // <expr> -> <expr>
        if has_read_else {
            // 'else' must be the last entry, cannot have anything after it
            ret parse_error(ParseError::WhenUnorderedElse, lexer.current_token)
        }

        let condition = if expr.is_some() {
            let span = lexer.current_token_span
            let cond_aux = read_expression(code)?

            code.add_fun_call(span, "", "is_equal", [expr!!, cond_aux], []).id
        } else {
            read_expression(code)?
        }

        let span = lexer.current_token_span
        skip_token_kind(TokenKind::ARROW)?

        code.add_if_start(span, condition)
        code.enter_block(false)

        if lexer.current_token_kind == TokenKind::LBRACE {
            read_statement_block_expr(code)?
        } else {
            read_expression(code)?
        }

        code.add_store_var(span, "", "when-result", code.last_expression!!, Some(when_var))

        code.add_block_jump(span, false, Some(when_block))
        code.exit_block()

        code.add_if_end(span)

        ret found(nothing)
    }?

    code.exit_block()
    code.add_when_end(span)

    if !has_read_else {
        report_error("When expressions must have an 'else' branch", span)
    }

    let inst = code.add_load_var(span, "", "when-result", Some(when_var))

    ret found(inst.id)
}
