
// E.g. size_of<Int>()
// sizeOfExpr
//     : SIZE_OF LTH NL* typeUsage NL* GTH
//     | SIZE_OF LTH NL* typeUsage NL* GTH LPAREN RPAREN
//     ;

fun Parser.read_expression_size_of(code: NCode): Parsed<NInstId> {
    let span = lexer.current_token_span
    skip_token_kind(TokenKind::SIZE_OF)?
    skip_token_kind(TokenKind::LTH)?
    skip_nl()
    let type_usage = read_type_usage()?
    skip_nl()
    skip_token_kind(TokenKind::GTH)?

    if lexer.current_token.kind == TokenKind::LPAREN {
        skip_token_kind(TokenKind::LPAREN)?
        skip_token_kind(TokenKind::RPAREN)?
    }

    let inst = code.add_size_of(span, type_usage)

    ret found(inst.id)
}
