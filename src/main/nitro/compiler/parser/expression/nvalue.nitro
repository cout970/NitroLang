
//    constExpr
//        : INT_NUMBER
//        | LONG_NUMBER
//        | FLOAT_NUMBER
//        | string
//        | TRUE
//        | FALSE
//        | NULL
//        | NOTHING
//        ;

option NValue {
    Int {
        value: Int
    }
    Long {
        value: Long
    }
    Float {
        value: Float
    }
    String {
        value: String
    }
    Boolean {
        value: Boolean
    }
    Nothing
}

// Parse a constant expression, a value that can be evaluated at compile time
fun Parser.read_nvalue(): Parsed<NValue> {
    let expr = when lexer.current_token_kind {
        TokenKind::INT_NUMBER -> {
            let value: Int = read_int()?
            NValue::Int @[value]
        }
        TokenKind::LONG_NUMBER -> {
            let value: Long = read_long()?
            NValue::Long @[value]
        }
        TokenKind::FLOAT_NUMBER -> {
            let value: Float = read_float()?
            NValue::Float @[value]
        }
        TokenKind::PLAIN_STRING -> {
            let value: String = read_plain_string()?
            NValue::String @[value]
        }
        TokenKind::ASCII_STRING -> {
            let value: Int = read_ascii_string()?
            NValue::Int @[value]
        }
        TokenKind::TRUE -> {
            lexer.next_token()
            NValue::Boolean @[value: true]
        }
        TokenKind::FALSE -> {
            lexer.next_token()
            NValue::Boolean @[value: false]
        }
        TokenKind::NULL -> {
            lexer.next_token()
            NValue::Nothing @[]
        }
        TokenKind::NOTHING -> {
            lexer.next_token()
            NValue::Nothing @[]
        }
        else -> {
            ret parse_error(ParseError::ExpectedConstExpr, lexer.current_token)
        }
    }

    ret found(expr)
}

fun Parser.read_int(): Parsed<Int> {
    if lexer.current_token_kind != TokenKind::INT_NUMBER {
        ret parse_error(ParseError::ExpectedInt, lexer.current_token)
    }

    let text: String = lexer.current_token_text
    lexer.next_token()

    let parse_result = when {
        text.starts_with("0x") -> text.slice(2, text.len).to_int_in_base(16)
        text.starts_with("0o") -> text.slice(2, text.len).to_int_in_base(8)
        text.starts_with("0b") -> text.slice(2, text.len).to_int_in_base(2)
        else -> text.to_int()
    }

    check_not(parse_result.is_none()) @{
        "Failed to parse int: $text"
    }

    ret found(parse_result!!)
}

fun Parser.read_long(): Parsed<Long> {
    if lexer.current_token_kind != TokenKind::LONG_NUMBER {
        ret parse_error(ParseError::ExpectedLong, lexer.current_token)
    }

    let text: String = lexer.current_token_text
    lexer.next_token()

    let parse_result = when {
        text.starts_with("0x") -> text.slice(2, text.len).to_long_in_base(16L)
        text.starts_with("0o") -> text.slice(2, text.len).to_long_in_base(8L)
        text.starts_with("0b") -> text.slice(2, text.len).to_long_in_base(2L)
        else -> text.to_long()
    }

    check_not(parse_result.is_none()) @{
        "Failed to parse long: $text"
    }

    ret found(parse_result!!)
}

fun Parser.read_float(): Parsed<Float> {
    if lexer.current_token_kind != TokenKind::FLOAT_NUMBER {
        ret parse_error(ParseError::ExpectedFloat, lexer.current_token)
    }

    let text: String = lexer.current_token_text
    lexer.next_token()
    let parse_result = text.to_float()

    check_not(parse_result.is_none()) @{
        "Failed to parse float: $text"
    }

    ret found(parse_result!!)
}

fun NValue.get_string(): Optional<String> {
    if this is NValue::String {
        ret Some((this as NValue::String).value)
    }
    ret None()
}

fun NValue.get_int(): Optional<Int> {
    if this is NValue::Int {
        ret Some((this as NValue::Int).value)
    }
    ret None()
}

fun NValue.get_boolean(): Optional<Boolean> {
    if this is NValue::Boolean {
        ret Some((this as NValue::Boolean).value)
    }
    ret None()
}

fun NValue.to_string(): String {
    ret when {
        this is NValue::Int -> (this as NValue::Int).value.to_string()
        this is NValue::Long -> (this as NValue::Long).value.to_string()
        this is NValue::Float -> (this as NValue::Float).value.to_string()
        this is NValue::String -> "\"" + (this as NValue::String).value.replace("\n", "\\n") + "\""
        this is NValue::Boolean -> (this as NValue::Boolean).value.to_string()
        this is NValue::Nothing -> "nothing"
        else -> unreachable()
    }
}

fun ByteBuffer.serialize_nvalue(value: NValue) {
    let frame = start_frame(true)
    when {
        value is NValue::Int -> {
            write_int(0)
            write_int((value as NValue::Int).value)
        }
        value is NValue::Long -> {
            write_int(1)
            write_long((value as NValue::Long).value)
        }
        value is NValue::Float -> {
            write_int(2)
            write_float((value as NValue::Float).value)
        }
        value is NValue::String -> {
            write_int(3)
            write_string((value as NValue::String).value)
        }
        value is NValue::Boolean -> {
            write_int(4)
            write_boolean((value as NValue::Boolean).value)
        }
        value is NValue::Nothing -> {
            write_int(5)
        }
    }
    end_frame(frame)
}

fun ByteBuffer.deserialize_nvalue(): NValue {
    let frame = start_frame(false)
    let variant = read_int()
    let value = when variant {
        0 -> NValue::Int @[value: read_int()]
        1 -> NValue::Long @[value: read_long()]
        2 -> NValue::Float @[value: read_float()]
        3 -> NValue::String @[value: read_string()]
        4 -> NValue::Boolean @[value: read_boolean()]
        5 -> NValue::Nothing @[]
        else -> unreachable()
    }
    end_frame(frame)
    ret value
}