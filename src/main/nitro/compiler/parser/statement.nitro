// Statements
// E.g. {}
// E.g. { ret 0 }
// statementBlock
//     : LBRACE NL* statement (NL+ statement)* NL* RBRACE
//     | LBRACE NL* RBRACE
//     ;

// statement
//     : statementChoice ;

// statementChoice
//     : letStatement
//     | ifStatement
//     | forStatement
//     | repeatStatement
//     | whileStatement
//     | loopStatement
//     | whenExpr
//     | deferStatement
//     | expressionStatement
//     | foreignBlockStatement
//     | testDefinition
//     ;

fun Parser.read_statement_block(code: NCode): Parsed<Nothing> {
    skip_token_kind(TokenKind::LBRACE)?
    skip_nl()

    if lexer.current_token_kind == TokenKind::RBRACE {
        skip_token_kind(TokenKind::RBRACE)?
        ret found(nothing)
    }

    loop {
        if lexer.current_token_kind == TokenKind::RBRACE {
            break
        }
        read_statement(code)?

        if lexer.current_token_kind != TokenKind::NL {
            break
        }

        skip_nl()
    }

    skip_token_kind(TokenKind::RBRACE)?

    ret found(nothing)
}

fun Parser.read_statement(code: NCode): Parsed<Nothing> {
    when lexer.current_token_kind {
        TokenKind::LET -> read_let_statement(code)
        TokenKind::IF -> read_if_statement(code)
//        TokenKind::FOR -> read_for_statement(code)
//        TokenKind::REPEAT -> read_repeat_statement(code)
//        TokenKind::WHILE -> read_while_statement(code)
//        TokenKind::LOOP -> read_loop_statement(code)
//        TokenKind::WHEN -> read_when_expr(code)
//        TokenKind::DEFER -> read_defer_statement(code)
//        TokenKind::FOREIGN -> read_foreign_block_statement(code)
//        TokenKind::TEST -> read_test_definition(code)
        else -> read_expression(code)
    }
    ret found(nothing)
}