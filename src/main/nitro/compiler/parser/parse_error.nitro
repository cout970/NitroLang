
enum ParseError {
    ExpectedToken,
    ExpectedIdentifier,
    ExpectedConstName,
    ExpectedPlainString,
    ExpectedConstExpr,
    ExpectedTypeParameter,
    ExpectedInt,
    ExpectedLong,
    ExpectedFloat,
    ExpectedComma,
    ExpectedDefinition,
    DeferNotAllowed,
    WhenMultipleElse,
    WhenUnorderedElse,
    ReachedEnd,
    Generic,
}

option Parsed<#Ast> {
    Found { value: #Ast },
    Error {
        kind: ParseError,
        token: Token,
        expected: Optional<TokenKind>,
        info: Optional<String>,
    }
}

fun found(value: #Ast): Parsed<#Ast> = Parsed::Found @[value]

fun parse_error(kind: ParseError, token: Token): Parsed<#Ast> {
    ret Parsed::Error @[kind, token, expected: None(), info: None()]
}

fun parse_error_expected(kind: ParseError, token: Token, expected_token: TokenKind): Parsed<#Ast> {
    ret Parsed::Error @[kind, token, expected: Some(expected_token), info: None()]
}

fun parse_error_with_info(kind: ParseError, token: Token, message: String): Parsed<#Ast> {
    ret Parsed::Error @[kind, token, expected: None(), info: Some(message)]
}

fun Parsed<#Ast>.is_error(): Boolean = this is Parsed::Error<#Ast>

fun Parsed<#Ast>.is_returnable_error(): Boolean = this is Parsed::Error<#Ast>

fun Parsed<#A>.convert_error(): Parsed<#B> {
    if this is Parsed::Error<#A> {
        let error = this as Parsed::Error<#A>
        ret Parsed::Error<#B> @[
            kind: error.kind,
            token: error.token,
            expected: None(),
            info: None(),
        ]
    }

    crash("Parsed::convert_error called on non-error value")
}

fun Parsed<#Ast>.get_or_crash(): #Ast {
    if this is Parsed::Found<#Ast> {
        ret (this as Parsed::Found<#Ast>).value
    }

    crash("Parsed failed, attempting to use error value")
}

fun <#Ast: ToString> Parsed<#Ast>.to_string(): String {
    if this is Parsed::Found<#Ast> {
        ret (this as Parsed::Found<#Ast>).value.to_string()
    }

    if this is Parsed::Error<#Ast> {
        let error = this as Parsed::Error<#Ast>
        if error.kind == ParseError::ExpectedToken {
            ret "Parse error: Expected ${error.expected!!} but found ${error.token}"
        }
        ret "Parse error: ${error.kind} at token ${error.token}"
    }

    crash("Parsed::to_string called on unknown value")
}