// defer { println("End of code") }
// deferStatement
//     : DEFER expression
//     | DEFER statementBlock
//     ;

fun Parser.read_defer_statement(code: NCode): Parsed<Nothing> {
    skip_token_kind(TokenKind::DEFER)?
    let span = lexer.current_token_span

    if !allow_defer {
        ret parse_error(ParseError::DeferNotAllowed, lexer.current_token)
    }

    let subcode: NCode = code.new_child_code(NCodeContainer::None @[], false)
    subcode.add_comment(span, "defer-start")

    allow_defer = false
    subcode.enter_block(span, true)

    if lexer.current_token.kind == TokenKind::LBRACE {
        read_statement_block(subcode)?
    } else {
        read_expression(subcode)?
    }

    subcode.exit_block(span)
    allow_defer = true

    code.add_defer(span, subcode)

    ret found(nothing)
}
