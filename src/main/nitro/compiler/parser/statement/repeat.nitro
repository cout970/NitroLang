
// E.g. repeat 5 {}
// repeatStatement
//     : REPEAT NL* expression NL* statementBlock ;

fun Parser.read_repeat_statement(code: NCode): Parsed<Nothing> {
    // repeat statements get desugared into a simpler loop
    // repeat <count> { <code> }
    // {
    //   let limit = <count>
    //   let _it = 0
    //   loop: {
    //     if (_it < limit) {
    //       let it = _it
    //       _it = _it + 1
    //       <code>
    //       goto loop;
    //     }
    //   }
    // }

    skip_token_kind(TokenKind::REPEAT)?
    let span = lexer.current_token_span

    code.add_comment(span, "repeat statement")

    code.enter_block(span, true)
    let count = read_expression(code)?

    // let limit = <count>
    let var_limit = code.add_let(span, "limit", Some(NTypeUsage::simple(span, "Int")))
    code.add_store_var(span, "", "limit", count, Some(var_limit.id))

    // let _it = 0
    let var_it = code.add_let(span, "_it", Some(NTypeUsage::simple(span, "Int")))
    let zero = code.add_lit_int(span, 0)
    code.add_store_var(span, "", "_it", zero.id, Some(var_it.id))

    // loop {
    let jumps = code.save_jump_points()
    let break_block = code.enter_block(span, true)
    let continue_block = code.enter_block(span, false)

    let start = code.add_loop_start(span, break_block, continue_block)

    //     if (it < limit) {
    let load_it = code.add_load_var(span, "", "_it", Some(var_it.id))
    let load_limit = code.add_load_var(span, "", "limit", Some(var_limit.id))
    let condition = code.add_fun_call(span, "", "less_than_signed", true, [load_it.id, load_limit.id], [])

    code.add_if_start(span, condition.id)
    code.enter_block(span, false)
    let var_it_pub = code.add_let(span, "it", Some(NTypeUsage::simple(span, "Int")))
    code.add_store_var(span, "", "it", load_it.id, Some(var_it_pub.id))

    let one = code.add_lit_int(span, 1)
    let add = code.add_fun_call(span, "", "plus", true, [load_it.id, one.id], [])
    code.add_store_var(span, "", "_it", add.id, Some(var_it.id))

    //       Code in loop...
    read_statement_block(code)?

    //       goto loop;
    code.add_block_jump(span, true, Some(continue_block))

    //     }
    code.exit_block(span)
    code.add_if_end(span)

    // }
    code.exit_block(span)
    code.exit_block(span)

    code.add_loop_end(span)

    code.link_jump_points(break_block, continue_block)
    code.restore_jump_points(jumps)
    code.exit_block(span)

    ret found(nothing)
}
