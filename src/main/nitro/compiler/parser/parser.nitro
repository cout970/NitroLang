
struct Parser {
    lexer: Lexer
    reporter: Reporter
    program: Program
    id_provider: IdProvider
    test_id_provider: IdProvider
    module_path_stack: List<String>
    current_generics: NGenericParams
    current_tag_this: Optional<NGeneric>
    allow_defer: Boolean
    allow_expression_assignment: Boolean
    allow_generics_collection: Boolean
    current_path: String
    use_paths: List<String>
}

fun Parser::new(lexer: Lexer, reporter: Reporter, program: Program): Parser {
    ret Parser @[
        lexer,
        reporter,
        program,
        id_provider: program.id_provider,
        test_id_provider: program.test_id_provider,
        module_path_stack: [],
        current_generics: NGenericParams::new(NGenericSource::Invalid),
        current_tag_this: None(),
        allow_defer: true,
        allow_expression_assignment: false,
        allow_generics_collection: false,
        current_path: "",
        use_paths: [],
    ]
}

fun Parser.deinit() {
    module_path_stack.deinit()
    lexer.deinit()
}

// Parse a program
fun Parser.read_file() {
    // parseFile : NL* definition* EOF;
    skip_nl()

    while has_remaining_tokens() {
        let res: Parsed<Nothing> = read_definition()
        skip_nl()

        if res is Parsed::Error<Nothing> {
            let span = lexer.span_of(lexer.current_token)
            let error = res as Parsed::Error<Nothing>
            reporter.report_parse_error(res.to_string(), span, error.stack_trace)
            recover_from_error()
            break
        }
    }

    for code in program.codes {
        code.add_deferred_code()
    }
}
