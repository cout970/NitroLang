
struct Parser {
    lexer: Lexer
    program: Program
    allow_defer: Boolean
}

fun Parser::new(lexer: Lexer, program: Program): Parser {
    ret Parser @[
        lexer,
        program,
        allow_defer: true
    ]
}

// Parse a program
fun Parser.read_file() {
    // parseFile : NL* definition* EOF;
    skip_nl()

    while has_remaining_tokens() {
        let res: Parsed<Nothing> = read_definition()
        skip_nl()

        if res is Parsed::Error<Nothing> {
            let span = lexer.span_of(lexer.current_token)

            // DEBUG
            println("Reporting error: ${res.to_string()}")
            lexer.print_debug_info()
            Trace::print_stack_trace()

            program.reporter.report_error(res.to_string(), span)
            recover_from_error()
            break
        }
    }
}

