
// E.g. alias Int32 = Int
// aliasDefinition
//     : ALIAS anyName typeParamsDef? ASSIGN typeUsage;

struct NTypeAlias {
    span: Span
    annotations: List<NAnnotation>
    path: String
    name: String
    type_usage: NTypeUsage
    alias_type: Optional<Type>
    generics: NGenericParams
}

fun Parser.read_type_alias_definition(annotations: List<NAnnotation>): Parsed<Nothing> {
    skip_token_kind(TokenKind::TYPE_ALIAS)?
    let span = lexer.current_token_span
    let path = read_declaration_module_path()?
    let name = read_name()?
    let generics = NGenericParams::new()

    start_generics_collection(generics, NGenericSource::TypeAlias)
    let err = read_type_params_def()
    stop_generics_collection()
    // Throw error after stop_generics_collection()
    err?

    skip_token_kind(TokenKind::ASSIGN)?

    let type_usage = read_type_usage()?

    let def = NTypeAlias @[
        span,
        annotations,
        path,
        name,
        type_usage,
        generics,
        alias_type: None(),
    ]

    program.type_aliases[] = def

    ret found(nothing)
}

fun NTypeAlias.to_string() -> String {
    let full_name = get_full_path(path, name)

    return "typealias $full_name$generics = $type_usage // $span"
}
