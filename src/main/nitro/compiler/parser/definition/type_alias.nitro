
// E.g. alias Int32 = Int
// aliasDefinition
//     : ALIAS anyName typeParamsDef? ASSIGN typeUsage;

struct NTypeAlias {
    span: Span
    annotations: List<NAnnotation>
    path: String
    name: String
    type_usage: NTypeUsage
    type_params: List<NGeneric>
}

fun Parser.read_type_alias_definition(annotations: List<NAnnotation>): Parsed<Nothing> {
    skip_token_kind(TokenKind::TYPE_ALIAS)?
    let span = lexer.current_token_span
    let path = read_declaration_module_path()?
    let name = read_name()?

    let type_params = read_type_params_def()?

    skip_token_kind(TokenKind::ASSIGN)?

    let type_usage = read_type_usage()?

    let def = NTypeAlias @[
        span,
        annotations,
        path,
        name,
        type_usage,
        type_params,
    ]

    program.type_aliases[] = def

    ret found(nothing)
}

fun NTypeAlias.to_string() -> String {
    let tp = if type_params.is_not_empty() {
        let s = ""

        for type_param in type_params {
            if s.is_not_empty() {
                s += ", "
            }
            s += type_param.to_string()
        }

        "<$s>"
    } else {
        ""
    }

    let full_name = get_full_path(path, name)

    return "typealias $full_name$tp = $type_usage // $span"
}
