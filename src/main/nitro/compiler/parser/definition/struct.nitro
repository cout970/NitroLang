
// structDefinition
//      : STRUCT modulePath? anyName typeParamsDef? NL* structBody;
//
// E.g. { a: Int, b: Int }
// structBody
//      : LBRACE NL* (structField (commaOrNl structField)* COMMA?)? NL* RBRACE ;
//
// E.g. value: Int,
// structField
//      : INTERNAL? anyName COLON typeUsage;

struct NStruct {
    span: Span
    annotations: List<NAnnotation>
    path: String
    name: String
    fields: List<NStructField>
    type_params: List<NGeneric>
}

struct NStructField {
    name: String
    type_usage: NTypeUsage
}

fun Parser.read_struct_definition(annotations: List<NAnnotation>): Parsed<Nothing> {
    skip_token_kind(TokenKind::STRUCT)?
    let span = lexer.current_token_span
    let path = read_declaration_module_path()?
    let name = read_name()?

    let def = NStruct @[
        span,
        annotations,
        path,
        name,
        type_params: [],
        fields: [],
    ]
    program.structs[] = def
    program.declare_name(get_full_path(def.path, def.name), def.span)

    def.type_params = read_type_params_def()?

    skip_nl()
    skip_token_kind(TokenKind::LBRACE)?
    skip_nl()
    read_until_delimited(TokenKind::RBRACE) @{
        def.fields[] = read_struct_field()?
        ret found(nothing)
    }?

    ret found(nothing)
}

fun Parser.read_struct_field(): Parsed<NStructField> {
    ignore_token_kind(TokenKind::INTERNAL)
    let name = read_name()?

    skip_token_kind(TokenKind::COLON)?

    let type_usage = read_type_usage()?

    ret found(NStructField @[name, type_usage])
}

fun NStruct.to_string(): String {
    let prefix = ""

    for a in annotations {
        prefix = "$prefix$a\n"
    }

    let fields_str = if fields.len() > 0 { "{\n" } else { "{" }

    for field in fields {
        fields_str += "  ${field.name}: ${field.type_usage}\n"
    }
    fields_str = fields_str + "}"
    let full_name = get_full_path(path, name)

    ret "${prefix}struct $full_name $fields_str  // $span"
}