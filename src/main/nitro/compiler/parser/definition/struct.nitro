
// structDefinition
//      : STRUCT modulePath? anyName typeParamsDef? NL* structBody;
//
// E.g. { a: Int, b: Int }
// structBody
//      : LBRACE NL* (structField (commaOrNl structField)* COMMA?)? NL* RBRACE ;
//
// E.g. value: Int,
// structField
//      : INTERNAL? anyName COLON typeUsage;

fun Parser.read_struct_definition(annotations: List<NAnnotation>): Parsed<Nothing> {
    skip_token_kind(TokenKind::STRUCT)?
    let span = lexer.current_token_span
    let path = read_declaration_module_path()?
    let name = read_name()?

    let def = NStruct @[
        id: id_provider.next(),
        span,
        annotations,
        path,
        name,
        full_name: Path::join(path, name),
        generics: NGenericParams::new(NGenericSource::Struct),
        fields: [],
        parent: None(),
        is_enum: false,
    ]
    program.structs[] = def
    declare_name(Path::join(def.path, def.name), def.span)

    start_generics_collection(def.generics, NGenericSource::Struct)
    defer { stop_generics_collection() }

    read_type_params_def()?

    skip_nl()
    skip_token_kind(TokenKind::LBRACE)?
    skip_nl()
    read_until_delimited(TokenKind::RBRACE) @{
        def.fields[] = read_struct_field(def)?
        ret found(nothing)
    }?

    ret found(nothing)
}

fun Parser.read_struct_field(def: NStruct): Parsed<NStructField> {
    let span = lexer.current_token_span
    let name = read_name()?

    skip_token_kind(TokenKind::COLON)?

    let type_usage = read_type_usage()?

    ret found(NStructField @[
        span,
        name,
        parent_struct: def,
        offset: def.fields.len,
        type_usage,
        field_type: None(),
    ])
}
