
// E.g. fun Int.sum(other: Int): Int {}
// functionDefinition
//     : functionHeader NL* functionBody
//     | functionHeader
//     ;

// functionHeader
//     : FUN NL* functionReceiver? modulePath? anyName NL* typeParamsDef? NL*
//         LPAREN NL* (functionParameter (commaOrNl functionParameter)* COMMA?)? NL* RPAREN NL* functionReturnType?
//     | FUN NL* typeParamsDef? NL* functionReceiver? modulePath? anyName NL*
//         LPAREN NL* (functionParameter (commaOrNl functionParameter)* COMMA?)? NL* RPAREN NL* functionReturnType?;


// E.g. Int.
// functionReceiver
//     : varModifier typeUsage DOT ;

// E.g. count: Int,
// functionParameter
//     : varModifier anyName NL* COLON NL* typeUsage
//     | varModifier UNDERSCORE NL* COLON NL* typeUsage;

// E.g. {}
// E.g. = 3.14
// functionBody
//     : statementBlock
//     | ASSIGN NL* expression
//     ;

// E.g. : Int
// functionReturnType
//     : COLON typeUsage
//     | ARROW typeUsage
//     ;

fun Parser.read_function_definition(annotations: List<NAnnotation>): Parsed<Nothing> {
    let generics = NGenericParams::new(NGenericSource::Function)
    let header = read_function_header(generics)?

    let def = create_function(header, annotations)
    register_nitro_function(def)

    skip_nl()

    def.register_params()

    // Read every statement/expression in the function body
    read_code_block(def.code)?

    ret found(nothing)
}

fun Parser.read_code_block(code: NCode): Parsed<Nothing> {
    when lexer.current_token_kind {
        TokenKind::LBRACE -> {
            read_statement_block(code)?
        }
        TokenKind::ASSIGN -> {
            let span = lexer.current_token_span
            skip_token_kind(TokenKind::ASSIGN)?
            let value = read_expression(code)?

            if code.find_inst(value).kind is NInstKind::Return {
                code.last_expression = Some(value)
            } else {
                let ret_inst = code.add_return(span, value)
                code.last_expression = Some(ret_inst.id)
            }
        }
    }

    // Sanity checks
    check(code.current_block.to_int() == 0, "Block stack is not empty")

    // Execute deferred actions
    if !code.jumped_out_of_block {
        code.active_block.add_deferred_actions(code, true)
    }

    // Check there are no break/continue jumps unlinked
    code.check_jump_points()

    ret found(nothing)
}

fun Parser.read_function_header(generics: NGenericParams): Parsed<NFunctionHeader> {
    skip_token_kind(TokenKind::FUN)?
    skip_nl()
    let parameters: List<NFunctionParameter> = []
    let has_receiver = false

    start_generics_collection(generics, NGenericSource::Function)
    defer { stop_generics_collection() }

    // Type parameters
    if lexer.current_token_kind == TokenKind::LTH {
        read_type_params_def()?
        skip_nl()
    }

    // Optional receiver
    if lexer.find_token_kind_before(TokenKind::DOT, TokenKind::LPAREN) {
        let receiver_span = lexer.current_token_span
        let receiver_tu = read_type_usage()?

        parameters[] = NFunctionParameter @[
            span: receiver_span,
            name: "this",
            type_usage: receiver_tu,
            param_type: None(),
        ]
        has_receiver = true

        skip_token_kind(TokenKind::DOT)?
    }

    // Full name
    let span = lexer.current_token_span
    let path = read_declaration_module_path()?
    let name = read_name()?

    // Type parameters
    skip_nl()
    if lexer.current_token_kind == TokenKind::LTH {
        read_type_params_def()?
        skip_nl()
    }

    // Function args
    skip_token_kind(TokenKind::LPAREN)?
    skip_nl()
    read_until_delimited(TokenKind::RPAREN) @{
        parameters[] = read_function_parameter()?
        ret found(nothing)
    }?

    // Return Type
    skip_nl()
    let return_type_usage = when lexer.current_token_kind {
        TokenKind::COLON -> {
            skip_token_kind(TokenKind::COLON)?
            read_type_usage()?
        }
        TokenKind::ARROW -> {
            skip_token_kind(TokenKind::ARROW)?
            read_type_usage()?
        }
        else -> {
            NTypeUsage::simple(span, "Nothing")
        }
    }

    let header = NFunctionHeader::new_full(span, path, name, return_type_usage, parameters, generics)
    header.has_receiver = true

    ret found(header)
}

fun Parser.read_function_parameter(): Parsed<NFunctionParameter> {
    let span = lexer.current_token_span
    read_var_modifier()?

    let name = if lexer.current_token_kind == TokenKind::UNDERSCORE {
        skip_token_kind(TokenKind::UNDERSCORE)?
        "_"
    } else {
        read_name()?
    }
    skip_nl()

    skip_token_kind(TokenKind::COLON)?
    let type_usage = read_type_usage()?

    let param = NFunctionParameter @[span, name, type_usage, param_type: None()]

    ret found(param)
}

fun Parser.read_var_modifier(): Parsed<Nothing> {
    if lexer.current_token_kind == TokenKind::MUT {
        skip_token_kind(TokenKind::MUT)?
    }
    ret found(nothing)
}
