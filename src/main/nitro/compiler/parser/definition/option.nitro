
// // E.g. type Optional<T> {}
// optionDefinition
//     : OPTION modulePath? anyName typeParamsDef? NL* LBRACE NL*
//     (optionDefinitionItem (commaOrNl optionDefinitionItem)* COMMA?)? NL*
//     RBRACE ;
//
// // E.g. Some { value: T },
// optionDefinitionItem
//     : anyName structBody?;

fun Parser.read_option_definition(annotations: List<NAnnotation>): Parsed<Nothing> {
    skip_token_kind(TokenKind::OPTION)?
    let span = lexer.current_token_span
    let path = read_declaration_module_path()?
    let name = read_name()?

    let def = NOption @[
        id: id_provider.next(),
        span,
        annotations,
        path,
        name,
        generics: NGenericParams::new(),
        items: [],
        full_name_cache: None(),
    ]
    program.options[] = def
    declare_name(Path::join(def.path, def.name), def.span)

    start_generics_collection(def.generics, NGenericSource::Option)
    defer { stop_generics_collection() }

    read_type_params_def()?
    skip_nl()

    skip_token_kind(TokenKind::LBRACE)?
    skip_nl()

    read_until_delimited(TokenKind::RBRACE) @{
        def.items[] = read_option_item(def)?
        ret found(nothing)
    }?

    ret found(nothing)
}

fun Parser.read_option_item(parent: NOption): Parsed<NOptionItem> {
    let span = lexer.current_token_span
    let name = read_name()?

    let def = NStruct @[
        id: id_provider.next(),
        span,
        annotations: [],
        path: Path::join(parent.path, parent.name),
        name,
        generics: parent.generics,
        fields: [],
        parent: Some(parent),
        is_enum: false,
        full_name_cache: None(),
    ]
    program.structs[] = def
    declare_name(Path::join(def.path, def.name), def.span)

    def.fields[] = NStructField @[
       span,
       name: VARIANT_FIELD_NAME,
       parent_struct: def,
       offset: 0,
       type_usage: NTypeUsage::simple(span, "Int"),
       field_type: None(),
   ]

    if lexer.current_token_kind == TokenKind::LBRACE {
        skip_token_kind(TokenKind::LBRACE)?
        skip_nl()

        read_until_delimited(TokenKind::RBRACE) @{
            def.fields[] = read_struct_field(def)?
            ret found(nothing)
        }?
    }

    ret found(NOptionItem @[
        span,
        index: parent.items.len,
        parent,
        def,
    ])
}
