
// // E.g. type Optional<T> {}
// optionDefinition
//     : OPTION modulePath? anyName typeParamsDef? NL* LBRACE NL*
//       optionFields NL*
//       (optionDefinitionItem (commaOrNl optionDefinitionItem)* COMMA?)? NL*
//       RBRACE
//     ;
//
// // E.g. Some { value: T },
// optionDefinitionItem
//     : anyName structBody?;
//
// optionFields
//     : optionField (commaOrNl optionField)* COMMA? ;
//
// E.g. let name: String
// optionField
//     : LET anyName COLON typeUsage ;
//

fun Parser.read_option_definition(annotations: NAnnotationContainer): Parsed<Nothing> {
    skip_token_kind(TokenKind::OPTION)?
    let span = lexer.current_token_span
    let path = read_declaration_module_path()?
    let name = read_name()?

    let def = NOption @[
        id: id_provider.next(),
        span,
        annotations,
        path,
        name,
        full_name: Path::join(path, name),
        generics: NGenericParams::new(NGenericSource::Option),
        common_fields: [],
        items: [],
    ]
    program.options[] = def
    declare_name(Path::join(def.path, def.name), def.span)

    start_generics_collection(def.generics, NGenericSource::Option)
    defer { stop_generics_collection() }

    read_type_params_def()?
    skip_nl()

    skip_token_kind(TokenKind::LBRACE)?
    skip_nl()

    // Implicit variant field
    def.common_fields[] = NOptionField @[
        span,
        name: VARIANT_FIELD_NAME,
        parent_option: def,
        offset: def.common_fields.len,
        type_usage: NTypeUsage::simple(span, "Int"),
        field_type: None(),
    ]

    read_option_fields(def)?
    read_until_delimited(TokenKind::RBRACE) @{
        def.items[] = read_option_item(def)?
        ret found(nothing)
    }?

    ret found(nothing)
}

fun Parser.read_option_item(parent: NOption): Parsed<NOptionItem> {
    let span = lexer.current_token_span
    let name = read_name()?
    let path = Path::join(parent.path, parent.name)

    let def = NStruct @[
        id: id_provider.next(),
        span,
        annotations: NAnnotationContainer::new(),
        path,
        name,
        full_name: Path::join(path, name),
        generics: parent.generics,
        fields: [],
        parent: Some(parent),
        is_enum: false,
    ]
    program.structs[] = def
    declare_name(Path::join(def.path, def.name), def.span)

    for field in parent.common_fields {
        def.fields[] = NStructField @[
            span: field.span,
            name: field.name,
            parent_struct: def,
            offset: field.offset,
            type_usage: field.type_usage,
            field_type: field.field_type,
        ]
    }

    def.add_rc_fields()

    if lexer.current_token_kind == TokenKind::LBRACE {
        skip_token_kind(TokenKind::LBRACE)?
        skip_nl()

        read_until_delimited(TokenKind::RBRACE) @{
            def.fields[] = read_struct_field(def)?
            ret found(nothing)
        }?
    }

    ret found(NOptionItem @[
        span,
        index: parent.items.len,
        parent,
        def,
    ])
}

fun Parser.read_option_fields(def: NOption): Parsed<Nothing> {
    while lexer.current_token_kind == TokenKind::LET {
        let span = lexer.current_token_span
        skip_token_kind(TokenKind::LET)?
        let field_name = read_name()?
        skip_token_kind(TokenKind::COLON)?
        let type_usage = read_type_usage()?

        def.common_fields[] = NOptionField @[
            span,
            name: field_name,
            parent_option: def,
            offset: def.common_fields.len,
            type_usage,
            field_type: None(),
        ]

        skip_nl()
    }

    ret found(nothing)
}
