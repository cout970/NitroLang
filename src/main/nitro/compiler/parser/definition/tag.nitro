
// E.g. tag ToString { fun to_string(): String }
// tagDefinition
//     : TAG anyName LBRACE NL* (tagDefinitionFunction (NL+ tagDefinitionFunction)*)? NL* RBRACE ;
//
// tagDefinitionFunction
//     : annotation* functionHeader;


fun Parser.read_tag_definition(annotations: List<NAnnotation>): Parsed<Nothing> {
    skip_token_kind(TokenKind::TAG)?
    let span = lexer.current_token_span
    let path = read_declaration_module_path()?
    let name = read_name()?

    let def = NTag @[
        id: id_provider.next(),
        span,
        annotations
        path,
        name,
        full_path: Path::join(path, name),
        functions: [],
        impl_patterns: [],
    ]
    program.tags[] = def
    declare_name(Path::join(def.path, def.name), def.span)

    skip_token_kind(TokenKind::LBRACE)?
    skip_nl()

    read_until_delimited_by(TokenKind::NL, TokenKind::RBRACE) @{
        def.functions[] = read_tag_function(def)?

        ret found(nothing)
    }?

    ret found(nothing)
}

fun Parser.read_tag_function(def: NTag): Parsed<NTagFunction> {
    let generics = NGenericParams::new()
    let bound = NGenericBounds @[name: def.name, tag_instance: Some(def)]

    let this_generic = NGeneric @[
       id: id_provider.next(),
       span: lexer.current_token_span,
       name: "This",
       source: NGenericSource::Tag,
       bounds: [bound],
    ]
    generics.definitions[] = this_generic

    current_tag_this = Some(this_generic)
    defer { current_tag_this = None() }

    let header = read_function_header(generics)?
    let tag_func = NTagFunction @[
        id: id_provider.next(),
        header,
        parent_tag: def,
        possible_implementors: #[],
        final_implementors: #[],
    ]

    ret found(tag_func)
}
