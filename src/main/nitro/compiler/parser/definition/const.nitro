
// E.g. let pi: Float = 3.14
// constDefinition
//     : LET modulePath? anyName COLON typeUsage ASSIGN NL* expression ;

struct NConst {
    id: Id
    span: Span
    path: String
    name: String
    type_usage: NTypeUsage
    const_type: Optional<Type>
    code: NCode
    full_name_cache: Optional<String>
}

fun Parser.read_const_definition(annotations: List<NAnnotation>): Parsed<Nothing> {
    skip_token_kind(TokenKind::LET)?
    let span = lexer.current_token_span
    let path = read_declaration_module_path()?
    let name = read_name()?

    let type_usage = if lexer.current_token_kind == TokenKind::ASSIGN {
        report_error("Constants must have a type defined", span)
        NTypeUsage::simple(span, "Nothing")
    } else {
        skip_token_kind(TokenKind::COLON)?
        read_type_usage()?
    }

    let def = NConst @[
        id: id_provider.next(),
        span,
        path,
        name,
        type_usage,
        const_type: None(),
        code: NCode::new(span, get_full_path(path, name)),
        full_name_cache: None(),
    ]
    program.consts[] = def
    declare_name(get_full_path(def.path, def.name), def.span)

    skip_token_kind(TokenKind::ASSIGN)?
    skip_nl()

    read_expression(def.code)?

    ret found(nothing)
}

fun NConst.get_full_name(): String {
    if full_name_cache.is_some() {
        ret full_name_cache!!
    }

    let full_name = get_full_path(path, name)
    full_name_cache = Some(full_name)
    ret full_name
}


fun NConst.get_ordering(other: NConst): Ordering = this.id <=> other.id

fun NConst.to_string(): String {
    let full_name = get_full_path(path, name)

    return "const $full_name: $type_usage = $code // $span"
}