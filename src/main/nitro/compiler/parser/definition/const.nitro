
// E.g. let pi: Float = 3.14
// constDefinition
//     : LET modulePath? anyName COLON typeUsage ASSIGN NL* expression ;

fun Parser.read_const_definition(annotations: List<NAnnotation>): Parsed<Nothing> {
    skip_token_kind(TokenKind::LET)?
    let span = lexer.current_token_span
    let path = read_declaration_module_path()?
    let name = read_name()?

    let type_usage = if lexer.current_token_kind == TokenKind::ASSIGN {
        report_error("Constants must have a type defined", span)
        NTypeUsage::simple(span, "Nothing")
    } else {
        skip_token_kind(TokenKind::COLON)?
        read_type_usage()?
    }

    let id = id_provider.next()
    let full_name = Path::join(path, name)
    let code = NCode::new(program, NCodeContainer::None @[])
    program.codes[] = code

    let def = NConst @[
        program,
        id,
        span,
        annotations,
        path,
        name,
        generics: NGenericParams::new(NGenericSource::Const),
        type_usage,
        const_type: None(),
        code_id: code.id,
        full_name,
    ]

    def.code.container = NCodeContainer::Const @[def]
    program.consts[] = def
    declare_name(Path::join(def.path, def.name), def.span)

    skip_token_kind(TokenKind::ASSIGN)?
    skip_nl()

    let expr = read_expression(def.code)?
    def.code.add_return(span, expr)

    ret found(nothing)
}
