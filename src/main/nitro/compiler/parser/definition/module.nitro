
// E.g. mod core {}
//    moduleDefinition
//        : MODULE modulePath? anyName NL* LBRACE NL* definition* RBRACE ;

fun Parser.read_module_definition(annotations: List<NAnnotation>): Parsed<Nothing> {
    skip_token_kind(TokenKind::MODULE)?
    let span = lexer.current_token_span
    let path = read_module_path()?
    let name = read_name()?
    skip_nl()

    module_path_stack[] = Path::join(path, name)
    defer { module_path_stack.remove_last()!! }

    skip_token_kind(TokenKind::LBRACE)?
    skip_nl()

    while lexer.current_token_kind != TokenKind::RBRACE {
        if !has_remaining_tokens() {
            ret parse_error(ParseError::ReachedEnd, lexer.current_token)
        }

        read_definition()?
        skip_nl()
    }

    skip_token_kind(TokenKind::RBRACE)?
    skip_nl()

    ret found(nothing)
}
