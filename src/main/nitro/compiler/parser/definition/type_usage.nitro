
// typeUsage
//       : THIS_TYPE
//       | LTH NL* typeUsage NL* GTH
//       | baseTypeUsage
//       | baseTypeUsage DOT functionTypeUsage
//       | functionTypeUsage
//       | typeParameter
//       ;
//
// // Int, List<Int>
// baseTypeUsage
//       : modulePath? anyName typeParamArg? ;
//
// // (Int) -> Int
// functionTypeUsage
//       : LPAREN RPAREN ARROW typeUsage
//       | LPAREN functionTypeUsageParam (commaOrNl functionTypeUsageParam)* RPAREN ARROW typeUsage
//       ;
//
// // a, a: Int
// functionTypeUsageParam
//       : typeUsage
//       | anyName COLON typeUsage
//       ;
//
// typeParamArg
//       : LTH NL* typeUsage (commaOrNl typeUsage)* COMMA? NL* GTH ;

fun Parser.read_type_usage(): Parsed<NTypeUsage> {
    let span = lexer.current_token_span

    // This
    if lexer.current_token_kind == TokenKind::THIS_TYPE {
        let span = lexer.current_token_span
        lexer.next_token()

        if current_tag_this.is_none() {
            report_error("'This' type can only be used in a Tag definition", span)
            ret found(NTypeUsage::unresolved(span))
        }
        let index = current_tag_this!!.index

        ret found(NTypeUsage::generic(span, "This", Some(index)))
    }

    // #A
    if lexer.current_token_kind == TokenKind::HASH {
        lexer.next_token()
        let name: String = read_name()?
        let def: Optional<NGeneric> = current_generics[name]

        if def.is_none() && allow_generics_collection {
            let instance = NGeneric @[
               id: id_provider.next(),
               index: current_generics.definitions.len,
               span,
               name,
               source: current_generics.source,
               bounds: []
            ]
            current_generics[] = instance
            def = Some(instance)
        }

        let index = if def.is_some() { Some(def!!.index) } else { None() }
        ret found(NTypeUsage::generic(span, name, index))
    }

    // (Int, Boolean)->Float
    if lexer.current_token_kind == TokenKind::LPAREN {
        ret read_function_type_usage(span, None())
    }

    // <T>
    if lexer.current_token_kind == TokenKind::LTH {
        lexer.next_token()

        skip_nl()
        let type_usage = read_type_usage()?
        skip_nl()

        skip_token_kind(TokenKind::GTH)?

        ret found(type_usage)
    }

    // core::Int, List<Int>
    let path: String = read_module_path()?
    let name: String = read_name()?
    let params: List<NTypeUsage> = []

    if lexer.current_token_kind == TokenKind::LTH {
        params = read_type_param_args()?
    }

    let ty = NTypeUsage @[
        span,
        kind: TypeUsageKind::TYPE_SIMPLE,
        name,
        path,
        params,
        type_token: None(),
        generic_def_index: None(),
    ]

    // If `.(` is found after the name, it is a function type like `Int.() -> Nothing`
    if lexer.current_token_kind != TokenKind::DOT || lexer.next_token_kind != TokenKind::LPAREN {
        ret found(ty)
    }

    // Skip dot
    lexer.next_token()

    // Int.() -> Nothing
    ret read_function_type_usage(span, Some(ty))
}

// <A, B, C>
fun Parser.read_type_param_args(): Parsed<List<NTypeUsage>> {
    let list: List<NTypeUsage> = []
    skip_token_kind(TokenKind::LTH)?

    skip_nl()
    read_until_delimited(TokenKind::GTH) @{
        list[] = read_type_usage()?
        ret found(nothing)
    }?

    ret found(list)
}

// (Int, Boolean)->Float
fun Parser.read_function_type_usage(span: Span, arg1: Optional<NTypeUsage>): Parsed<NTypeUsage> {
    // // (Int) -> Int
    // functionTypeUsage
    //       : LPAREN RPAREN ARROW typeUsage
    //       | LPAREN functionTypeUsageParam (commaOrNl functionTypeUsageParam)* RPAREN ARROW typeUsage
    //       ;
    let params = []

    if arg1.is_some() {
        params[] = arg1!!
    }

    skip_token_kind(TokenKind::LPAREN)?
    skip_nl()
    read_until_delimited(TokenKind::RPAREN) @{
        params[] = read_function_type_usage_param()?
        ret found(nothing)
    }?

    skip_token_kind(TokenKind::ARROW)?

    params[] = read_type_usage()?

    ret found(NTypeUsage @[
        span,
        kind: TypeUsageKind::TYPE_SIMPLE,
        name: "Function",
        path: "",
        params,
        type_token: None(),
        generic_def_index: None(),
    ])
}

fun Parser.read_function_type_usage_param(): Parsed<NTypeUsage> {
    // // a, a: Int
    // functionTypeUsageParam
    //       : typeUsage
    //       | anyName COLON typeUsage
    //       ;

    // Skip name, is only for documentation
    if lexer.next_token_kind == TokenKind::COLON {
        let name: String = read_name()?
        skip_token_kind(TokenKind::COLON)?
    }

    ret read_type_usage()
}
