
option InstResultAction {
    // The result of the instruction is not used
    Drop,
    // Keep the result on the stack
    Keep,
    // Add a constant to the stack
    Const {
        value: NValue
    },
    // Save in a var for multiple uses or a use later
    Save {
        variable: WVar
    }
}

fun InstResultAction.to_string(): String {
    ret when {
        this is InstResultAction::Drop -> "Drop"
        this is InstResultAction::Keep -> "Keep"
        this is InstResultAction::Const -> "Const"
        this is InstResultAction::Save -> "Save"
        else -> unreachable()
    }
}

// Compile the code for a function
fun WasmEmitter.compile_code(func: WFunction, backend: WasmBackend) {
    let code = func.code
    let map: Map<NInstId, InstResultAction> = #[]
    func.check_stack_allocation(backend, map)

    for inst in code.inst_list {
        if debug_print {
            debug_suffix = ";; #${inst.id} $inst"
        }

        // From visit_instruction()
        let opt = func.compile_operation[inst.id]
        if opt.is_some() {
            opt!!.call(this, func, backend)
            continue
        }

        if inst.kind is NInstKind::Let {
            let nvar_id = (inst.kind as NInstKind::Let).variable
            let nvar = code.find_var(nvar_id)
            let opt = func.let_declarations[nvar_id]

            if opt.is_none() {
                continue
            }

            let wvar = opt!!

            if nvar.is_upvalue {
                let call = (func.function_calls[inst.id]!! as WFuncCall::WFunction).value
                let final_type = func.let_final_types[nvar.id]!!
                let size = backend.get_size_of(final_type)

                // Alloc the upvalue
                add_i32_const(size)
                add_call(call.to_int())
                add_local_set(wvar.index.to_int())

                if wvar.copy_from.is_some() {
                    // Copy param value from the local to the upvalue
                    add_local_get(wvar.index.to_int())
                    add_local_get(wvar.copy_from!!.index.to_int())
                    add_store_by_type(final_type, backend)
                }
            }
            if debug_print {
                debug_print_local(wvar)
            }
            continue
        }

        if inst.kind is NInstKind::LetUpvalue {
            let nvar_id = (inst.kind as NInstKind::LetUpvalue).variable
            let nvar = code.find_var(nvar_id)
            let opt = func.let_declarations[nvar_id]

            if opt.is_none() {
                continue
            }

            let wvar = opt!!
            let final_type = func.let_final_types[nvar.id]!!
            let size = backend.get_size_of(final_type)

            if size == 0 {
                continue
            }

            let upvalue_index = code.upvalues.index_of(nvar_id)!!

            add_local_get(0 /* $lambda_instance */)
            add_i32_load((1 + upvalue_index) * 4)
            add_local_set(wvar.index.to_int())

            if debug_print {
                debug_print_local(wvar)
            }
            continue
        }

        if inst.kind is NInstKind::IfStart {
            let kind = inst.kind as NInstKind::IfStart
            push(kind.condition, map)
            add_if(0x40)
            continue
        }
        if inst.kind is NInstKind::IfElse {
            add_else()
            continue
        }
        if inst.kind is NInstKind::IfEnd {
            add_end()
            continue
        }
        if inst.kind is NInstKind::IfChoose {
            let kind = inst.kind as NInstKind::IfChoose

            // the branches can be 'return', 'break' or 'continue', on those canses 'select' will fail
            let missing_if_true = func.inst_final_types[kind.if_true]!!.is_never()
            let missing_if_false = func.inst_final_types[kind.if_false]!!.is_never()

            if missing_if_true && missing_if_false {
                // Both branches are dropped, no need to push the value
                continue
            }

            if missing_if_true {
                push(kind.if_false, map)
                pop(inst.id, map)
                continue
            }

            if missing_if_false {
                push(kind.if_true, map)
                pop(inst.id, map)
                continue
            }

            push(kind.if_true, map)
            push(kind.if_false, map)
            push(kind.condition, map)
            add_select()
            pop(inst.id, map)
            continue
        }
        if inst.kind is NInstKind::LoopStart {
            add_block(0x40)
            add_loop(0x40)
            continue
        }
        if inst.kind is NInstKind::BlockJump {
            let kind = inst.kind as NInstKind::BlockJump
            check(kind.block.is_some()) @{ "BlockJump without a block! #${inst.id} $inst\n$code" }

            let jump_to_block = code.find_block(kind.block!!)
            let curr_block = code.find_block(inst.block)

            add_br(curr_block.depth - jump_to_block.depth)
            continue
        }
        if inst.kind is NInstKind::LoopEnd {
            add_end()
            add_end()
            continue
        }
        if inst.kind is NInstKind::WhenStart {
            add_block(0x40)
            continue
        }
        if inst.kind is NInstKind::WhenEnd {
            add_end()
            continue
        }

        if inst.kind is NInstKind::FunCall {
            compile_inst_fun_call(inst, func, backend, map, code)
            continue
        }

        if inst.kind is NInstKind::Literal {
            // Already done by push() when needed
            continue
        }

        if inst.kind is NInstKind::Return {
            let kind = inst.kind as NInstKind::Return
            push(kind.value, map)
            add_return()
            continue
        }

        if inst.kind is NInstKind::IsType {
            compile_inst_is_type(inst, func, backend, map, code)
            continue
        }
        if inst.kind is NInstKind::AsType {
            compile_inst_as_type(inst, func, backend, map, code)
            continue
        }
        if inst.kind is NInstKind::LoadVar {
            compile_inst_load_var(inst, func, backend, map, code)
            continue
        }

        if inst.kind is NInstKind::StoreVar {
            compile_inst_store_var(inst, func, backend, map, code)
            continue
        }

        if inst.kind is NInstKind::LoadField {
            compile_inst_load_field(inst, func, backend, map, code)
            continue
        }

        if inst.kind is NInstKind::StoreField {
            compile_inst_store_field(inst, func, backend, map, code)
            continue
        }

        if inst.kind is NInstKind::InitField {
            compile_inst_init_field(inst, func, backend, map, code)
            continue
        }

        if inst.kind is NInstKind::SizeOf {
            let kind = func.inst_map[inst.id]!!.kind as WInstKind::SizeOf
            add_i32_const(kind.size)
            pop(inst.id, map)
            continue
        }

        if inst.kind is NInstKind::Alloc {
            compile_inst_alloc(inst, func, backend, map, code)
            continue
        }

        if inst.kind is NInstKind::Lambda {
            compile_inst_lambda(inst, func, backend, map, code)
            continue
        }

        if inst.kind is NInstKind::Link {
            let kind = inst.kind as NInstKind::Link
            push(kind.linked_id, map)
            pop(inst.id, map)
            continue
        }

        if inst.kind is NInstKind::Comment || inst.kind is NInstKind::Noop {
            continue
        }

        if inst.kind is NInstKind::IncludeAs {
            let kind = inst.kind as NInstKind::IncludeAs

            if kind.raw {
                let bytes_list = FilePath::new(kind.path).read_bytes()!!
                let ptr = backend.push_bytes(bytes_list)
                add_i32_const(ptr)
            } else {
                let text = FilePath::new(kind.path).read_text()!!
                let ptr = backend.push_string(text)
                add_i32_const(ptr)
            }

            pop(inst.id, map)
            continue
        }

        crash("Found unknown instruction: $inst")
    }

    // Wasm requires a explicit return, implicit return or unreachable
    // In some case, the function ends in a if-else block with returns in each branch, so the end is unreachable
    // but wasm requires a explicit return or unreachable
    if !func.header.results.is_empty() {
        if !ends_in_return() {
            add_unreachable()
        }
    }

//    if debug_print && func.source is WFunctionSource::Function {
//        let instance = (func.source as WFunctionSource::Function).instance
//        let rtype = func.ctx.convert_type(instance.header.return_type!!)
//        let ptypes = []
//
//        for param in instance.header.parameters {
//            ptypes[] = func.ctx.convert_type(param.param_type!!)
//        }
//        let ptypes_str = ptypes.join(", ")
//        let header = "${instance.full_name}($ptypes_str) -> $rtype"
//        println("------------------------------------------------------------------------------")
//        println("Compiled function ${func.index}: ${header}")
//        println(debug_buffer)
//        println("------------------------------------------------------------------------------")
//    }
//
//    if debug_print && func.source is WFunctionSource::Lambda {
//        let instance = (func.source as WFunctionSource::Lambda).instance
//        let rtype = func.ctx.convert_type(instance.return_type_token!!.find_type())
//        let ptypes = []
//
//        for param in instance.parameters {
//            ptypes[] = func.ctx.convert_type(param.param_type!!)
//        }
//        let ptypes_str = ptypes.join(", ")
//        let header = "lambda_${instance.id}($ptypes_str) -> $rtype"
//        println("------------------------------------------------------------------------------")
//        println("Compiled lambda ${func.index}: ${header}")
//        println(debug_buffer)
//        println("------------------------------------------------------------------------------")
//    }
}

fun WasmEmitter.compile_inst_lambda(inst: NInst, func: WFunction, backend: WasmBackend, map: Map<NInstId, InstResultAction>, code: NCode) {
    let lambda_id = (inst.kind as NInstKind::Lambda).lambda_id
    let instance = code.program.find_lambda(lambda_id)

    // Function type ie. (i32, i32) -> i32
    let final_type = func.inst_final_types[inst.id]!!

    // Lambda1(i32, i32) -> i32
    let real_final_type = backend.final_types.create_final_type(
        FinalTypeKind::Lambda @[instance],
        final_type.type_params
    )

    let size = backend.get_size_of(real_final_type)
    let call = func.function_calls[inst.id]!! as WFuncCall::WFunction

    add_i32_const(size)
    add_call(call.value.to_int())

    let wvar = func.add_local("tmp_${inst.id}", WType::I32)
    let lambda_index = func.lambda_instances[inst.id]!!

    // Copy lambda index to slot 1
    add_local_tee(wvar.index.to_int())
    add_i32_const(lambda_index.to_int())
    add_i32_store(0) // ptr: i32, value: i32 -> void

    // Copy upvalues to the rest of the slots
    let i = 0
    for upvalue_id in instance.code.upvalues {
        if upvalue_id !in func.let_declarations {
            continue
        }
        let upvalue_wvar = func.let_declarations[upvalue_id]!!

        add_local_get(wvar.index.to_int())
        add_i32_const(4 + i * 4)
        add_i32_add()
        add_local_get(upvalue_wvar.index.to_int())
        add_i32_store(0) // ptr: i32, value: i32 -> void
        i += 1
    }

    add_local_get(wvar.index.to_int())
    pop(inst.id, map)
}

fun WasmEmitter.compile_inst_alloc(inst: NInst, func: WFunction, backend: WasmBackend, map: Map<NInstId, InstResultAction>, code: NCode) {
    let kind = inst.kind as NInstKind::Alloc

    let final_type = func.inst_final_types[inst.id]!!
    let size = backend.get_size_of(final_type)
    let call = func.function_calls[inst.id]!! as WFuncCall::WFunction

    add_i32_const(size)
    add_call(call.value.to_int())
    pop(inst.id, map)
}

fun WasmEmitter.compile_inst_store_field(inst: NInst, func: WFunction, backend: WasmBackend, map: Map<NInstId, InstResultAction>, code: NCode) {
    let kind = inst.kind as NInstKind::StoreField

    check(kind.field.is_some()) @{ "StoreField without field! #${inst.id} $inst\n$code" }
    check(kind.field_type_token.is_some()) @{ "StoreField without field_type_token! #${inst.id} $inst\n$code" }

    let field = kind.field!!
    let field_type = func.ctx.convert_type(kind.field_type_token!!.find_type())

    // Zero size type, no need to store
    if backend.get_size_of(field_type) == 0 {
        ret
    }

    let instance_type_token = code.find_inst_type_token(kind.instance)
    check(instance_type_token.is_some()) @{ "StoreField instance has not type! #${kind.instance}\n$code" }

    let instance_type = func.ctx.convert_type(instance_type_token!!.find_type())
    let final_struct = backend.get_final_struct(field.parent_struct, instance_type)

    // Offset in the struct
    let offset = 0
    for field in final_struct.fields {
        if field.name == kind.name {
            break
        }
        offset += field.size
    }

    push(kind.instance, map)
    add_i32_const(offset)
    add_i32_add()
    push(kind.value, map)
    add_store_by_type(field_type, backend)
}

fun WasmEmitter.compile_inst_init_field(inst: NInst, func: WFunction, backend: WasmBackend, map: Map<NInstId, InstResultAction>, code: NCode) {
    let kind = inst.kind as NInstKind::InitField

    check(kind.field.is_some()) @{ "InitField without field! #${inst.id} $inst\n$code" }
    check(kind.field_type_token.is_some()) @{ "InitField without field_type_token! #${inst.id} $inst\n$code" }

    let field = kind.field!!
    let field_type = func.ctx.convert_type(kind.field_type_token!!.find_type())

    // Zero size type, no need to store
    if backend.get_size_of(field_type) == 0 {
        ret
    }

    let instance_type_token = code.find_inst_type_token(kind.instance)
    check(instance_type_token.is_some()) @{ "InitField instance has not type! #${kind.instance}\n$code" }

    let instance_type = func.ctx.convert_type(instance_type_token!!.find_type())
    let final_struct = backend.get_final_struct(field.parent_struct, instance_type)

    // Offset in the struct
    let offset = 0
    for field in final_struct.fields {
        if field.name == kind.name {
            break
        }
        offset += field.size
    }

    push(kind.instance, map)
    add_i32_const(offset)
    add_i32_add()
    push(kind.value, map)
    add_store_by_type(field_type, backend)
}

fun WasmEmitter.compile_inst_load_field(inst: NInst, func: WFunction, backend: WasmBackend, map: Map<NInstId, InstResultAction>, code: NCode) {
    let kind = inst.kind as NInstKind::LoadField

    check(kind.field.is_some()) @{ "LoadField without field! #${inst.id} $inst\n$code" }
    check(kind.field_type_token.is_some()) @{ "LoadField without field_type_token! #${inst.id} $inst\n$code" }

    let field = kind.field!!
    let field_type = func.ctx.convert_type(kind.field_type_token!!.find_type())

    // Zero size type, no need to load
    if backend.get_size_of(field_type) == 0 {
        ret
    }

    let instance_type = func.ctx.convert_type(code.find_inst_type_token(kind.instance)!!.find_type())
    let final_struct = backend.get_final_struct(field.parent_struct, instance_type)

    // Offset in the struct
    let offset = 0
    for field in final_struct.fields {
        if field.name == kind.name {
            break
        }
        offset += field.size
    }

    push(kind.instance, map)
    add_i32_const(offset)
    add_i32_add()
    add_load_by_type(field_type, backend)
    pop(inst.id, map)
}

fun WasmEmitter.compile_inst_load_var(inst: NInst, func: WFunction, backend: WasmBackend, map: Map<NInstId, InstResultAction>, code: NCode) {
    let kind = inst.kind as NInstKind::LoadVar

    if kind.constant.is_some() {
        let id = func.constants[inst.id]!!
        let wconst = backend.find_const(id)

        add_i32_const(wconst.section.offset)
        let size = add_load_by_type(wconst.final_type, backend)

        if size > 0 {
            pop(inst.id, map)
        }
        ret
    }

    let nvar_id: NVarId = kind.variable!!
    let nvar = code.find_var(nvar_id)

    // If the variable is local `let_final_types` will have the type, otherwise it's an upvalue and we check the original variable
    let final_type = func.let_final_types[nvar_id].or_else @{ func.ctx.convert_type(nvar.type_token!!.find_type()) }

    // Zero size type, no need to load
    if backend.get_size_of(final_type) == 0 {
        ret
    }

    let wvar = func.let_declarations[nvar_id]

    // Using upvalue outside the code block
    if wvar.is_none() {
        let index = code.upvalues.index_of(nvar_id)!!

        // Implicit lambda instance
        add_local_get(0)

        // Load upvalue ptr
        add_i32_const((1 + index) * 4)
        add_i32_add()
        add_i32_load(0)

        // Load the value
        add_load_by_type(final_type, backend)

        pop(inst.id, map)
        ret
    }

    let local_id = wvar!!.index.to_int()

    if nvar.is_upvalue {
        // Upvalues are pointers in the stack, the value is in the heap
        add_local_get(local_id)
        add_load_by_type(final_type, backend)
    } else {
        add_local_get(local_id)
    }

    pop(inst.id, map)
}

fun WasmEmitter.compile_inst_store_var(inst: NInst, func: WFunction, backend: WasmBackend, map: Map<NInstId, InstResultAction>, code: NCode) {
    let kind = inst.kind as NInstKind::StoreVar
    let nvar_id = kind.variable!!
    let nvar = code.find_var(nvar_id)

    // If the variable is local `let_final_types` will have the type, otherwise it's an upvalue and we check the original variable
    let final_type = func.let_final_types[nvar_id].or_else @{ func.ctx.convert_type(nvar.type_token!!.find_type()) }

    // Zero size type, no need to store
    if backend.get_size_of(final_type) == 0 {
        ret
    }

    let wvar = func.let_declarations[nvar_id]

    // Using upvalue outside the code block
    if wvar.is_none() {
        let index = code.upvalues.index_of(nvar_id)

        // Implicit lambda instance
        add_local_get(0)

        // Load upvalue ptr
        add_i32_const((1 + index!!) * 4)
        add_i32_add()
        add_i32_load(0)

        // Store the value
        push(kind.value, map)
        add_store_by_type(final_type, backend) // ptr: i32, value: i32 -> void
        ret
    }

    let local_id = wvar!!.index.to_int()

    if nvar.is_upvalue {
        // Upvalues are pointers in the stack, the value is in the heap
        add_local_get(local_id)
        push(kind.value, map)
        add_store_by_type(final_type, backend)
    } else {
        push(kind.value, map)
        add_local_set(local_id)
    }
}

fun WasmEmitter.compile_inst_fun_call(inst: NInst, func: WFunction, backend: WasmBackend, map: Map<NInstId, InstResultAction>, code: NCode) {
    let kind = inst.kind as NInstKind::FunCall
    let opt = func.function_calls[inst.id]!!

    for arg in kind.arguments {

        // Special case, call to extern function must pass something to the zero size arguments
        if opt is WFuncCall::WImport {
            let arg_type = func.inst_final_types[arg]!!
            let size = backend.get_size_of(arg_type)

            if size == 0 {
                add_i32_const(0)
                continue
            }
        }

        push(arg, map)
    }

    when {
        opt is WFuncCall::WFunction -> {
            let func = opt as WFuncCall::WFunction
            let id = func.value
            let return_final_type = func.return_final_type
            add_call(id.to_int())

            // If the function never returns, add unreachable()
            if return_final_type.is_never() {
                add_unreachable()
            }
        }
        opt is WFuncCall::WLambda -> {
            let call = (opt as WFuncCall::WLambda)

            // Get the index of the lambda function
            push(kind.arguments[0]!!, map)
            add_i32_load(0)

            // Call the function in the lambdas funcref table
            add_call_indirect(call.type_id.to_int(), call.table_id)
        }
        opt is WFuncCall::WImport -> {
            let id = (opt as WFuncCall::WImport).value
            add_call(id.to_int())
        }
        opt is WFuncCall::WOpcode -> {
            let opcode = (opt as WFuncCall::WOpcode)
            for arg in opcode.args {
                emit_const_by_type(arg)
            }
            emit_opcode_by_name(opcode.value)
        }
        else -> unreachable()
    }

    pop(inst.id, map)
}

fun WasmEmitter.compile_inst_literal(inst: NInst, func: WFunction, backend: WasmBackend, map: Map<NInstId, InstResultAction>, code: NCode) {
    let expr: NValue = (inst.kind as NInstKind::Literal).value

    if expr is NValue::Int {
        let const_value = expr as NValue::Int
        add_i32_const(const_value.value)
        pop(inst.id, map)
        ret
    }
    if expr is NValue::Long {
        let const_value = expr as NValue::Long
        add_i64_const(const_value.value)
        pop(inst.id, map)
        ret
    }
    if expr is NValue::Float {
        let const_value = expr as NValue::Float
        add_f32_const(const_value.value)
        pop(inst.id, map)
        ret
    }
// No new features until the new compiler is functional
//  if expr is NValue::NConstDouble {
//      let value = expr as NValue::NConstDouble
//      add_f64_const(value.value)
//      ret
//  }
    if expr is NValue::String {
        let const_value = expr as NValue::String
        let ptr = backend.push_string(const_value.value)
        add_i32_const(ptr)
        pop(inst.id, map)
        ret
    }
    if expr is NValue::Boolean {
        let const_value = expr as NValue::Boolean
        add_i32_const(if const_value.value {1} else {0})
        pop(inst.id, map)
        ret
    }
    if expr is NValue::Nothing {
        // Nothing has 0 size
        ret
    }
    crash("Unknown literal type: ${expr}")
}

fun WasmEmitter.push_literal(expr: NValue) {
    if expr is NValue::Int {
        let const_value = expr as NValue::Int
        add_i32_const(const_value.value)
        ret
    }
    if expr is NValue::Long {
        let const_value = expr as NValue::Long
        add_i64_const(const_value.value)
        ret
    }
    if expr is NValue::Float {
        let const_value = expr as NValue::Float
        add_f32_const(const_value.value)
        ret
    }
// No new features until the new compiler is functional
//  if expr is NValue::NConstDouble {
//      let value = expr as NValue::NConstDouble
//      add_f64_const(value.value)
//      ret
//  }
    if expr is NValue::String {
        let const_value = expr as NValue::String
        let ptr = backend!!.push_string(const_value.value)
        add_i32_const(ptr)
        ret
    }
    if expr is NValue::Boolean {
        let const_value = expr as NValue::Boolean
        add_i32_const(if const_value.value {1} else {0})
        ret
    }
    if expr is NValue::Nothing {
        // Nothing has 0 size
        ret
    }
    crash("Unknown literal type: ${expr}")
}

fun WasmEmitter.compile_inst_is_type(inst: NInst, func: WFunction, backend: WasmBackend, map: Map<NInstId, InstResultAction>, code: NCode) {
    let kind = inst.kind as NInstKind::IsType
    let final_type = func.ctx.convert_type(code.find_inst_type_token(kind.value)!!.find_type())
    let final_pattern = func.ctx.convert_pattern(kind.type_pattern.resolved!!)

    // Always true
    if final_pattern.kind is FinalTypePatternKind::Any {
        push(kind.value, map)
        add_drop()
        add_i32_const(1)
        pop(inst.id, map)
        ret
    }

    // Pattern info
    let final_type_kind: FinalTypeKind = (final_pattern.kind as FinalTypePatternKind::FinalType).final_type_kind
    let pattern_is_option_item = final_type_kind is FinalTypeKind::Struct && (final_type_kind as FinalTypeKind::Struct).instance.parent.is_some()

    // Type info
    let type_is_option = final_type.kind is FinalTypeKind::Option
    let type_is_option_item = final_type.kind is FinalTypeKind::Struct && (final_type.kind as FinalTypeKind::Struct).instance.parent.is_some()

    // If the type pattern is an option-item and the expression type is an option or item
    // The check is performed at runtime
    if pattern_is_option_item && (type_is_option || type_is_option_item) {
        let item_instance: NStruct = (final_type_kind as FinalTypeKind::Struct).instance
        let option_instance = item_instance.parent!!
        let index: Int = option_instance.get_index_of_item(item_instance)!!

        // Variant field
        push(kind.value, map)
        add_i32_load(0)
        // Expected value
        add_i32_const(index)
        // equal?
        add_i32_eq()
        pop(inst.id, map)
        ret
    }

    // If the type pattern is not an option item, or the expression type is not an option or item
    // The check is performed at compile time
    push(kind.value, map)
    add_drop()
    add_i32_const(if final_pattern.matches_type(final_type) { 1 } else { 0 })
    pop(inst.id, map)
}

fun WasmEmitter.compile_inst_as_type(inst: NInst, func: WFunction, backend: WasmBackend, map: Map<NInstId, InstResultAction>, code: NCode) {
    let kind = inst.kind as NInstKind::AsType
    let final_type = func.ctx.convert_type(code.find_inst_type_token(kind.value)!!.find_type())
    let final_pattern = func.ctx.convert_type(kind.type_usage.type_token!!.find_type())

    let pattern_is_option_item = final_pattern.kind is FinalTypeKind::Struct && (final_pattern.kind as FinalTypeKind::Struct).instance.parent.is_some()
    let pattern_is_option = final_pattern.kind is FinalTypeKind::Option

    let type_is_option_item = final_type.kind is FinalTypeKind::Struct && (final_type.kind as FinalTypeKind::Struct).instance.parent.is_some()
    let type_is_option = final_type.kind is FinalTypeKind::Option

    // Valid cases
    // 1. Option -> Option::Item, ie. Optional -> Optional::Some
    // 2. Option::Item -> Option, ie. Optional::Some -> Optional
    // 3. Anything else is invalid

    // 1. Option::Item as Option
    if pattern_is_option_item && type_is_option {
        let item_instance: NStruct = (final_pattern.kind as FinalTypeKind::Struct).instance
        let item_option_instance = item_instance.parent!!
        let value_option_instance = (final_type.kind as FinalTypeKind::Option).instance

        if item_option_instance != value_option_instance {
            backend.reporter.report_error("Invalid cast from ${value_option_instance.full_name} to ${item_option_instance.full_name}", inst.span)
            ret
        }

        push(kind.value, map)
        pop(inst.id, map)
        ret
    }

    // 2. Option as Option::Item
    if pattern_is_option && type_is_option_item {
        let pattern_option_instance = (final_pattern.kind as FinalTypeKind::Option).instance
        let item_instance = (final_type.kind as FinalTypeKind::Struct).instance
        let item_option_instance = item_instance.parent!!

        if pattern_option_instance != item_option_instance {
            backend.reporter.report_error("Invalid cast from ${item_option_instance.full_name} to ${pattern_option_instance.full_name}", inst.span)
            ret
        }

        push(kind.value, map)
        pop(inst.id, map)
        ret
    }

    backend.reporter.report_error("Invalid cast from $final_type to $final_pattern", inst.span)
}

// Compute whether an instruction should save its result in a local, keep it on the stack, or drop it
fun WFunction.check_stack_allocation(backend: WasmBackend, map: Map<NInstId, InstResultAction>) {

    for inst in code.inst_list {
        let final_type = inst_final_types[inst.id]!!
        let size = backend.get_size_of(final_type)

        // Zero size types don't exist on runtime,
        // if an expression returns nothing, the stack is already empty, we keep it that way
        if size == 0 {
            map[inst.id] = InstResultAction::Keep @[]
            continue
        }

        if inst.kind is NInstKind::Literal {
            map[inst.id] = InstResultAction::Const @[
                value: (inst.kind as NInstKind::Literal).value
            ]
            continue
        }

        if size == 0 || inst.back_references.is_empty() {
            map[inst.id] = InstResultAction::Drop @[]
            continue
        }

        // No working as intended, left for future improvements
//        if inst.back_references.len == 1 {
//            let usage: NInstId = inst.back_references.first()!!
//            let inst_index = code.index_of_inst(inst.id)!!
//            let usage_index = code.index_of_inst(usage)!!
//
//            // Used in the next instruction, avoid saving and loading from a local
//            if inst_index + 1 == usage_index {
//                map[inst.id] = InstResultAction::Keep @[]
//                continue
//            }
//        }

        let variable = add_local("tmp_${inst.id}", backend.encode_to_wasm_type(final_type))
        map[inst.id] = InstResultAction::Save @[variable]
    }
}


// Generate the required code to push the result of an instruction to the stack
fun WasmEmitter.push(id: NInstId, map: Map<NInstId, InstResultAction>) {
    let remote_action: InstResultAction = map[id]!!

    // Original instruction did not save its result
    if remote_action is InstResultAction::Drop {
        ret
    }

    // Original instruction did not save its result
    if remote_action is InstResultAction::Const {
        let value = (remote_action as InstResultAction::Const).value
        push_literal(value)
        ret
    }

    // Original instruction left its result on the stack, so it's already there
    if remote_action is InstResultAction::Keep {
        ret
    }

    // Original instruction saved its result in a local, so we need to load it
    if remote_action is InstResultAction::Save {
        let variable = (remote_action as InstResultAction::Save).variable
        add_local_get(variable.index.to_int())
        ret
    }

    crash("Unknown action: ${remote_action}")
}

// Generate the required code to save a value from the stack to a local, or keep the value, or discard it
fun WasmEmitter.pop(id: NInstId, map: Map<NInstId, InstResultAction>) {
    let local_action: InstResultAction = map[id]!!

    // Discard the result
    if local_action is InstResultAction::Drop {
        add_drop()
        ret
    }
    // Keep the result on the stack
    if local_action is InstResultAction::Keep {
        ret
    }
    // Save the result in a local
    if local_action is InstResultAction::Save {
        let variable = (local_action as InstResultAction::Save).variable

        if debug_print {
            debug_print_local(variable)
        }

        add_local_set(variable.index.to_int())
        ret
    }
    unreachable()
}

// Add a load instruction based on the size of the type
fun WasmEmitter.add_load_by_type(final_type: FinalType, backend: WasmBackend): Int {
    let heap_size = backend.get_size_of(final_type)
    let size = backend.get_ref_size_of(final_type)

    // Zero size types are not loaded
    if heap_size == 0 {
        ret 0
    }

    when size {
        0 -> {}
        // Load a single byte
        1 -> add_i32_load8_u(0)
        // Load two bytes
        2 -> add_i32_load16_u(0)
        // Load a 4 byte value: i32 or f32
        4 -> {
            if final_type.is_float() {
                add_f32_load(0)
            } else {
                add_i32_load(0)
            }
        }
        // Load an 8 byte value: i64
        8 -> add_i64_load(0)

        else -> crash("Unsupported size: $size")
    }

    ret size
}

// Add a store instruction based on the size of the type
fun WasmEmitter.add_store_by_type(final_type: FinalType, backend: WasmBackend): Int {
    let heap_size = backend.get_size_of(final_type)
    let size = backend.get_ref_size_of(final_type)

    // Zero size types are not loaded
    if heap_size == 0 {
        ret 0
    }

    when size {
        0 -> {}
        // Load a single byte
        1 -> add_i32_store8(0)
        // Load two bytes
        2 -> add_i32_store16(0)
        // Load a 4 byte value: i32 or f32
        4 -> {
            if final_type.is_float() {
                add_f32_store(0)
            } else {
                add_i32_store(0)
            }
        }
        // Load an 8 byte value: i64
        8 -> add_i64_store(0)

        else -> crash("Unsupported size: $size")
    }

    ret size
}
