
let STRUCT_HEADER_SIZE: Int = 0
let INT_SIZE: Int = 4
let FLOAT_SIZE: Int = 4
let PTR_SIZE: Int = 4

struct WasmEmitter {
    buffer: List<Byte>
    debug_buffer: StringBuilder
    debug_suffix: String
    debug_indent: Int
    debug_print: Boolean
    generate_dwarf: Boolean
    debug_lines: List<DebugLine>
    backend: Optional<WasmBackend>
}

enum DebugLineKind {
    Span
    FunctionStart
    FunctionEnd
}

struct DebugLine {
    kind: DebugLineKind
    offset: Int
    span: Span
}

// https://webassembly.github.io/spec/core/binary/modules.html#sections
enum SectionType {
    let code: Int
    Custom      @[code: 0]
    Type        @[code: 1]
    Import      @[code: 2]
    Function    @[code: 3]
    Table       @[code: 4]
    Memory      @[code: 5]
    Global      @[code: 6]
    Export      @[code: 7]
    Start       @[code: 8]
    Element     @[code: 9]
    Code        @[code: 10]
    Data        @[code: 11]
    DataCount   @[code: 12]
}

fun WasmEmitter::new(): WasmEmitter {
    ret WasmEmitter @[
        buffer: [],
        debug_buffer: StringBuilder::new(),
        debug_suffix: "",
        debug_indent: 1,
        debug_print: false,
        generate_dwarf: false,
        debug_lines: [],
        backend: None(),
    ]
}

fun WasmEmitter.new_child_emitter(): WasmEmitter {
    let child = WasmEmitter::new()
    child.backend = backend
    child.generate_dwarf = generate_dwarf
    ret child
}

// Emit a single byte with the given opcode
fun WasmEmitter.debug_print_line(line: String) {
    debug_buffer[] = "  " * debug_indent
    debug_buffer[] = line

    if debug_suffix.is_not_empty() {
        debug_buffer[] = " " * (30 - line.len - debug_indent * 2)
        debug_buffer[] = debug_suffix
        debug_suffix = ""
    }

    debug_buffer[] = "\n"
}

fun WasmEmitter.debug_print_local(wvar: WVar) {
    debug_buffer[] = "  " * debug_indent
    debug_buffer[] = "(local \$"
    debug_buffer[] = wvar.index
    debug_buffer[] = " "
    debug_buffer[] = wvar.wasm_type.name
    debug_buffer[] = " \""
    debug_buffer[] = wvar.name
    debug_buffer[] = "\")"
    debug_buffer[] = "\n"
}

// https://webassembly.github.io/spec/core/binary/modules.html#binary-module
fun WasmEmitter.emit_program(program: WasmProgram) {
    if debug_print {
        debug_print_line("Emitting program")
    }

    // Magic number "\0ASM"
    emit_byte(0x00)
    emit_byte(0x61)
    emit_byte(0x73)
    emit_byte(0x6D)
    // Version 1
    emit_byte(0x01)
    emit_byte(0x00)
    emit_byte(0x00)
    emit_byte(0x00)

    // Types section
    emit_type_section(program.imports, program.functions, program.indirect_function_types)

    // Imports section
    if program.imports.len > 0 {
        emit_import_section(program.imports)
    }

    // Functions section
    if program.functions.len > 0 {
        emit_function_section(program.functions)
    }

    // Table section
    emit_table_section(program)

    // Memory section
    emit_memory_section(program.memory)

    // Exports section
    emit_export_section(program.function_exports, program.memory)

    // Start section
//    emit_start_section(program.start!!)

    // Elements section
    emit_elements_section(program)

    // Data count section
    emit_data_count_section(program.memory)

    // Code section
    if program.functions.len > 0 {
        emit_code_section(program.functions)
    }

    // Data section
    emit_data_section(program.memory)

    // Symbol names
    emit_custom_section_names(program)

    if generate_dwarf {
        // DWARF debug info
        emit_custom_section_dwarf(program)
    }
}

// https://webassembly.github.io/spec/core/binary/modules.html#sections
fun WasmEmitter.emit_section_header(section: SectionType, size: Int) {
    if debug_print {
        debug_print_line("Emit section header: type = $section, size = $size, offset = ${buffer.len}")
    }

    // N:byte section type id
    emit_byte(section.code)
    // size:u32 section size
    emit_u32(size)
}

// https://webassembly.github.io/spec/core/binary/modules.html#type-section
fun WasmEmitter.emit_type_section(imports: List<WImport>, functions: List<WFunction>, lambdas: List<WFunctionHeader>) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit type section: ${imports.len} imports, ${functions.len} functions")
    }

    tmp.emit_u32(imports.len + functions.len + lambdas.len)
    for imp in imports {
        tmp.emit_functype(imp.header)
    }
    for func in functions {
        tmp.emit_functype(func.header)
    }
    for header in lambdas {
        tmp.emit_functype(header)
    }

    emit_section_header(SectionType::Type, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#import-section
fun WasmEmitter.emit_import_section(imports: List<WImport>) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit import section, ${imports.len} imports")
    }

    tmp.emit_u32(imports.len)
    for imp in imports {
        tmp.emit_name(imp.module_name)
        tmp.emit_name(imp.name)
        // Function type index
        tmp.emit_byte(0x00)
        tmp.emit_u32(imp.header.index.to_int())

        if debug_print {
            tmp.debug_print_line("  Import ${imp.header.index.to_int()}: ${imp.module_name}::${imp.name} (${imp.header})")
        }
    }

    emit_section_header(SectionType::Import, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#function-section
fun WasmEmitter.emit_function_section(functions: List<WFunction>) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit function section: ${functions.len} functions")
    }

    tmp.emit_u32(functions.len)
    for func in functions {
        tmp.emit_u32(func.header.index.to_int())
    }

    emit_section_header(SectionType::Function, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#table-section
fun WasmEmitter.emit_table_section(program: WasmProgram) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit table section: len = ${program.lambda_table.len}")
    }

    // vec(table_type)
    tmp.emit_u32(1)
    // table_type -> ref_type limits
    tmp.emit_u32(WType::FuncRef.code)
    tmp.emit_limits(program.lambda_table.len, -1)

    emit_section_header(SectionType::Table, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#memory-section
fun WasmEmitter.emit_memory_section(memory: WMemory) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit memory section: 1 memory section, ${memory.size} Bytes")
    }

    // Only 1 memory is supported in the standard
    tmp.emit_u32(1)
    // Allocate all memory at the beginning with no max defined
    // number of pages of 64 KiB
    tmp.emit_limits(memory.size / (64 * 1024), -1)

    emit_section_header(SectionType::Memory, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#export-section
fun WasmEmitter.emit_export_section(function_exports: List<WFunctionExport>, memory: WMemory) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit export section: ${function_exports.len} function exports, 1 memory export")
    }

    tmp.emit_u32(function_exports.len + 1)

    // Functions
    for exp in function_exports {
        tmp.emit_name(exp.name)
        tmp.emit_byte(0x00)
        tmp.emit_u32(exp.header.index.to_int())
    }

    // Memory
    tmp.emit_name("memory")
    tmp.emit_byte(0x02)
    tmp.emit_u32(0)

    emit_section_header(SectionType::Export, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#start-section
fun WasmEmitter.emit_start_section(start: Id) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit start section: ${start}")
    }

    tmp.emit_u32(start.to_int())

    emit_section_header(SectionType::Start, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#element-section
fun WasmEmitter.emit_elements_section(program: WasmProgram) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit elements section: ${program.lambda_table.len} elements")
    }

    // vec(element_segment)
    tmp.emit_u32(1)

    // elem -> 0 expr vec(func_idx)
    tmp.emit_u32(0)
    // expr
    tmp.emit_opcode(WOpcode::I32Const)
    tmp.emit_i32(0)
    tmp.emit_byte(0x0B)

    // vec(func_idx)
    tmp.emit_u32(program.lambda_table.len)
    for func_index in program.lambda_table {
        tmp.emit_u32(func_index.to_int())
    }

    emit_section_header(SectionType::Element, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#data-count-section
fun WasmEmitter.emit_data_count_section(memory: WMemory) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit data count section: ${memory.sections.len} data sections")
    }

    // Numbers of data sections
    tmp.emit_u32(memory.sections.len)

    emit_section_header(SectionType::DataCount, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#code-section
fun WasmEmitter.emit_code_section(functions: List<WFunction>) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit code section: ${functions.len} functions")
    }

    tmp.emit_u32(functions.len)
    for func in functions {
        tmp.emit_code(func)
    }

    emit_section_header(SectionType::Code, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#code-section
fun WasmEmitter.emit_code(func: WFunction) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit code for function ${func.header.index}: ${func.locals.len} locals, offset = ${buffer.len}")
    }

    tmp.emit_locals(func.locals)
    tmp.emit_expr(func)

    emit_u32(tmp.buffer.len)
    for line in tmp.debug_lines {
        line.offset += buffer.len
    }
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#binary-local
fun WasmEmitter.emit_locals(locals: List<WVar>) {
    if debug_print {
        debug_print_line("Emit locals: ${locals.len} locals")
    }
    let non_params = locals.filter @{ it -> it.kind != WVarKind::Param }

    emit_u32(non_params.len)
    for l in non_params {
        emit_u32(1)
        emit_byte(l.wasm_type.code)
    }
}

// https://webassembly.github.io/spec/core/binary/instructions.html#expression
fun WasmEmitter.emit_expr(func: WFunction) {
    if debug_print {
        debug_print_line("Emit expression: ${func.name}")
    }

    for line in func.bytecode.debug_lines {
        line.offset += buffer.len
    }
    emit(func.bytecode)
    // end opcode: WOpcode::End
    emit_byte(0x0B)
}

// https://webassembly.github.io/spec/core/binary/modules.html#data-section
fun WasmEmitter.emit_data_section(memory: WMemory) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit data section: ${memory.sections.len} data sections")
    }

    tmp.emit_u32(memory.sections.len)
    for sec in memory.sections {
        // Active data section
        tmp.emit_u32(0)
        // Offset, must be an expression like (i32.const 0)
        tmp.emit_opcode(WOpcode::I32Const)
        tmp.emit_i32(sec.offset)
        tmp.emit_byte(0x0B)
        // Data
        tmp.emit_bytes(sec.data)
    }

    emit_section_header(SectionType::Data, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/appendix/custom.html#name-section
fun WasmEmitter.emit_custom_section_names(program: WasmProgram) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit custom section: names")
    }

    tmp.emit_name("name")

    // vec(nameassoc)
    let func = new_child_emitter()
    // vec(indirectnameassoc)
    let locals = new_child_emitter()

    // namemap
    func.emit_u32(program.functions.len)
    locals.emit_u32(program.functions.len)

    for wfunc in program.functions {
        func.emit_u32(wfunc.header.index.to_int())
        func.emit_name("${wfunc.name}#${wfunc.header.index.to_int()}")

        locals.emit_u32(wfunc.header.index.to_int())
        // idx namemap
        locals.emit_u32(wfunc.locals.len)
        for wvar in wfunc.locals {
            locals.emit_u32(wvar.index.to_int())
            locals.emit_name(wvar.name)
        }
    }

    // Subsection Header: funcnamesubsec
    tmp.emit_byte(0x01)
    tmp.emit_u32(func.buffer.len)
    tmp.emit(func)

    // Subsection Header: localnamesubsec
    tmp.emit_byte(0x02)
    tmp.emit_u32(locals.buffer.len)
    tmp.emit(locals)

    emit_section_header(SectionType::Custom, tmp.buffer.len)
    emit(tmp)
}

fun WasmEmitter.emit_custom_section_dwarf(program: WasmProgram) {
    let tmp = new_child_emitter()
    if debug_print {
        tmp.debug_print_line("Emit custom section: .debug_line")
    }

    tmp.emit_name(".debug_line")
    let line = new_child_emitter()

    line.emit_byte(0x04) // DWARF version
    line.emit_byte(0x00) // DWARF version

    let header = new_child_emitter()

    header.emit_byte(0x01) // DWARF min_inst_length
    header.emit_byte(0x01) // DWARF max_ops_per_inst
    header.emit_byte(0x01) // DWARF default_is_stmt
    header.emit_byte(0x7B /* -5 in Signed LEB128 */) // DWARF line_base
    header.emit_byte(14) // DWARF line_range
    header.emit_byte(13) // DWARF opcode_base

    // Standard opcode lengths
    header.emit_byte(0x00);   // DW_LNS_copy
    header.emit_byte(0x01);   // DW_LNS_advance_pc
    header.emit_byte(0x04);   // DW_LNS_advance_line
    header.emit_byte(0x01);   // DW_LNS_set_file
    header.emit_byte(0x01);   // DW_LNS_set_column
    header.emit_byte(0x00);   // DW_LNS_negate_stmt
    header.emit_byte(0x00);   // DW_LNS_set_basic_block
    header.emit_byte(0x00);   // DW_LNS_const_add_pc
    header.emit_byte(0x01);   // DW_LNS_fixed_advance_pc
    header.emit_byte(0x00);   // DW_LNS_set_prologue_end
    header.emit_byte(0x00);   // DW_LNS_set_epilogue_begin
    header.emit_byte(0x01);   // DW_LNS_set_isa

    let file_map: Map<String, IncludedFile> = #[]
    let directory_set = %[]
    let prefix = ""

    for debug_line in debug_lines {
        let path = "$prefix/${debug_line.span.file.file_path.path}"

        directory_set[] = FilePath::directory_name(path)
        file_map[path] = debug_line.span.file
    }

    let files = file_map.keys_to_list()
    let directories = directory_set.to_list()

    // Directory table
    for dir in directories {
        header.emit_raw_bytes(dir.to_bytes())
        header.emit_byte(0x00) // Null byte
    }
    header.emit_byte(0) // Null terminator to the directory list

    // File name table
    for path in files {
        let file = file_map[path]!!
        let dirname = FilePath::directory_name(path)
        let basename = FilePath::base_name(path)
        let dir_index = directories.index_of(dirname)!!

        // File path
        header.emit_raw_bytes(basename.to_bytes())
        header.emit_byte(0x00) // Null byte
        // Directory index
        header.emit_u32(dir_index)
        // Last modified time
        header.emit_u32(file.last_modified)
        // File size
        header.emit_u32(file.source.len)
    }
    // Mark end of file list
    header.emit_byte(0x00) // Null byte

    // End of header
    line.emit_u32_le(header.buffer.len) // Header length
    line.emit(header)

    // Line number program
    let current_file = ""
    let current_column = 0
    let current_line = 1

    for debug_line in debug_lines {
        if debug_line.kind == DebugLineKind::FunctionEnd {
            // End sequence
            line.emit_byte(0x00) // Extended opcode
            line.emit_byte(0x01) // Operation length
            line.emit_byte(0x01 /* DW_LNS_end_sequence */)
            current_file = ""
            current_column = 0
            current_line = 1
            continue
        }

        let path = "$prefix/${debug_line.span.file.file_path.path}"

        // Set file
        if path != current_file {
            current_file = path
            line.emit_byte(0x04 /* DW_LNS_set_file */)
            // 1 base index
            let file_index: Int = files.index_of(path)!! + 1
            line.emit_byte(file_index)
        }

        // Set address
        line.emit_byte(0x00) // Extended opcode
        line.emit_u32(0x5) // Operation length: 1 + size_of<Int>()
        line.emit_byte(0x02 /* DW_LNE_set_address */)
        line.emit_u32_le(debug_line.offset) // Wasm offset

        // Set column number
        if debug_line.span.column != current_column {
            current_column = debug_line.span.column
            line.emit_byte(0x05 /* DW_LNS_set_column */)
            line.emit_i32(current_column)
        }

        // Set line number
        if debug_line.span.line != current_line {
            let delta = debug_line.span.line - current_line
            current_line = debug_line.span.line
            line.emit_byte(0x03 /* DW_LNS_advance_line */)
            line.emit_i32(delta)
        }

        // Emit a row in the matrix
        line.emit_byte(0x01 /* DW_LNS_copy */)
    }

    // Total length of the DWARF section
    tmp.emit_u32_le(line.buffer.len)
    // Rest of DWARF section
    tmp.emit(line)

    // Wasm custom section encapsulated in a DWARF section
    emit_section_header(SectionType::Custom, tmp.buffer.len)
    emit(tmp)
}

fun WasmEmitter.add_span(span: Span) {
    if generate_dwarf {
        debug_lines[] = DebugLine @[
            kind: DebugLineKind::Span,
            offset: buffer.len,
            span,
        ]
    }
}

fun WasmEmitter.add_enter_function(span: Span) {
    if generate_dwarf {
        debug_lines[] = DebugLine @[
            kind: DebugLineKind::FunctionStart,
            offset: buffer.len,
            span,
        ]
    }
}

fun WasmEmitter.add_exit_function(span: Span) {
    if generate_dwarf {
        debug_lines[] = DebugLine @[
            kind: DebugLineKind::FunctionEnd,
            offset: buffer.len,
            span,
        ]
    }
}

// https://webassembly.github.io/spec/core/binary/values.html#names
fun WasmEmitter.emit_name(name: String) {
    // names are just a vec of bytes that must be encoded in UTF-8, Strings are already UTF-8
    emit_bytes(name.to_bytes())
}

// https://webassembly.github.io/spec/core/binary/conventions.html#vectors
fun WasmEmitter.emit_bytes(bytes: List<Byte>) {
    emit_u32(bytes.len)
    buffer.ensure_capacity(buffer.len + bytes.len)
    repeat bytes.len {
        buffer[] = bytes[it]!!
    }
}

fun WasmEmitter.emit_raw_bytes(bytes: List<Byte>) {
    buffer.ensure_capacity(buffer.len + bytes.len)
    repeat bytes.len {
        buffer[] = bytes[it]!!
    }
}

// 4 byte integer in little-endian, 0x12345678 -> 0x78 0x56 0x34 0x12
fun WasmEmitter.emit_u32_le(value: Int) {
    emit_byte(value & 0xFF)
    emit_byte((value >> 8) & 0xFF)
    emit_byte((value >> 16) & 0xFF)
    emit_byte((value >> 24) & 0xFF)
}

fun WasmEmitter.emit_i32_le(value: Int) {
    emit_byte(value & 0xFF)
    emit_byte((value >> 8) & 0xFF)
    emit_byte((value >> 16) & 0xFF)
    emit_byte((value >> 24) & 0xFF)
}

// https://webassembly.github.io/spec/core/binary/values.html#integers
fun WasmEmitter.emit_u32(value: Int) {
    // Fast path for small values (0-127)
    if value < 128 {
        emit_byte(value)
        ret
    }

    // unsigned LEB128 encoding
    loop {
        let byte = value & 0x7F
        value = value >>> 7

        if value != 0 {
            emit_byte(byte | 0x80)
        } else {
            emit_byte(byte)
        }

        if value == 0 {
            break
        }
    }

    test! "LEB128 encoding" {
        let tests = [
            Pair::of(0, [0x00.to_byte()]),
            Pair::of(0x7F, [0x7F.to_byte()]),
            Pair::of(0x80, [0x80.to_byte(), 0x01.to_byte()]),
            Pair::of(0x85, [0x85.to_byte(), 0x01.to_byte()]),
            Pair::of(0x2000, [0x80.to_byte(), 0x40.to_byte()]),
            Pair::of(0x3FFF, [0xFF.to_byte(), 0x7F.to_byte()]),
            Pair::of(0x4000, [0x80.to_byte(), 0x80.to_byte(), 0x01.to_byte()]),
            Pair::of(0x98765, [0xE5.to_byte(), 0x8E.to_byte(), 0x26.to_byte()]),
            Pair::of(0x1F0000, [0x80.to_byte(), 0x80.to_byte(), 0x7C.to_byte()]),
            Pair::of(0x1FFFFFFF, [0xFF.to_byte(), 0xFF.to_byte(), 0xFF.to_byte(), 0xFF.to_byte(), 0x01.to_byte()]),
        ]
        repeat tests.len {
            let e = WasmEmitter::new()
            e.emit_u32(tests[it]!!.first)

            check(e.buffer == tests[it]!!.second) @{ "Failed to encode ${tests[it]!!.first} as LEB128" }
        }
    }
}

// https://webassembly.github.io/spec/core/binary/values.html#integers
fun WasmEmitter.emit_i32(value: Int) {

    // signed LEB128 encoding
    loop {
        let byte = value & 0x7F
        value = value >> 7

        let more = (byte & 0x40) != 0
        let end = (value == 0 && !more) || (value == -1 && more)

        emit_byte(if end { byte } else { byte | 0x80 })

        if end {
            break
        }
    }

    test! "signed LEB128 encoding" {
        let tests = [
            Pair::of(0, [0x00.to_byte()]),
            Pair::of(1, [0x01.to_byte()]),
            Pair::of(-1, [0x7F.to_byte()]),
            Pair::of(-4, [0x7C.to_byte()]),
            Pair::of(-999999, [0xC1.to_byte(), 0xFB.to_byte(), 0x42.to_byte()]),
        ]

        repeat tests.len {
            let e = WasmEmitter::new()
            e.emit_i32(tests[it]!!.first)

            check(e.buffer == tests[it]!!.second) @{ "Failed to encode ${tests[it]!!.first} as LEB128" }
        }
    }
}

fun WasmEmitter.emit_u64(value: Long) {
    // unsigned LEB128 encoding
    loop {
        let byte = (value & 0x7FL).to_int()
        value = value >> 7L

        if value != 0L {
            emit_byte(byte | 0x80)
        } else {
            emit_byte(byte)
        }

        if value == 0L {
            break
        }
    }
}

fun WasmEmitter.emit_i64(value: Long) {
    // signed LEB128 encoding
    loop {
        let byte = (value & 0x7FL).to_int()
        value = value >> 7L

        let more = (byte & 0x40) != 0
        let end = (value == 0L && !more) || (value == -1L && more)

        emit_byte(if end { byte } else { byte | 0x80 })

        if end {
            break
        }
    }
}

// https://webassembly.github.io/spec/core/binary/values.html#floating-point
fun WasmEmitter.emit_f32(value: Float) {
    let int = value.reinterpret_as_int()
    buffer.ensure_capacity(buffer.len + 4)

    // Directly  IEEE 754 in little-endian
    emit_byte(int & 0xFF)
    int = int >>> 8
    emit_byte(int & 0xFF)
    int = int >>> 8
    emit_byte(int & 0xFF)
    int = int >>> 8
    emit_byte(int & 0xFF)
}

// https://webassembly.github.io/spec/core/binary/values.html#floating-point
fun WasmEmitter.emit_f64(value: Float) {
    // We don't support 64bit floating point numbers at the moment
    // So we will emit a 64 bit double, but use the 32 bit float value, loosing precision if needed
    let int = value.reinterpret_as_int()
    let sign = (int >> 31) & 0x1
    let exponent = (int >> 23) & 0xFF
    let fraction = int & 0x7FFFFF

    // Adjust the exponent
    let double_exponent = exponent - 127 + 1023

    // Construct the 64-bit double
    let double_long: Long = (sign.to_long() << 63L) | (double_exponent.to_long() << 52L) | (fraction.to_long() << 29L)

    buffer.ensure_capacity(buffer.len + 8)

    // Write the 64-bit double to the buffer in little-endian order
    repeat 8 {
        let shift = it.to_long() * 8L
        emit_byte((double_long >> shift).to_int() & 0xFF)
    }
}

// https://webassembly.github.io/spec/core/binary/types.html#function-types
fun WasmEmitter.emit_functype(func: WFunctionHeader) {
    // Byte 0x60, vec of params and vec of results
    emit_byte(0x60)
    emit_result_type(func.params)
    emit_result_type(func.results)
}

// https://webassembly.github.io/spec/core/binary/types.html#result-types
fun WasmEmitter.emit_result_type(types: List<WType>) {
    emit_u32(types.len)
    for t in types {
        emit_byte(t.code)
    }
}

// https://webassembly.github.io/spec/core/binary/types.html#limits
// max == -1 means no max
fun WasmEmitter.emit_limits(min: Int, max: Int) {
    if max != -1 {
        emit_byte(0x01)
        emit_u32(min)
        emit_u32(max)
    } else {
        emit_byte(0x00)
        emit_u32(min)
    }
}

// Copy the content of another emitter into this one
fun WasmEmitter.emit(other: WasmEmitter) {
    let start = buffer.len
    let aux = other.buffer
    buffer.ensure_capacity(buffer.len + aux.len)

    repeat aux.len {
        buffer[] = aux[it]!!
    }

    debug_buffer[] = other.debug_buffer.to_string().indent(2)
    debug_buffer.trimEnd()
    debug_buffer[] = "\n"

    for line in other.debug_lines {
        debug_lines[] = line
    }
}

fun WasmEmitter.emit_byte(value: Int) {
    buffer[] = value.to_byte()
}

fun WasmEmitter.ends_in_return(): Boolean {
    ret buffer.len > 0 && buffer[buffer.len - 1]!!.to_int() == WOpcode::Return.code
}

fun DebugLine.to_string(): String {
    ret "${offset.to_hex()}: $span"
}
