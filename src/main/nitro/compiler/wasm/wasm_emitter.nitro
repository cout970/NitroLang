
let STRUCT_HEADER_SIZE: Int = 0
let INT_SIZE: Int = 4
let FLOAT_SIZE: Int = 4
let PTR_SIZE: Int = 4

struct WasmEmitter {
    buffer: List<Byte>
    debug_buffer: StringBuilder
    debug_suffix: String
    debug_indent: Int
    debug_print: Boolean
}

// https://webassembly.github.io/spec/core/binary/modules.html#sections
enum SectionType {
    let code: Int
    Custom      @[code: 0]
    Type        @[code: 1]
    Import      @[code: 2]
    Function    @[code: 3]
    Table       @[code: 4]
    Memory      @[code: 5]
    Global      @[code: 6]
    Export      @[code: 7]
    Start       @[code: 8]
    Element     @[code: 9]
    Code        @[code: 10]
    Data        @[code: 11]
    DataCount   @[code: 12]
}

fun WasmEmitter::new(): WasmEmitter {
    ret WasmEmitter @[
        buffer: [],
        debug_buffer: StringBuilder::new(),
        debug_suffix: "",
        debug_indent: 1,
        // DEBUG
        debug_print: true,
    ]
}

// Emit a single byte with the given opcode
fun WasmEmitter.debug_print_line(line: String) {
    debug_buffer[] = "  " * debug_indent
    debug_buffer[] = line

    if debug_suffix.is_not_empty() {
        debug_buffer[] = " " * (30 - line.bytes_len - debug_indent * 2)
        debug_buffer[] = debug_suffix
        debug_suffix = ""
    }

    debug_buffer[] = "\n"
}

fun WasmEmitter.debug_print_local(wvar: WVar) {
    debug_buffer[] = "  " * debug_indent
    debug_buffer[] = "(local \$"
    debug_buffer[] = wvar.index
    debug_buffer[] = " "
    debug_buffer[] = wvar.wasm_type.name
    debug_buffer[] = " \""
    debug_buffer[] = wvar.name
    debug_buffer[] = "\")"
    debug_buffer[] = "\n"
}

// https://webassembly.github.io/spec/core/binary/modules.html#binary-module
fun WasmEmitter.emit_program(program: WasmProgram) {
    if debug_print {
        debug_print_line("Emitting program")
    }
    // Magic number "\0ASM"
    emit_byte(0x00)
    emit_byte(0x61)
    emit_byte(0x73)
    emit_byte(0x6D)
    // Version 1
    emit_byte(0x01)
    emit_byte(0x00)
    emit_byte(0x00)
    emit_byte(0x00)

    // Types section
    emit_type_section(program.imports, program.functions, program.indirect_function_types)

    // Imports section
    if program.imports.len > 0 {
        emit_import_section(program.imports)
    }

    // Functions section
    if program.functions.len > 0 {
        emit_function_section(program.functions)
    }

    // Table section
    emit_table_section(program)

    // Memory section
    emit_memory_section(program.memory)

    // Exports section
    emit_export_section(program.function_exports, program.memory)

    // Start section
//    emit_start_section(program.start!!)

    // Elements section
    emit_elements_section(program)

    // Data count section
    emit_data_count_section(program.memory)

    // Code section
    if program.functions.len > 0 {
        emit_code_section(program.functions)
    }

    // Data section
    emit_data_section(program.memory)

    // Symbol names
    emit_custom_section_names(program)
}

// https://webassembly.github.io/spec/core/binary/modules.html#sections
fun WasmEmitter.emit_section_header(section: SectionType, size: Int) {
    if debug_print {
        debug_print_line("Emit section header: type = $section, size = $size, offset = ${buffer.len}")
    }

    // N:byte section type id
    emit_byte(section.code)
    // size:u32 section size
    emit_u32(size)
}

// https://webassembly.github.io/spec/core/binary/modules.html#type-section
fun WasmEmitter.emit_type_section(imports: List<WImport>, functions: List<WFunction>, lambdas: List<WFunctionHeader>) {
    if debug_print {
        debug_print_line("Emit type section: ${imports.len} imports, ${functions.len} functions")
    }
    let tmp = WasmEmitter::new()

    tmp.emit_u32(imports.len + functions.len + lambdas.len)
    for imp in imports {
        tmp.emit_functype(imp.header)
    }
    for func in functions {
        tmp.emit_functype(func.header)
    }
    for header in lambdas {
        tmp.emit_functype(header)
    }

    emit_section_header(SectionType::Type, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#import-section
fun WasmEmitter.emit_import_section(imports: List<WImport>) {
    if debug_print {
        debug_print_line("Emit import section, ${imports.len} imports")
    }
    let tmp = WasmEmitter::new()

    tmp.emit_u32(imports.len)
    for imp in imports {
        tmp.emit_name(imp.module_name)
        tmp.emit_name(imp.name)
        // Function type index
        tmp.emit_byte(0x00)
        tmp.emit_u32(imp.header.index.to_int())
    }

    emit_section_header(SectionType::Import, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#function-section
fun WasmEmitter.emit_function_section(functions: List<WFunction>) {
    if debug_print {
        debug_print_line("Emit function section: ${functions.len} functions")
    }
    let tmp = WasmEmitter::new()

    tmp.emit_u32(functions.len)
    for func in functions {
        tmp.emit_u32(func.header.index.to_int())
    }

    emit_section_header(SectionType::Function, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#table-section
fun WasmEmitter.emit_table_section(program: WasmProgram) {
    if debug_print {
        debug_print_line("Emit table section")
    }
    let tmp = WasmEmitter::new()

    // vec(table_type)
    tmp.emit_u32(1)
    // table_type -> ref_type limits
    tmp.emit_u32(WType::FuncRef.code)
    tmp.emit_limits(program.lambda_table.len, -1)

    emit_section_header(SectionType::Table, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#memory-section
fun WasmEmitter.emit_memory_section(memory: WMemory) {
    if debug_print {
        debug_print_line("Emit memory section: 1 memory section, ${memory.size} Bytes")
    }
    let tmp = WasmEmitter::new()

    // Only 1 memory is supported in the standard
    tmp.emit_u32(1)
    // Allocate all memory at the beginning with no max defined
    // number of pages of 64 KiB
    tmp.emit_limits(memory.size / (64 * 1024), -1)

    emit_section_header(SectionType::Memory, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#export-section
fun WasmEmitter.emit_export_section(function_exports: List<WFunctionExport>, memory: WMemory) {
    if debug_print {
        debug_print_line("Emit export section: ${function_exports.len} function exports, 1 memory export")
    }
    let tmp = WasmEmitter::new()

    tmp.emit_u32(function_exports.len + 1)

    // Functions
    for exp in function_exports {
        tmp.emit_name(exp.name)
        tmp.emit_byte(0x00)
        tmp.emit_u32(exp.header.index.to_int())
    }

    // Memory
    tmp.emit_name("memory")
    tmp.emit_byte(0x02)
    tmp.emit_u32(0)

    emit_section_header(SectionType::Export, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#start-section
fun WasmEmitter.emit_start_section(start: Id) {
    if debug_print {
        debug_print_line("Emit start section: ${start}")
    }
    let tmp = WasmEmitter::new()

    tmp.emit_u32(start.to_int())

    emit_section_header(SectionType::Start, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#element-section
fun WasmEmitter.emit_elements_section(program: WasmProgram) {
    if debug_print {
        debug_print_line("Emit elements section: ${program.lambda_table.len} elements")
    }
    let tmp = WasmEmitter::new()

    // vec(element_segment)
    tmp.emit_u32(1)

    // elem -> 0 expr vec(func_idx)
    tmp.emit_u32(0)
    // expr
    tmp.add_i32_const(0)
    tmp.emit_byte(0x0B)

    // vec(func_idx)
    tmp.emit_u32(program.lambda_table.len)
    for func_index in program.lambda_table {
        tmp.emit_u32(func_index.to_int())
    }

    emit_section_header(SectionType::Element, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#data-count-section
fun WasmEmitter.emit_data_count_section(memory: WMemory) {
    if debug_print {
        debug_print_line("Emit data count section: ${memory.sections.len} data sections")
    }
    let tmp = WasmEmitter::new()

    // Numbers of data sections
    tmp.emit_u32(memory.sections.len)

    emit_section_header(SectionType::DataCount, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#code-section
fun WasmEmitter.emit_code_section(functions: List<WFunction>) {
    if debug_print {
        debug_print_line("Emit code section: ${functions.len} functions")
    }
    let tmp = WasmEmitter::new()

    tmp.emit_u32(functions.len)
    for func in functions {
        tmp.emit_code(func)
    }

    emit_section_header(SectionType::Code, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#code-section
fun WasmEmitter.emit_code(func: WFunction) {
    if debug_print {
        debug_print_line("Emit code for function ${func.header.index}: ${func.locals.len} locals, offset = ${buffer.len}")
    }
    let tmp = WasmEmitter::new()

    tmp.emit_locals(func.locals)
    tmp.emit_expr(func)

    emit_u32(tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/modules.html#binary-local
fun WasmEmitter.emit_locals(locals: List<WVar>) {
    if debug_print {
        debug_print_line("Emit locals: ${locals.len} locals")
    }
    let non_params = locals.filter @{ it -> it.kind != WVarKind::Param }

    emit_u32(non_params.len)
    for l in non_params {
        emit_u32(1)
        emit_byte(l.wasm_type.code)
    }
}

// https://webassembly.github.io/spec/core/binary/instructions.html#expression
fun WasmEmitter.emit_expr(func: WFunction) {
    if debug_print {
        debug_print_line("Emit expression")
    }
    emit(func.bytecode)
    // end opcode: WOpcode::End
    emit_byte(0x0B)
}

// https://webassembly.github.io/spec/core/binary/modules.html#data-section
fun WasmEmitter.emit_data_section(memory: WMemory) {
    if debug_print {
        debug_print_line("Emit data section: ${memory.sections.len} data sections")
    }
    let tmp = WasmEmitter::new()

    tmp.emit_u32(memory.sections.len)
    for sec in memory.sections {
        // Active data section
        tmp.emit_u32(0)
        // Offset, must be an expression like (i32.const 0)
        tmp.add_i32_const(sec.offset)
        tmp.emit_byte(0x0B)
        // Data
        tmp.emit_bytes(sec.data)
    }

    emit_section_header(SectionType::Data, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/appendix/custom.html#name-section
fun WasmEmitter.emit_custom_section_names(program: WasmProgram) {
    if debug_print {
        debug_print_line("Emit custom section: names")
    }
    let tmp = WasmEmitter::new()

    tmp.emit_name("name")

    // vec(nameassoc)
    let func = WasmEmitter::new()
    // vec(indirectnameassoc)
    let locals = WasmEmitter::new()

    // namemap
    func.emit_u32(program.functions.len)
    locals.emit_u32(program.functions.len)

    for wfunc in program.functions {
        func.emit_u32(wfunc.header.index.to_int())
        func.emit_name(wfunc.name)

        locals.emit_u32(wfunc.header.index.to_int())
        // idx namemap
        locals.emit_u32(wfunc.locals.len)
        for wvar in wfunc.locals {
            locals.emit_u32(wvar.index.to_int())
            locals.emit_name(wvar.name)
        }
    }

    // Subsection Header: funcnamesubsec
    tmp.emit_byte(0x01)
    tmp.emit_u32(func.buffer.len)
    tmp.emit(func)

    // Subsection Header: localnamesubsec
    tmp.emit_byte(0x02)
    tmp.emit_u32(locals.buffer.len)
    tmp.emit(locals)

    emit_section_header(SectionType::Custom, tmp.buffer.len)
    emit(tmp)
}

// https://webassembly.github.io/spec/core/binary/values.html#names
fun WasmEmitter.emit_name(name: String) {
    // names are just a vec of bytes that must be encoded in UTF-8, Strings are already UTF-8
    emit_bytes(name.to_bytes())
}

// https://webassembly.github.io/spec/core/binary/conventions.html#vectors
fun WasmEmitter.emit_bytes(bytes: List<Byte>) {
    emit_u32(bytes.len)
    buffer.ensure_capacity(buffer.len + bytes.len)
    repeat bytes.len {
        buffer[] = bytes[it]!!
    }
}

// https://webassembly.github.io/spec/core/binary/values.html#integers
fun WasmEmitter.emit_u32(value: Int) {
    // unsigned LEB128 encoding
    loop {
        let byte = value & 0x7F
        value = value >>> 7

        if value != 0 {
            emit_byte(byte | 0x80)
        } else {
            emit_byte(byte)
        }

        if value == 0 {
            break
        }
    }

    test! "LEB128 encoding" {
        let tests = [
            Pair::of(0, [0x00.to_byte()]),
            Pair::of(0x7F, [0x7F.to_byte()]),
            Pair::of(0x80, [0x80.to_byte(), 0x01.to_byte()]),
            Pair::of(0x85, [0x85.to_byte(), 0x01.to_byte()]),
            Pair::of(0x2000, [0x80.to_byte(), 0x40.to_byte()]),
            Pair::of(0x3FFF, [0xFF.to_byte(), 0x7F.to_byte()]),
            Pair::of(0x4000, [0x80.to_byte(), 0x80.to_byte(), 0x01.to_byte()]),
            Pair::of(0x98765, [0xE5.to_byte(), 0x8E.to_byte(), 0x26.to_byte()]),
            Pair::of(0x1F0000, [0x80.to_byte(), 0x80.to_byte(), 0x7C.to_byte()]),
            Pair::of(0x1FFFFFFF, [0xFF.to_byte(), 0xFF.to_byte(), 0xFF.to_byte(), 0xFF.to_byte(), 0x01.to_byte()]),
        ]
        repeat tests.len {
            let e = WasmEmitter::new()
            e.emit_u32(tests[it]!!.first)

            check(e.buffer == tests[it]!!.second) @{ "Failed to encode ${tests[it]!!.first} as LEB128" }
        }
    }
}

// https://webassembly.github.io/spec/core/binary/values.html#integers
fun WasmEmitter.emit_i32(value: Int) {
    // signed LEB128 encoding
    loop {
        let byte = value & 0x7F
        value = value >> 7

        let end = (value == 0 && (byte & 0x40) == 0) || (value == -1 && (byte & 0x40) != 0)

        emit_byte(if end { byte } else { byte | 0x80 })

        if end {
            break
        }
    }

    test! "signed LEB128 encoding" {
        let tests = [
            Pair::of(0, [0x00.to_byte()]),
            Pair::of(1, [0x01.to_byte()]),
            Pair::of(-1, [0x7F.to_byte()]),
            Pair::of(-4, [0x7C.to_byte()]),
            Pair::of(-999999, [0xC1.to_byte(), 0xFB.to_byte(), 0x42.to_byte()]),
        ]

        repeat tests.len {
            let e = WasmEmitter::new()
            e.emit_i32(tests[it]!!.first)

            check(e.buffer == tests[it]!!.second) @{ "Failed to encode ${tests[it]!!.first} as LEB128" }
        }
    }
}

fun WasmEmitter.emit_u64(value: Long) {
    // unsigned LEB128 encoding
    loop {
        let byte = (value & 0x7FL).to_int()
        value = value >> 7L

        if value != 0L {
            emit_byte(byte | 0x80)
        } else {
            emit_byte(byte)
        }

        if value == 0L {
            break
        }
    }
}

fun WasmEmitter.emit_i64(value: Long) {
    // signed LEB128 encoding
    loop {
        let byte = (value & 0x7FL).to_int()
        value = value >> 7L

        let more = (byte & 0x40) != 0
        if value != 0L || more {
            emit_byte(byte | 0x80)
        } else {
            emit_byte(byte)
        }

        if value == 0L && !more {
            break
        }
    }
}

// https://webassembly.github.io/spec/core/binary/values.html#floating-point
fun WasmEmitter.emit_f32(value: Float) {
    let int = value.reinterpret_as_int()
    buffer.ensure_capacity(buffer.len + 4)

    // Directly  IEEE 754 in little-endian
    emit_byte(int & 0xFF)
    int = int >>> 8
    emit_byte(int & 0xFF)
    int = int >>> 8
    emit_byte(int & 0xFF)
    int = int >>> 8
    emit_byte(int & 0xFF)
}

// https://webassembly.github.io/spec/core/binary/values.html#floating-point
fun WasmEmitter.emit_f64(value: Float) {
    // We don't support 64bit floating point numbers at the moment
    // So we will emit a 64 bit double, but use the 32 bit float value, loosing precision if needed
    let int = value.reinterpret_as_int()
    let sign = (int >> 31) & 0x1
    let exponent = (int >> 23) & 0xFF
    let fraction = int & 0x7FFFFF

    // Adjust the exponent
    let double_exponent = exponent - 127 + 1023

    // Construct the 64-bit double
    let double_long: Long = (sign.to_long() << 63L) | (double_exponent.to_long() << 52L) | (fraction.to_long() << 29L)

    buffer.ensure_capacity(buffer.len + 8)

    // Write the 64-bit double to the buffer in little-endian order
    repeat 8 {
        let shift = it.to_long() * 8L
        emit_byte((double_long >> shift).to_int() & 0xFF)
    }
}

// https://webassembly.github.io/spec/core/binary/types.html#function-types
fun WasmEmitter.emit_functype(func: WFunctionHeader) {
    // Byte 0x60, vec of params and vec of results
    emit_byte(0x60)
    emit_result_type(func.params)
    emit_result_type(func.results)
}

// https://webassembly.github.io/spec/core/binary/types.html#result-types
fun WasmEmitter.emit_result_type(types: List<WType>) {
    emit_u32(types.len)
    for t in types {
        emit_byte(t.code)
    }
}

// https://webassembly.github.io/spec/core/binary/types.html#limits
// max == -1 means no max
fun WasmEmitter.emit_limits(min: Int, max: Int) {
    if max != -1 {
        emit_byte(0x01)
        emit_u32(min)
        emit_u32(max)
    } else {
        emit_byte(0x00)
        emit_u32(min)
    }
}

// Copy the content of another emitter into this one
fun WasmEmitter.emit(other: WasmEmitter) {
    let aux = other.buffer
    buffer.ensure_capacity(buffer.len + aux.len)

    repeat aux.len {
        buffer[] = aux[it]!!
    }

    debug_buffer[] = other.debug_buffer
}

fun WasmEmitter.emit_byte(value: Int) {
    buffer[] = value.to_byte()
}