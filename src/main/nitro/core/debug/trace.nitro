
mod Trace {
    @Extern [lib: "core", name: "trace_enter"]
    fun trace_enter(func_info: String)  {}

    @Extern [lib: "core", name: "trace_exit"]
    fun trace_exit(func_info: String)  {}

    @Extern [lib: "core", name: "trace_get_stacktrace"]
    fun trace_get_stacktrace(): String {}

    @Extern [lib: "core", name: "trace_print_stack_trace"]
    fun print_stack_trace()

    // The compiler inserts calls to this function at the start of every function
    fun enter_function(func_info: String) {
        Trace::trace_enter(func_info);
    }

    // The compiler inserts calls to this function at the end of every function
    fun exit_function(func_info: String) {
        Trace::trace_exit(func_info);
    }

    // Returns the current stack trace, or at least the information that we have
    // If the compiler has trace disabled, then this will return an empty list
    fun get_stack_trace(): List<String> {
        ret Trace::trace_get_stacktrace().split("\n")
    }
}