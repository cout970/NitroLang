
// A simple string builder that can be used to efficiently create strings
struct StringBuilder {
    bytes: Array<Byte>
    bytes_len: Int
}

// Creates a new StringBuilder
fun StringBuilder::new(): StringBuilder {
    ret StringBuilder @[
        bytes: Array::new(16),
        bytes_len: 0
    ]
}

// Creates a new StringBuilder, call the lambda to collect the string contents, and return the final string
fun build_string(func: StringBuilder.() -> Nothing): String {
    let builder = StringBuilder::new()
    func(builder)
    ret builder.to_string()
}

// Ensures that the internal buffer has enough capacity to store the required number of bytes
fun StringBuilder.ensure_capacity(required_capacity: Int) {
    if bytes.len >= required_capacity {
        ret
    }

    let new_capacity = bytes.len
    while new_capacity < required_capacity {
        new_capacity *= 2
    }

    let new_bytes = Array::new(new_capacity)

    repeat bytes.len {
        new_bytes[it] = bytes[it]
    }

    bytes = new_bytes
}

// Removes the last `amount` characters from the internal buffer
fun StringBuilder.remove_last(amount: Int) {
    bytes_len = max(0, bytes_len - amount)
}

// Remove leading whitespace from the internal buffer
fun StringBuilder.trimEnd() {
    while bytes_len > 0 {
        let last = bytes[bytes_len - 1].to_int()
        if last != a" " && last != a"\n" && last != a"\t" && last != a"\r" {
            break
        }
        bytes_len -= 1
    }
}

// Adds a single character to the internal buffer
// https://stackoverflow.com/a/42013433/13195330
fun StringBuilder.add(c: Char) {
    let code = c.to_int()
    
    if code <= 0x7F {
        ensure_capacity(bytes_len + 1)
        /* 0xxxxxxx */
        bytes[bytes_len] = code.to_byte()
        bytes_len += 1
        ret
    } 
    if code <= 0x7FF {
        ensure_capacity(bytes_len + 2)
        /* 110xxxxx */
        bytes[bytes_len]     = (0xC0 | (code >> 6)).to_byte()
        /* 10xxxxxx */
        bytes[bytes_len + 1] = (0x80 | (code & 0x3F)).to_byte()
        bytes_len += 2
        ret
    } 
    if code <= 0xFFFF {
        ensure_capacity(bytes_len + 3)
        /* 1110xxxx */
        bytes[bytes_len]     = (0xE0 | (code >> 12)).to_byte()
        /* 10xxxxxx */
        bytes[bytes_len + 1] = (0x80 | ((code >> 6) & 0x3F)).to_byte()
        /* 10xxxxxx */
        bytes[bytes_len + 2] = (0x80 | (code & 0x3F)).to_byte()
        bytes_len += 3
        ret
    } 
    if code <= 0x10FFFF {
        ensure_capacity(bytes_len + 4)
        /* 11110xxx */
        bytes[bytes_len]     = (0xF0 | (code >> 18)).to_byte()
        /* 10xxxxxx */
        bytes[bytes_len + 1] = (0x80 | ((code >> 12) & 0x3F)).to_byte()
        /* 10xxxxxx */
        bytes[bytes_len + 2] = (0x80 | ((code >> 6) & 0x3F)).to_byte()
        /* 10xxxxxx */
        bytes[bytes_len + 3] = (0x80 | (code & 0x3F)).to_byte()
        bytes_len += 4
        ret
    }
    unreachable()
}

// Adds a string to the internal buffer
fun StringBuilder.add(str: String) {
    ensure_capacity(bytes_len + str.bytes_len)

    repeat str.bytes_len {
        bytes[bytes_len + it] = str.utf8_data[it]
    }

    bytes_len += str.bytes_len
}

// Adds a byte to the internal buffer, this may create an invalid state,
// this functions should be used only to append a stream of bytes that are known to be valid UTF-8
fun StringBuilder.unsafe_add_utf8_byte(byte: Byte) {
    ensure_capacity(bytes_len + 1)
    bytes[bytes_len] = byte
    bytes_len += 1
}

// Adds a substring of a string to the internal buffer
fun StringBuilder.add_substring(str: String, offset: Int, substring_len: Int) {
    offset = offset.clamp(0, str.bytes_len)
    substring_len = substring_len.clamp(0, str.bytes_len - offset)

    ensure_capacity(bytes_len + substring_len)

    repeat substring_len {
        bytes[bytes_len + it] = str.utf8_data[offset + it]
    }

    bytes_len += substring_len
}

// Any other generic item with to_string()
fun <#T: ToString> StringBuilder.add(value: #T) {
    add(value.to_string())
}

// Copies the contents of another StringBuilder to the internal buffer
fun StringBuilder.add(builder: StringBuilder) {
    ensure_capacity(bytes_len + builder.bytes_len)

    repeat builder.bytes_len {
        bytes[bytes_len + it] = builder.bytes[it]
    }

    bytes_len += builder.bytes_len
}

// Adds an integer to the internal buffer, in base 10
fun StringBuilder.add(value: Int) {
    add_int_in_base(10, value)
}

// Adds an integer to the internal buffer, in the given base
fun StringBuilder.add_int_in_base(base: Int, value: Int) {
    check(base >= 2 && base <= 36, "Base must be in the range of 2 to 36")

    if value == 0 {
        this[] = "0"
        ret
    }

    // The maximum number of posible digits is 32 (32 bits in base 2), so we can preallocate the array
    let digits: Array<Char> = Array::new(32)
    let digits_len = 0
    let aux = value

    if aux > 0 {
        while aux != 0 {
            let digit = aux % base
            let char = digit.to_digit_in_base(base)

            digits[digits_len] = char
            digits_len += 1
            aux /= base
        }

        repeat digits_len {
            this[] = digits[digits_len - it - 1]
        }
    } else {
        // Negative numbers get a special case, because the min int value cannot be negated
        while aux != 0 {
            let digit = -(aux % base)
            let char = digit.to_digit_in_base(base)

            digits[digits_len] = char
            digits_len += 1
            aux /= base
        }

        this[] = "-"
        repeat digits_len {
            this[] = digits[digits_len - it - 1]
        }
    }
}

// Is the internal buffer empty?
fun StringBuilder.is_empty(): Boolean = bytes_len == 0

// Is the internal buffer not empty?
fun StringBuilder.is_not_empty(): Boolean = bytes_len != 0

// Converts the internal buffer to a string
fun StringBuilder.to_string(): String {
    let new_bytes = Array::new(bytes_len)

    repeat bytes_len {
        new_bytes[it] = bytes[it]
    }

    ret String @[
        bytes_len,
        utf8_data: new_bytes,
        hash_cache: -1,
    ]
}
