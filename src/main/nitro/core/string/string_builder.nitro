
// A simple string builder that can be used to efficiently create strings
struct StringBuilder {
    bytes: Array<Byte>
    len: Int
}

// Creates a new StringBuilder
fun StringBuilder::new(): StringBuilder {
    ret StringBuilder @[
        bytes: Array::new(16),
        len: 0
    ]
}

// Destructor
fun StringBuilder.deinit() {
    len = 0
    bytes.free()
}

// Creates a new StringBuilder, call the lambda to collect the string contents, and return the final string
fun build_string(func: StringBuilder.() -> Nothing): String {
    let builder = StringBuilder::new()
    func(builder)
    ret builder.to_string()
}

// Ensures that the internal buffer has enough capacity to store the required number of bytes
fun StringBuilder.ensure_capacity(required_capacity: Int) {
    if bytes.len >= required_capacity {
        ret
    }

    let new_capacity = bytes.len
    while new_capacity < required_capacity {
        new_capacity *= 2
    }

    let new_bytes = Array::new(new_capacity)

    repeat bytes.len {
        new_bytes[it] = bytes[it]
    }

    bytes = new_bytes
}

// Removes the last `amount` characters from the internal buffer
fun StringBuilder.remove_last(amount: Int) {
    len = max(0, len - amount)
}

// Remove leading whitespace from the internal buffer
fun StringBuilder.trimEnd() {
    while len > 0 {
        let last = bytes[len - 1].to_int()
        if last != a" " && last != a"\n" && last != a"\t" && last != a"\r" {
            break
        }
        len -= 1
    }
}

// Adds a single character to the internal buffer
// https://stackoverflow.com/a/42013433/13195330
fun StringBuilder.add(c: Char) {
    let code = c.to_int()

    if code <= 0x7F {
        ensure_capacity(len + 1)
        /* 0xxxxxxx */
        bytes[len] = code.to_byte()
        len += 1
        ret
    }
    if code <= 0x7FF {
        ensure_capacity(len + 2)
        /* 110xxxxx */
        bytes[len]     = (0xC0 | (code >> 6)).to_byte()
        /* 10xxxxxx */
        bytes[len + 1] = (0x80 | (code & 0x3F)).to_byte()
        len += 2
        ret
    }
    if code <= 0xFFFF {
        ensure_capacity(len + 3)
        /* 1110xxxx */
        bytes[len]     = (0xE0 | (code >> 12)).to_byte()
        /* 10xxxxxx */
        bytes[len + 1] = (0x80 | ((code >> 6) & 0x3F)).to_byte()
        /* 10xxxxxx */
        bytes[len + 2] = (0x80 | (code & 0x3F)).to_byte()
        len += 3
        ret
    }
    if code <= 0x10FFFF {
        ensure_capacity(len + 4)
        /* 11110xxx */
        bytes[len]     = (0xF0 | (code >> 18)).to_byte()
        /* 10xxxxxx */
        bytes[len + 1] = (0x80 | ((code >> 12) & 0x3F)).to_byte()
        /* 10xxxxxx */
        bytes[len + 2] = (0x80 | ((code >> 6) & 0x3F)).to_byte()
        /* 10xxxxxx */
        bytes[len + 3] = (0x80 | (code & 0x3F)).to_byte()
        len += 4
        ret
    }
    unreachable()
}

// Adds a string to the internal buffer
fun StringBuilder.add(str: String) {
    ensure_capacity(len + str.len)

    repeat str.len {
        bytes[len + it] = str.utf8_data[it]
    }

    len += str.len
}

// Adds a byte to the internal buffer, this may create an invalid state,
// this functions should be used only to append a stream of bytes that are known to be valid UTF-8
fun StringBuilder.unsafe_add_utf8_byte(byte: Byte) {
    ensure_capacity(len + 1)
    bytes[len] = byte
    len += 1
}

// Adds a substring of a string to the internal buffer
fun StringBuilder.add_substring(str: String, offset: Int, substring_len: Int) {
    offset = offset.clamp(0, str.len)
    substring_len = substring_len.clamp(0, str.len - offset)

    ensure_capacity(len + substring_len)

    repeat substring_len {
        bytes[len + it] = str.utf8_data[offset + it]
    }

    len += substring_len
}

// Any other generic item with to_string()
fun <#T: ToString> StringBuilder.add(value: #T) {
    add(value.to_string())
}

// Copies the contents of another StringBuilder to the internal buffer
fun StringBuilder.add(builder: StringBuilder) {
    ensure_capacity(len + builder.len)

    repeat builder.len {
        bytes[len + it] = builder.bytes[it]
    }

    len += builder.len
}

// Adds an integer to the internal buffer, in base 10
fun StringBuilder.add(value: Int) {
    add_int_in_base(10, value)
}

// Adds an integer to the internal buffer, in base 10, with a minimum number of digits
// If the number is negative, the '-' sign is added without affecting the count of digits
// If the number is bigger than the number of digits, the number is **NOT** cropped
fun StringBuilder.add_int_with_pad(value: Int, min_digits_len: Int) {
    let buff = StringBuilder::new()

    if value >= 0 {
        buff[] = value
    } else {
        add("-")
        buff[] = -value
    }

    repeat min_digits_len - buff.len {
        this[] = "0"
    }
    this[] = buff
}

fun StringBuilder.add_hex(value: Int) = add_hex(value, 8)

fun StringBuilder.add_hex(value: Int, min_digits_len: Int) {
    let buff = StringBuilder::new()

    if value >= 0 {
        buff.add_int_in_base(16, value)
    } else {
        // Unsigned value, split in 2
        let upper = (value >> 16) & 0x0000FFFF
        let lower = value & 0x0000FFFF

        // Lower part
        let buff2 = StringBuilder::new()
        buff2.add_int_in_base(16, lower)

        // Add padding, to align the 2 parts
        if upper > 0 {
            repeat 4 - buff2.len {
                buff2[] = "0"
           }
        }

        // Add the upper part
        buff.add_int_in_base(16, upper)

        // Add the lower part
        buff[] = buff2
    }

    repeat min_digits_len - buff.len {
        this[] = "0"
    }
    this[] = buff
}


// Adds an integer to the internal buffer, in the given base
fun StringBuilder.add_int_in_base(base: Int, value: Int) {
    check(base >= 2 && base <= 36, "Base must be in the range of 2 to 36")

    if value == 0 {
        this[] = "0"
        ret
    }

    // The maximum number of posible digits is 32 (32 bits in base 2), so we can preallocate the array
    let digits: Array<Char> = Array::new(32)
    defer digits.free()
    let digits_len = 0
    let aux = value

    if aux > 0 {
        while aux != 0 {
            let digit = aux % base
            let char = digit.to_digit_in_base(base)

            digits[digits_len] = char
            digits_len += 1
            aux /= base
        }

        repeat digits_len {
            this[] = digits[digits_len - it - 1]
        }
    } else {
        // Negative numbers get a special case, because the min int value cannot be negated
        while aux != 0 {
            let digit = -(aux % base)
            let char = digit.to_digit_in_base(base)

            digits[digits_len] = char
            digits_len += 1
            aux /= base
        }

        this[] = "-"
        repeat digits_len {
            this[] = digits[digits_len - it - 1]
        }
    }
}

// Adds a long integer to the internal buffer, in base 10
fun StringBuilder.add(value: Long) {
    add_long_in_base(10L, value)
}

// Adds a long integer to the internal buffer, in the given base
fun StringBuilder.add_long_in_base(base: Long, value: Long) {
    check(base >= 2L && base <= 36L, "Base must be in the range of 2 to 36")

    if value == 0L {
        this[] = "0"
        ret
    }

    // The maximum number of posible digits is 64 (64 bits in base 2), so we can preallocate the array
    let digits: Array<Char> = Array::new(64)
    defer digits.free()
    let digits_len = 0
    let aux = value

    if aux > 0L {
        while aux != 0L {
            let digit = aux % base
            let char = digit.to_digit_in_base(base)

            digits[digits_len] = char
            digits_len += 1
            aux /= base
        }

        repeat digits_len {
            this[] = digits[digits_len - it - 1]
        }
    } else {
        // Negative numbers get a special case, because the min int value cannot be negated
        while aux != 0L {
            let digit = -(aux % base)
            let char = digit.to_digit_in_base(base)

            digits[digits_len] = char
            digits_len += 1
            aux /= base
        }

        this[] = "-"
        repeat digits_len {
            this[] = digits[digits_len - it - 1]
        }
    }
}

fun StringBuilder.add(value: Float) {
    // NaN
    if value.is_nan() {
        this[] = "NaN"
        ret
    }

    // +Inf or -Inf
    if value.is_infinite() {
        if value < 0f {
            this[] = "-"
        }
        this[] = "Infinity"
        ret
    }

    // 0.0
    if value == 0.0f {
        this[] = "0"
        ret
    }

    // Negative numbers are the same as the positive ones, but with a '-' at the beginning
    if value < 0f {
        this[] = "-"
        add(-value)
        ret
    }

    // If the number is an integer, we just print the integer part
    if value.floor().is_safe_integer() {
        // The integer part of the number
        let int_part = value.floor()
        let frac_value = value - int_part

        add_int_in_base(10, int_part.to_int())

        // If the fractional part is 0, we just print the integer part
        if frac_value.abs() < 0.000001f {
            ret
        }

        this[] = "."

        // The fractional part of the number
        let max_frac_digits = 6
        let frac_limit = 0.000001f

        repeat max_frac_digits {
            frac_value *= 10f
            frac_limit *= 10f
            let digit = frac_value.floor().to_int()
            this[] = (digit + a"0").to_char()
            frac_value -= digit.to_float()

            if frac_value.abs() < frac_limit {
                break
            }
        }

        ret
    }

    // The number is too big to be printed as an integer, so we print it in scientific notation
    let exp = 0
    let mantissa = value

    // Normalize the number
    while mantissa >= 10.0f {
        mantissa /= 10.0f
        exp += 1
    }

    while mantissa < 1.0f {
        mantissa *= 10.0f
        exp -= 1
    }


    add(mantissa)
    this[] = "e"
    add_int_in_base(10, exp)
}

// Add a string to the beginning of the internal buffer
fun StringBuilder.add_first(value: String) {
    ensure_capacity(len + value.len)

    // Move existing bytes to the right
    repeat len {
        let i = len - it - 1
        bytes[i + value.len] = bytes[i]
    }

    // Add the new bytes
    repeat value.len {
        bytes[it] = value.utf8_data[it]
    }

    len += value.len
}

// Wrap the current string with a prefix and suffix
fun StringBuilder.wrap(prefix: String, suffix: String) {
    add_first(prefix)
    add(suffix)
}

// Is the internal buffer empty?
fun StringBuilder.is_empty(): Boolean = len == 0

// Is the internal buffer not empty?
fun StringBuilder.is_not_empty(): Boolean = len != 0

// Clears the internal buffer
fun StringBuilder.clear() {
    len = 0
}

// Converts the internal buffer to a string
fun StringBuilder.to_string(): String {
    let new_bytes = Array::new(len)

    repeat len {
        new_bytes[it] = bytes[it]
    }

    ret String @[
        len,
        utf8_data: new_bytes,
        hash_cache: -1,
    ]
}
