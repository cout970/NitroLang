
// This type represents a single character encoded as a unicode code point
@ValueType
struct Char {
    unicode_code_point: Int
}

// This function converts a Char to an integer, exposing the underlying unicode code point value
fun Char.to_int(): Int {
    ret this.unicode_code_point
}

// This function converts an integer to a Char instance
fun Int.to_char(): Char {
    ret Char @[unicode_code_point: this]
}

// Creates an string with only this character
fun Char.to_string(): String {
    let builder = StringBuilder::new()
    builder[] = this
    ret builder.to_string()
}

// Creates an string by joining this and other character
fun Char.plus(other: Char): String {
    let builder = StringBuilder::new()
    builder[] = this
    builder[] = other
    ret builder.to_string()
}

// Order based on unicode code point
// This implementation ignores the complex rules of unicode for ordering, to provide simple ordering that performs well
fun Char.get_ordering(other: Char): Ordering = this.to_int() <=> other.to_int()

// Hash based on unicode code point
fun Char.get_hash(): Int = to_int()