
// This type is used to represent a string in the language
// Strings are immutable and are stored as UTF-8 encoded bytes
struct String {
    byte_len: Int
    ptr: RawArray<Byte>
}

// Tag for types that can be converted to a string
tag ToString {
    fun This.to_string(): String
}

// Returns the length of the string in bytes
fun String.byte_len(): Int {
    ret this.byte_len
}

// Reads a single byte from the string
// This is unrecommended as it does not account for UTF-8 encoding
fun String.get_byte(index: Int): Byte {
    ret this.ptr.get(index)
}

// tag Slice<Char>

// Returns the length of the string in chars (unicode codepoints)
fun String.len(): Int {
    ret this.codepoint_len()
}

// Gets a single char (unicode codepoint) from the string
// This operation is slow as it has to decode the UTF-8 encoding of the string
fun String.get(index: Int): Char {
    ret this.get_codepoint(index).to_char()
}

// Codepoints

// Returns the length of the string in chars (unicode codepoints)
@Extern [lib: "core", name: "string_codepoint_len"]
fun String.codepoint_len(): Int {}

// Gets a single char (unicode codepoint) from the string
@Extern [lib: "core", name: "string_get_codepoint"]
fun String.get_codepoint(index: Int): Int {}

// Utils

// Joins two strings together
@Extern [lib: "core", name: "string_concat_string"]
fun String.concat(other: String): String {}

// Joins a string and a char together
@Extern [lib: "core", name: "string_concat_char"]
fun String.concat(char: Char): String {}

// Joins two strings together
fun String.plus(other: String): String = this.concat(other)

// Joins a string and a char together
fun String.plus(char: Char): String  = this.concat(char)

// Checks if a string is equal to another string
@Extern [lib: "core", name: "string_is_equal"]
fun String.is_equal(other: String): Boolean {}

// Checks if a string is not equal to another string
@Extern [lib: "core", name: "string_is_not_equal"]
fun String.is_not_equal(other: String): Boolean {}

// Checks if the string has no characters
fun String.is_empty(): Boolean = this.byte_len == 0

// Checks if the string has at least one character
fun String.is_not_empty(): Boolean = this.byte_len != 0

// Checks if the string has at least one printable character
fun String.is_blank(): Boolean {
    let total_len = this.byte_len
    let cursor = 0

    while cursor < total_len {
        let byte = this.get_byte(cursor).to_int()

        // Ascii space is 32, anything below that is a control character
        // UTF-8 codepoints will start with a byte bigger than 127,
        // we treat them as printable, even if there are a lot of exceptions
        if byte > 32 {
            ret false
        }

        cursor += 1
    }

    ret true
}

// Computes the hash value of a string, to be used in hash tables
fun String.get_hash(): Int {
    let hash: Int = 0

    repeat this.byte_len() {
        hash = (31 * hash).bitwise_xor(this.get_byte(it).to_int())
    }

    ret hash
}

// Replace all instances of a string with another string
@Extern [lib: "core", name: "string_replace"]
fun String.replace(find: String, replacement: String): String {}

// Indents all lines of a string with a certain indentation
fun String.indent(indentation: String): String {
    ret indentation.concat(this.replace("\n", "\n$indentation"))
}

// Indents all lines of a string with a certain number of space characters
fun String.indent(spaces: Int): String {
    ret this.indent(" ".mul(spaces))
}

// Remove all whitespace characters from the start and end of a string
@Extern [lib: "core", name: "string_sub_string"]
fun String.substring(start: Int, end: Int): String {}

// Same as substring but with offset and length
fun String.slice(offset: Int, len: Int): String {
    if len < 0 {
        // `len` is negative, so we add it instead of subtracting it
        len = this.byte_len() + len
    }
    ret this.substring(offset, offset + len)
}

// Checks if a string contains a substring at a certain index
fun String.contains_substring_at(at: Int, substring: String): Boolean {
    let substring_len = substring.byte_len()

    if at + substring.byte_len() > this.byte_len() {
        ret false
    }

    let cursor = 0

    while cursor < substring_len {
        if this.get_byte(at + cursor) != substring.get_byte(cursor) {
            ret false
        }

        cursor += 1
    }

    ret true
}

// Gets the index of the first instance of a substring
fun String.index_of(substring: String): Optional<Int> {
    let current = 0
    let total_len = this.byte_len()

    while current < total_len {
        if this.contains_substring_at(current, substring) {
            ret Some(current)
        } else {
            current += 1
        }
    }

    ret None()
}

// Gets the index of the last instance of a substring
fun String.last_index_of(substring: String): Optional<Int> {
    let current = this.byte_len() - substring.byte_len()

    while current >= 0 {
        if this.contains_substring_at(current, substring) {
            ret Some(current)
        } else {
            current -= 1
        }
    }

    ret None()
}

// Checks if a string contains a substring
fun String.contains(substring: String): Boolean {
    ret this.index_of(substring).is_some()
}

// Checks if a string starts with a prefix
fun String.starts_with(prefix: String): Boolean {
    let index = this.index_of(prefix)
    ret index.is_some() && index!! == 0
}

// Checks if a string ends with a suffix
fun String.ends_with(suffix: String): Boolean {
    let index = this.last_index_of(suffix)
    ret index.is_some() && index!! + suffix.byte_len() == this.byte_len()
}

// Adds padding to the start of a string until it reaches a certain length
fun String.pad_start(len: Int, pad_character: Char): String {
    let padding_len = len - this.byte_len()

    if padding_len <= 0 {
        ret this
    }

    let padding = pad_character.to_string() * padding_len
    ret padding.concat(this)
}

// Adds padding to the end of a string until it reaches a certain length
fun String.pad_end(len: Int, pad_character: Char): String {
    let padding_len = len - this.byte_len()

    if padding_len <= 0 {
        ret this
    }

    let padding = pad_character.to_string() * padding_len
    ret this.concat(padding)
}

// Splits a string into a list of strings based on a separator
fun String.split(separator: String): List<String> {
    let list: List<String> = []
    let start: Int = 0
    let cursor: Int = 0
    let total_len = this.byte_len()
    let sep_len = separator.byte_len()

    while cursor < total_len {
        if sep_len == 0 && start == cursor {
            cursor += 1
            continue
        }

        if this.contains_substring_at(cursor, separator) {
            list[] = this.substring(start, cursor)
            start = cursor + sep_len
            cursor = start
        } else {
            cursor += 1
        }
    }

    if start < cursor {
        list[] = this.substring(start, cursor)
    }

    ret list
}

// Remove all whitespace characters from the start and end of the string
fun String.trim(): String {
    ret this.trim_start().trim_end()
}

// Remove all whitespace characters from the start of the string
fun String.trim_start(): String {
    let start = 0
    let total_len = this.byte_len()

    while start < total_len {
        let byte = this.get_byte(start).to_int()

        // Space characters: ' ' \t \n \v \f \r
        if byte != 32 && byte != 9 && byte != 10 && byte != 11 && byte != 12 && byte != 13 {
            break
        }

        start += 1
    }

    ret this.substring(start, total_len)
}

// Remove all whitespace characters from the end of the string
fun String.trim_end(): String {
    let end = this.byte_len() - 1

    while end >= 0 {
        let byte = this.get_byte(end).to_int()

        // Space characters: ' ' \t \n \v \f \r
        if byte != 32 && byte != 9 && byte != 10 && byte != 11 && byte != 12 && byte != 13 {
            break
        }

        end -= 1
    }

    ret this.substring(0, end + 1)
}

// Converts a string to lowercase but only for ASCII characters
@Extern [lib: "core", name: "string_to_ascii_lowercase"]
fun String.to_ascii_lowercase(): String {}

// Converts a string to uppercase but only for ASCII characters
@Extern [lib: "core", name: "string_to_ascii_uppercase"]
fun String.to_ascii_uppercase(): String {}

// Repeat a string a certain amount of times
fun String.mul(amount: Int): String {
    let result: String = ""

    repeat amount {
        result = result.concat(this)
    }

    ret result
}

// Implementation of the ToString tag for strings
fun String.to_string(): String = this

// Converts a string to an integer
// TODO handle 0x, 0o and 0b prefixes
fun String.to_int(): Optional<Int> {
    let result = 0
    let total_len = this.len()
    let cursor = 0
    let sign = 1

    if total_len == 0 {
        ret None()
    }

    if this[cursor].to_int() == a"-" {
        cursor += 1
        sign = -1
    }

    while cursor < total_len {
        let byte = this[cursor].to_int()

        // ignore '_'
        if byte == a"_" {
            cursor += 1
            continue
        }

        if byte < 48 || byte > 57 {
            ret None()
        }

        result = result * 10 + (byte - 48)
        cursor += 1
    }

    ret Some(result * sign)
}

fun String.to_long(): Optional<Long> {
    let result = 0L
    let total_len = this.len()
    let cursor = 0
    let sign = 1L

    if total_len == 0 {
        ret None()
    }

    if this[cursor].to_int() == a"-" {
        cursor += 1
        sign = -1L
    }

    while cursor < total_len {
        let byte = this[cursor].to_int()

        // ignore '_'
        if byte == a"_" {
            cursor += 1
            continue
        }

        if byte < 48 || byte > 57 {
            ret None()
        }

        result = result * 10L + (byte - 48).to_long()
        cursor += 1
    }

    ret Some(result * sign)
}

// TODO handle complex floats
fun String.to_float(): Optional<Float> {
    let result = 0f
    let total_len = this.len()
    let cursor = 0
    let sign = 1f

    if total_len == 0 {
        ret None()
    }

    if this[cursor].to_int() == a"-" {
        cursor += 1
        sign = -1f
    }

    while cursor < total_len {
        let byte = this[cursor].to_int()

        // ignore '_'
        if byte == a"_" {
            cursor += 1
            continue
        }

        if byte < 48 || byte > 57 {
            ret None()
        }

        result = result * 10f + (byte - 48).to_float()
        cursor += 1
    }

    ret Some(result * sign)
}

// Give the ascii (Int) value of the first char of the given string
//
// This is a temporary hack until we support the following syntax:
// - a"M" for the ascii value of 'M'
// - c"M" for the char 'M'
// - b"ABC" gives a byte array with the contents of the string in UTF8
//
fun a(str: List<String>): Int {
    ret str[0]!!.get_byte(0).to_int()
}
