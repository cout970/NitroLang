
// This type is used to represent a string in the language
// Strings are immutable and are stored as UTF-8 encoded bytes
struct String {
    bytes_len: Int
    bytes: Array<Byte>
    hash_cache: Int
}

// Tag for types that can be converted to a string
tag ToString {
    fun This.to_string(): String
}

// Reads a single byte from the string
// This is unrecommended as it does not account for UTF-8 encoding
fun String.get_byte(index: Int): Byte {
    ret bytes[index]
}

// tag Slice<Char>

// Removed for now, since the `len` property doesn't return what you expect and has hidden performance problems
//// Returns the length of the string in chars (unicode codepoints)
//fun String.get_len(): Int = codepoint_len()
//
//// Gets a single char (unicode codepoint) from the string
//// This operation is slow as it has to decode the UTF-8 encoding of the string
//fun String.get(index: Int): Char {
//    ret get_codepoint(index).to_char()
//}

// Codepoints

// Returns the length of the string in chars (unicode codepoints)
@Extern [lib: "core", name: "string_codepoint_len"]
fun String.codepoint_len(): Int {}

// Gets a single char (unicode codepoint) from the string
@Extern [lib: "core", name: "string_get_codepoint"]
fun String.get_codepoint(index: Int): Int {}

// Utils

// Joins two strings together
fun String.concat(other: String): String {
    let total_len = this.bytes_len + other.bytes_len
    let buff: Array<Byte> = Array::new(total_len)

    repeat this.bytes_len {
        buff[it] = this.bytes[it]
    }

    repeat other.bytes_len {
        buff[this.bytes_len + it] = other.bytes[it]
    }

    ret String @[
        bytes_len: total_len,
        bytes: buff,
        hash_cache: -1,
    ]
}

// Joins a string and a char together
@Extern [lib: "core", name: "string_concat_char"]
fun String.concat(char: Char): String {}

// TODO port this from C to Nitro
//static size_t code_to_utf8(unsigned char *const buffer, const unsigned int code)
//{
//    if (code <= 0x7F) {
//        buffer[0] = code;
//        return 1;
//    }
//    if (code <= 0x7FF) {
//        buffer[0] = 0xC0 | (code >> 6);            /* 110xxxxx */
//        buffer[1] = 0x80 | (code & 0x3F);          /* 10xxxxxx */
//        return 2;
//    }
//    if (code <= 0xFFFF) {
//        buffer[0] = 0xE0 | (code >> 12);           /* 1110xxxx */
//        buffer[1] = 0x80 | ((code >> 6) & 0x3F);   /* 10xxxxxx */
//        buffer[2] = 0x80 | (code & 0x3F);          /* 10xxxxxx */
//        return 3;
//    }
//    if (code <= 0x10FFFF) {
//        buffer[0] = 0xF0 | (code >> 18);           /* 11110xxx */
//        buffer[1] = 0x80 | ((code >> 12) & 0x3F);  /* 10xxxxxx */
//        buffer[2] = 0x80 | ((code >> 6) & 0x3F);   /* 10xxxxxx */
//        buffer[3] = 0x80 | (code & 0x3F);          /* 10xxxxxx */
//        return 4;
//    }
//    return 0;
//}

// Joins two strings together
fun String.plus(other: String): String = this.concat(other)

// Joins a string and a char together
fun String.plus(char: Char): String  = this.concat(char)

// Checks if a string is equal to another string
fun String.is_equal(other: String): Boolean {
    if ptr_of(this).address == ptr_of(other).address {
        ret true
    }

    if this.bytes_len != other.bytes_len {
        ret false
    }

    repeat this.bytes_len {
        if this.get_byte(it) != other.get_byte(it) {
            ret false
        }
    }

    ret true
}

// Compares two strings
fun String.get_ordering(other: String): Ordering {
    if this.bytes_len != other.bytes_len {
        ret if this.bytes_len < other.bytes_len { Ordering::Less } else { Ordering::Greater }
    }

    repeat this.bytes_len {
        let this_byte = this.get_byte(it)
        let other_byte = other.get_byte(it)

        if this_byte < other_byte {
            ret Ordering::Less
        }
        if this_byte > other_byte {
            ret Ordering::Greater
        }
    }

    ret Ordering::Equals
}

// Checks if a string is not equal to another string
fun String.is_not_equal(other: String): Boolean = !this.is_equal(other)

// Checks if the string has no characters
fun String.is_empty(): Boolean = bytes_len == 0

// Checks if the string has at least one character
fun String.is_not_empty(): Boolean = bytes_len != 0

// Checks if the string has at least one printable character
fun String.is_blank(): Boolean {
    let total_len = bytes_len
    let cursor = 0

    while cursor < total_len {
        let byte = get_byte(cursor).to_int()

        // Ascii space is 32, anything below that is a control character
        // UTF-8 codepoints will start with a byte bigger than 127,
        // we treat them as printable, even if there are a lot of exceptions
        if byte > 32 {
            ret false
        }

        cursor += 1
    }

    ret true
}

// Computes the hash value of a string, to be used in hash tables
fun String.get_hash(): Int {
    if hash_cache != -1 {
        ret hash_cache
    }

    let hash: Int = 0

    repeat bytes_len {
        hash = (31 * hash).bitwise_xor(get_byte(it).to_int())
    }

    if hash == -1 {
        hash = 0
    }

    hash_cache = hash
    ret hash
}

// Replace all instances of a string with another string
@Extern [lib: "core", name: "string_replace"]
fun String.replace(find: String, replacement: String): String {}

// Indents all lines of a string with a certain indentation
fun String.indent(indentation: String): String {
    ret indentation.concat(replace("\n", "\n$indentation"))
}

// Indents all lines of a string with a certain number of space characters
fun String.indent(spaces: Int): String {
    ret indent(" ".mul(spaces))
}

// Remove all whitespace characters from the start and end of a string
@Extern [lib: "core", name: "string_sub_string"]
fun String.substring(start: Int, end: Int): String {}

// Same as substring but with offset and length
fun String.slice(offset: Int, slice_len: Int): String {
    if slice_len < 0 {
        // `slice_len` is negative, so we add it instead of subtracting it
        slice_len = bytes_len + slice_len
    }
    ret substring(offset, offset + slice_len)
}

// Checks if a string contains a substring at a certain index
fun String.contains_substring_at(at: Int, substring: String): Boolean {
    let substring_len = substring.bytes_len

    if at + substring.bytes_len > bytes_len {
        ret false
    }

    let cursor = 0

    while cursor < substring_len {
        if get_byte(at + cursor) != substring.get_byte(cursor) {
            ret false
        }

        cursor += 1
    }

    ret true
}

// Gets the index of the first instance of a substring
fun String.index_of(substring: String): Optional<Int> {
    let current = 0
    let total_len = bytes_len

    while current < total_len {
        if contains_substring_at(current, substring) {
            ret Some(current)
        } else {
            current += 1
        }
    }

    ret None()
}

// Gets the index of the last instance of a substring
fun String.last_index_of(substring: String): Optional<Int> {
    let current = bytes_len - substring.bytes_len

    while current >= 0 {
        if contains_substring_at(current, substring) {
            ret Some(current)
        } else {
            current -= 1
        }
    }

    ret None()
}

// Checks if a string contains a substring
fun String.contains(substring: String): Boolean {
    ret index_of(substring).is_some()
}

// Checks if a string starts with a prefix
fun String.starts_with(prefix: String): Boolean {
    let index = index_of(prefix)
    ret index.is_some() && index!! == 0
}

// Checks if a string ends with a suffix
fun String.ends_with(suffix: String): Boolean {
    let index = last_index_of(suffix)
    ret index.is_some() && index!! + suffix.bytes_len == bytes_len
}

// Adds padding to the start of a string until it reaches a certain length
fun String.pad_start(pad_len: Int, pad_character: Char): String {
    let padding_len = pad_len - bytes_len

    if padding_len <= 0 {
        ret this
    }

    let padding = pad_character.to_string() * padding_len
    ret padding.concat(this)
}

// Adds padding to the end of a string until it reaches a certain length
fun String.pad_end(pad_len: Int, pad_character: Char): String {
    let padding_len = pad_len - bytes_len

    if padding_len <= 0 {
        ret this
    }

    let padding = pad_character.to_string() * padding_len
    ret concat(padding)
}

// Splits a string into a list of strings based on a separator
fun String.split(separator: String): List<String> {
    let list: List<String> = []
    let start: Int = 0
    let cursor: Int = 0
    let total_len = bytes_len
    let sep_len = separator.bytes_len

    while cursor < total_len {
        if sep_len == 0 && start == cursor {
            cursor += 1
            continue
        }

        if contains_substring_at(cursor, separator) {
            list[] = substring(start, cursor)
            start = cursor + sep_len
            cursor = start
        } else {
            cursor += 1
        }
    }

    if start < cursor {
        list[] = substring(start, cursor)
    }

    ret list
}

// Remove all whitespace characters from the start and end of the string
fun String.trim(): String {
    ret trim_start().trim_end()
}

// Remove all whitespace characters from the start of the string
fun String.trim_start(): String {
    let start = 0
    let total_len = bytes_len

    while start < total_len {
        let byte = get_byte(start).to_int()

        // Space characters: ' ' \t \n \v \f \r
        if byte != 32 && byte != 9 && byte != 10 && byte != 11 && byte != 12 && byte != 13 {
            break
        }

        start += 1
    }

    ret substring(start, total_len)
}

// Remove all whitespace characters from the end of the string
fun String.trim_end(): String {
    let end = bytes_len - 1

    while end >= 0 {
        let byte = get_byte(end).to_int()

        // Space characters: ' ' \t \n \v \f \r
        if byte != 32 && byte != 9 && byte != 10 && byte != 11 && byte != 12 && byte != 13 {
            break
        }

        end -= 1
    }

    ret substring(0, end + 1)
}

// Converts a string to lowercase but only for ASCII characters
@Extern [lib: "core", name: "string_to_ascii_lowercase"]
fun String.to_ascii_lowercase(): String {}

// Converts a string to uppercase but only for ASCII characters
@Extern [lib: "core", name: "string_to_ascii_uppercase"]
fun String.to_ascii_uppercase(): String {}

// Repeat a string a certain amount of times
fun String.mul(amount: Int): String {
    let result: String = ""

    repeat amount {
        result = result.concat(this)
    }

    ret result
}

// Implementation of the ToString tag for strings
fun String.to_string(): String = this

// Converts a string to an integer, assumes base 10 and only [_\-\+0-9] chars are allowed
// TODO handle 0x, 0o and 0b prefixes
fun String.to_int(): Optional<Int> {
    let result = 0
    let total_len = bytes_len
    let cursor = 0
    let sign = 1

    if total_len == 0 {
        ret None()
    }

    let first = get_byte(cursor).to_int()

    if first == a"-" {
        cursor += 1
        sign = -1
    }

    if first == a"+" {
        cursor += 1
    }

    while cursor < total_len {
        let byte = get_byte(cursor).to_int()

        // ignore '_'
        if byte == a"_" {
            cursor += 1
            continue
        }

        if byte < a"0" || byte > a"9" {
            ret None()
        }

        result = result * 10 + (byte - a"0")
        cursor += 1
    }

    ret Some(result * sign)
}

// Converts a string to an integer, only [_\-\+0-9a-zA-Z] chars are allowed
fun String.to_int_in_base(base: Int): Optional<Int> {
    let result = 0
    let total_len = bytes_len
    let cursor = 0
    let sign = 1

    if total_len == 0 {
        ret None()
    }

    let first = get_byte(cursor).to_int()

    if first == a"-" {
        cursor += 1
        sign = -1
    }

    if first == a"+" {
        cursor += 1
    }

    while cursor < total_len {
        let byte = get_byte(cursor).to_int()

        // ignore '_'
        if byte == a"_" {
            cursor += 1
            continue
        }

        if byte >= a"0" && byte <= a"9" {
            let digit_value = (byte - a"0")

            // check if the digit is valid for the base
            if digit_value >= base {
                ret None()
            }

            result = result * base + digit_value
            cursor += 1
            continue
        }

        if byte >= a"a" && byte <= a"z" {
            let digit_value = (byte - a"a" + 10)

            // check if the digit is valid for the base
            if digit_value >= base {
                ret None()
            }

            result = result * base + digit_value
            cursor += 1
            continue
        }

        if byte >= a"A" && byte <= a"Z" {
            let digit_value = (byte - a"A" + 10)

            // check if the digit is valid for the base
            if digit_value >= base {
                ret None()
            }

            result = result * base + digit_value
            cursor += 1
            continue
        }

        ret None()
    }

    ret Some(result * sign)
}

fun String.to_long(): Optional<Long> {
    ret to_long_in_base(10L)
}

fun String.to_long_in_base(base: Long): Optional<Long> {
    let result = 0L
    let total_len = bytes_len
    let cursor = 0
    let sign = 1L

    if total_len == 0 {
        ret None()
    }

    let first = get_byte(cursor).to_int()

    if first == a"-" {
        cursor += 1
        sign = -1L
    }

    if first == a"+" {
        cursor += 1
    }

    while cursor < total_len {
        let byte = get_byte(cursor).to_int()

        // ignore '_'
        if byte == a"_" {
            cursor += 1
            continue
        }

        if byte == a"l" || byte == a"L" {
            cursor += 1
            break
        }

        if byte >= a"0" && byte <= a"9" {
            let digit_value: Long = (byte - a"0").to_long()

            // check if the digit is valid for the base
            if digit_value >= base {
                ret None()
            }

            result = result * base + digit_value
            cursor += 1
            continue
        }

        if byte >= a"a" && byte <= a"z" {
            let digit_value: Long = (byte - a"a" + 10).to_long()

            // check if the digit is valid for the base
            if digit_value >= base {
                ret None()
            }

            result = result * base + digit_value
            cursor += 1
            continue
        }

        if byte >= a"A" && byte <= a"Z" {
            let digit_value: Long = (byte - a"A" + 10).to_long()

            // check if the digit is valid for the base
            if digit_value >= base {
                ret None()
            }

            result = result * base + digit_value
            cursor += 1
            continue
        }

        ret None()
    }

    if cursor != total_len {
        ret None()
    }

    ret Some(result * sign)
}

// Parse a float in the format: [+-]?[0-9]*(\.[0-9]+)?([eE][+-]?[0-9]+)?[fF]?
// Ignores all appearances of '_' between digits
fun String.to_float(): Optional<Float> {
    let result = 0f
    let total_len = bytes_len
    let cursor = 0
    let sign = 1f
    let has_dot = false
    let has_exponent = false
    let has_tail = true

    if total_len == 0 {
        ret None()
    }

    let aux_byte = get_byte(cursor).to_int()

    if aux_byte == a"-" {
        cursor += 1
        sign = -1f
    }
    if aux_byte == a"+" {
        cursor += 1
    }

    if cursor >= total_len {
        ret None()
    }

    // Disallow underscore as first char, i.e. `_1.0f` is not valid
    if get_byte(cursor).to_int() == a"_" {
        ret None()
    }

    // Integral part
    while cursor < total_len {
        let byte = get_byte(cursor).to_int()

        // ignore '_'
        if byte == a"_" {
            cursor += 1
            aux_byte = get_byte(cursor).to_int()

            // Disallow underscore before the dot, i.e. `1_.0f` is not valid
            if aux_byte == a"." {
                ret None()
            }

            continue
        }

        if byte == a"." {
            has_dot = true
            break
        }

        if byte == a"e" || byte == a"E" {
            has_exponent = true

            // Disallow underscore before the exponent, i.e. `1_e1f` is not valid
            if cursor < total_len - 1 && get_byte(cursor + 1).to_int() == a"_" {
                ret None()
            }
            break
        }

        if byte == a"f" || byte == a"F" {
            has_tail = true

            // Disallow underscore before the tail, i.e. `1_f` is not valid
            if cursor < total_len - 1 && get_byte(cursor + 1).to_int() == a"_" {
                ret None()
            }
            break
        }

        if byte < a"0" || byte > a"9" {
            ret None()
        }

        result = result * 10f + (byte - a"0").to_float()
        cursor += 1
    }

    // Found a dot
    if has_dot {
        cursor += 1
        let fraction = 0.1f

        // Disallow underscore as first char after the dot, i.e. `1._0f` is not valid
        if cursor < total_len && get_byte(cursor).to_int() == a"_" {
            ret None()
        }

        while cursor < total_len {
            let byte = get_byte(cursor).to_int()

            // ignore '_'
            if byte == a"_" {
                cursor += 1
                continue
            }

            if byte == a"e" || byte == a"E" {
                has_exponent = true

                // Disallow underscore before the exponent, i.e. `1.0_e1f` is not valid
                if cursor < total_len - 1 && get_byte(cursor + 1).to_int() == a"_" {
                    ret None()
                }
                break
            }

            if byte == a"f" || byte == a"F" {
                has_tail = true

                // Disallow underscore before the tail, i.e. `1.0_f` is not valid
                if cursor < total_len - 1 && get_byte(cursor + 1).to_int() == a"_" {
                    ret None()
                }
                break
            }

            if byte < a"0" || byte > a"9" {
                ret None()
            }

            result = result + (byte - a"0").to_float() * fraction
            fraction *= 0.1f
            cursor += 1
        }
    }

    // Found a exponent
    if has_exponent {
        cursor += 1
        let exponent = 0f
        let exponent_sign = 1f

        // Ends in `e` or `E`, i.e. 1.0e is not valid
        if cursor >= total_len {
            ret None()
        }

        aux_byte = get_byte(cursor).to_int()

        if aux_byte == a"-" {
            cursor += 1
            exponent_sign = -1f
        }
        if aux_byte == a"+" {
            cursor += 1
        }

        if cursor >= total_len {
            ret None()
        }

        // Disallow underscore as first char after the exponent, i.e. `1.0e_1f` is not valid
        if cursor < total_len && get_byte(cursor).to_int() == a"_" {
            ret None()
        }

        while cursor < total_len {
            let byte = get_byte(cursor).to_int()

            // ignore '_'
            if byte == a"_" {
                cursor += 1
                continue
            }

            if byte == a"f" || byte == a"F" {
                has_tail = true

                // Disallow underscore before the tail, i.e. `1.0e5_f` is not valid
                if cursor < total_len - 1 && get_byte(cursor + 1).to_int() == a"_" {
                    ret None()
                }
                break
            }

            if byte < a"0" || byte > a"9" {
                ret None()
            }

            exponent = exponent * 10f + (byte - a"0").to_float()
            cursor += 1
        }

        result = result * Math::pow(10f, exponent * exponent_sign)
    }

    // End of the string: f or F
    if has_tail {
        cursor += 1

        // Only one tail character is allowed
        if cursor < total_len {
            ret None()
        }
    }

    ret Some(sign * result)
}
