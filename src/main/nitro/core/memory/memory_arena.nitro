
// Represents and area on the heap where the user can allocate instances
struct MemoryArena {
    // Total bytes available in the arena
    capacity: Int
    // Number of bytes used in the arena
    len: Int
    // Pointer to the start of the arena
    bytes: Array<Byte>
}

struct MemoryCrashBuffer {
    value: Int
}

// Allocates a number of bytes, returning a pointer to the start of the allocation
fun MemoryArena.alloc_bytes(amount: Int): Ptr<Byte> {
    let ptr_size = size_of<Ptr<Byte>>

    // Bump allocator
    let next = len
    let pad = (ptr_size - next) % ptr_size;
    next = next + (if pad < 0 { pad + ptr_size } else { pad })

    len = next + amount

    // Translate to address
    let base_start = ptr_of(bytes).address
    let base_end = base_start + capacity

    let start = base_start + next
    let end = start + amount

    // Check we are out-of-memory
    if end > base_end {
        // Error handled in native code, since we don't have enough memory to generate a stacktrace
        memory_alloc_error(amount, start, capacity, len, base_start)
    }

    memory_alloc_trace(amount, start)
    ret ptr_from_address(start)
}

// Allocates a value on the heap, using the size of the value to determine the number of bytes to allocate
fun MemoryArena.alloc<#Value>(): Ptr<#Value> {
    ret this.alloc_bytes(size_of<#Value>).unsafe_cast()
}

// Returns the number of used bytes of the arena
fun MemoryArena.get_used_bytes(): Int {
    ret this.len
}

// Returns the number of remaining free bytes of the arena
fun MemoryArena.get_free_bytes(): Int {
    ret this.capacity - this.len
}

// Give an string with stats of memory used/available
fun MemoryArena.get_stats(): String {
    let usage = get_used_bytes()
    let free = get_free_bytes()
    ret "Used: ${format_bytes(usage)} / ${format_bytes(capacity)}"
}

// Format an amount of bytes into the nearest unit: KB, MB, etc.
fun format_bytes(amount: Int): String {
     if amount == 0 {
        ret "0 Bytes"
    }

    let l = 0
    let n = amount.abs()

    while n >= 1024 {
        n /= 1024
        l += 1
    }

    let units = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
    let prefix = if amount < 0 { "-" } else { "" }
    ret "$prefix$n ${units[l]!!}"
}

// Prints the contents of the heap to the console, for debugging purposes
@Extern [lib: "core", name: "memory_dump"]
fun MemoryArena.dump() {}