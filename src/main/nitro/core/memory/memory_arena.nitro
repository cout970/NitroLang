
// Represents and area on the heap where the user can allocate instances
struct MemoryArena {
    // Number of bytes used in the arena
    len: Int
    // Pointer to the start of the arena
    bytes: Array<Byte>
    // Total bytes available in the arena
    capacity: Int
}

// Allocates a number of bytes, returning a pointer to the start of the allocation
fun MemoryArena.alloc_bytes(amount: Int): Ptr<Byte> {
    // Bump allocator
    let next = (len + 3) & 3.bitwise_not()

    len = next + amount

    // Translate to address
    let base_start = ptr_of(bytes).address + size_of<Int>()
    let base_end = base_start + capacity

    let start = base_start + next
    let end = start + amount

    // Check we are out-of-memory
    if end.greater_than_signed(base_end) {
        // Error handled in native code, since we don't have enough memory to generate a stacktrace
        runtime::stdout_write("Out of memory\n")
        unreachable()
    }

    ret ptr_from_address(start)
}

// Allocates a value on the heap, using the size of the value to determine the number of bytes to allocate
fun MemoryArena.alloc<#Value>(): Ptr<#Value> {
    ret this.alloc_bytes(size_of<#Value>).unsafe_cast()
}

// Allocates a new arena inside this arena, with the given capacity
fun MemoryArena.alloc_memory_arena(capacity: Int): MemoryArena {
    let arena: MemoryArena = alloc_bytes(size_of<MemoryArena>() + 4 + capacity).unsafe_cast().unsafe_as_ref()
    // The capacity of the array and the capacity of the arena are stored in the same memory location
    let bytes_array: Ptr<Byte> = ptr_of(arena).offset_in_bytes(8).unsafe_cast()

    arena.len = 0
    arena.bytes = bytes_array.unsafe_cast().unsafe_as_ref()
    arena.capacity = capacity
    ret arena
}

// Returns the number of used bytes of the arena
fun MemoryArena.get_used_bytes(): Int {
    ret this.len
}

// Returns the number of remaining free bytes of the arena
fun MemoryArena.get_free_bytes(): Int {
    ret this.capacity - this.len
}

// Give an string with stats of memory used/available
fun MemoryArena.get_stats(): String {
    let usage = get_used_bytes()
    let free = get_free_bytes()
    ret "Used: ${format_bytes(usage)} / ${format_bytes(capacity)}"
}

// Format an amount of bytes into the nearest unit: KB, MB, etc.
fun format_bytes(amount: Int): String {
     if amount == 0 {
        ret "0 Bytes"
    }

    let l = 0
    let n = amount.abs()
    let remainder = 0

    while n >= 1024 {
        remainder = n % 1024
        n /= 1024
        l += 1
    }

    let units = ["Bytes", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"]
    let unit_str = units[l]!!
    let prefix = if amount < 0 { "-" } else { "" }

    let decimal = (remainder * 1000) / 1024
    let decimal_part = decimal / 100
    let decimal_str = if decimal_part > 0 { ".$decimal_part" } else { "" }
    let number_str = n.to_string()

    ret "$prefix$number_str$decimal_str $unit_str"
}

// Prints the contents of the heap to the console, for debugging purposes
fun MemoryArena.dump() {
    // Note: this implementation must not allocate memory, since it can be used to dump the main memory
    // and we don't want to modify the memory while dumping it
    let digits = "0123456789ABCDEF"
    let max_columns = 16
    let total_len = len
    let start = 0

    repeat total_len {
        let column = it % max_columns

        if column == 0 {
            start = it
            let address = bytes.data_ptr.address + it
            let a = digits.get_byte(address & 0x0F).to_int()
            let b = digits.get_byte((address >> 4) & 0x0F).to_int()
            let c = digits.get_byte((address >> 8) & 0x0F).to_int()
            let d = digits.get_byte((address >> 12) & 0x0F).to_int()
            let e = digits.get_byte((address >> 16) & 0x0F).to_int()
            let f = digits.get_byte((address >> 20) & 0x0F).to_int()
            let g = digits.get_byte((address >> 24) & 0x0F).to_int()
            let h = digits.get_byte((address >> 28) & 0x0F).to_int()

            runtime::stdout_write("0x")
            runtime::stdout_write_char(h)
            runtime::stdout_write_char(g)
            runtime::stdout_write_char(f)
            runtime::stdout_write_char(e)
            runtime::stdout_write_char(d)
            runtime::stdout_write_char(c)
            runtime::stdout_write_char(b)
            runtime::stdout_write_char(a)
            runtime::stdout_write(": ")
        }

        let byte = bytes[it]
        let a = digits.get_byte(byte.to_int() >> 4).to_int()
        let b = digits.get_byte(byte.to_int() & 0x0F).to_int()

        runtime::stdout_write_char(a)
        runtime::stdout_write_char(b)
        runtime::stdout_write(" ")

        if column == max_columns - 1 {
            let read = it - start

            repeat read {
                let byte = bytes[start + it].to_int()

                if byte >= 32 && byte <= 126 {
                    runtime::stdout_write_char(byte)
                } else {
                    runtime::stdout_write(".")
                }
            }

            runtime::stdout_write("\n")
        }
    }

    let remaining_holes = max_columns - (total_len % max_columns)
    repeat remaining_holes {
        runtime::stdout_write("   ")
    }

    repeat total_len - start {
        let byte = bytes[start + it].to_int()

        if byte >= 32 && byte <= 126 {
            runtime::stdout_write_char(byte)
        } else {
            runtime::stdout_write(".")
        }
    }

    runtime::stdout_write("\n")
}