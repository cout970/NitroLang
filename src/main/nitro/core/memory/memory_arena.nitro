
// Represents and area on the heap where the user can allocate instances
struct MemoryArena {
    // Total bytes available in the arena
    capacity: Int
    // Number of bytes used in the arena
    len: Int
    // Pointer to the start of the arena
    bytes: RawArray<Byte>
}

struct MemoryCrashBuffer {
    value: Int
}
// 64 KB, to print stack traces and handle the error
let crash_buffer: MemoryCrashBuffer = MemoryCrashBuffer @[value: 64 * 1024]

// Allocates a number of bytes, returning a pointer to the start of the allocation
fun MemoryArena.alloc_bytes(amount: Int): Ptr<Byte> {
    let ptr_size = size_of<Ptr<Byte>>

    let next = this.len

    let pad = (ptr_size - next) % ptr_size;
    next = next + (if pad < 0 { pad + ptr_size } else { pad })

    this.len = next + amount
    let result = bytes.get_ptr(next)

    let end = result.get_address() + bytes.get_address()
    let limit = bytes.get_address() + this.capacity

    if end > limit - crash_buffer.value {
        memory_alloc_error(amount, result.get_address(), capacity, len, bytes.get_address())
    }

    memory_alloc_trace(amount, result.get_address())
    ret result
}

// Allocates a value on the heap, using the size of the value to determine the number of bytes to allocate
fun MemoryArena.alloc<#Value>(): Ptr<#Value> {
    ret this.alloc_bytes(size_of<#Value>).unsafe_cast()
}

// Returns the number of used bytes of the arena
fun MemoryArena.get_used_bytes(): Int {
    ret this.len
}

// Returns the number of remaining free bytes of the arena
fun MemoryArena.get_free_bytes(): Int {
    ret this.capacity - this.len
}

// Give an string with stats of memory used/available
fun MemoryArena.get_stats(): String {
    let usage = get_used_bytes()
    let free = get_free_bytes()
    ret "Used: ${format_bytes(usage)} / ${format_bytes(capacity)}"
}

// Format an amount of bytes into the nearest unit: KB, MB, etc.
fun format_bytes(amount: Int): String {
     if amount == 0 {
        ret "0 Bytes"
    }

    let l = 0
    let n = amount.abs()

    while n >= 1024 {
        n /= 1024
        l += 1
    }

    let units = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
    let prefix = if amount < 0 { "-" } else { "" }
    ret "$prefix$n ${units[l]!!}"
}

// Efficiently copies a number of bytes from one location to another
// Must not overlap and all bytes must be within the arena
@Extern [lib: "core", name: "memory_copy_within"]
fun MemoryArena.copy_within(dst: Ptr<Byte>, src: Ptr<Byte>, byte_len: Int) {}

// Reads a single byte from the memory
@Extern [lib: "core", name: "memory_read_byte"]
fun MemoryArena.read_byte(ptr: Ptr<Byte>): Byte {}

// Writes a single byte to the memory
@Extern [lib: "core", name: "memory_write_byte"]
fun MemoryArena.write_byte(ptr: Ptr<Byte>, value: Byte) {}

// Reads a single integer from the memory
@Extern [lib: "core", name: "memory_read_int"]
fun MemoryArena.read_int(ptr: Ptr<Int>): Int {}

// Writes a single integer to the memory
@Extern [lib: "core", name: "memory_write_int"]
fun MemoryArena.write_int(ptr: Ptr<Int>, value: Int) {}

// Reads a single float from the memory
@Extern [lib: "core", name: "memory_read_float"]
fun MemoryArena.read_float(ptr: Ptr<Float>): Float {}

// Writes a single float to the memory
@Extern [lib: "core", name: "memory_write_float"]
fun MemoryArena.write_float(ptr: Ptr<Float>, value: Float) {}

// Prints the contents of the heap to the console, for debugging purposes
@Extern [lib: "core", name: "memory_dump"]
fun MemoryArena.dump() {}