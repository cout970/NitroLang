
// Pointer to a single value stored in heap,
// if the value is a @ValueType, the pointer itself will be the value
@Extern [lib: "core", name: "Ptr"]
@ValueType
@Intrinsic
struct Ptr<#Value> {}

// Converts a reference to a value into a Pointer to the value
// References are guaranteed to be valid, while pointers are just addresses to memory that can be manipulated
@Extern [lib: "core", name: "ptr_ptr_of"]
@WasmInline [opcode: "nop"]
fun ptr_of(value: #Value): Ptr<#Value> {}

// Obtains a null pointer
fun null_ptr<#Value>(): Ptr<#Value> {
    ret ptr_from_address<#Value>(0)
}

// Create a pointer given a numerical address of memory
@Extern [lib: "core", name: "ptr_ptr_from_address"]
@WasmInline [opcode: "nop"]
fun ptr_from_address<#Value>(address: Int): Ptr<#Value> {}

// Checks if the pointer is null, i.e. created by null_ptr()
fun Ptr<#Value>.is_null(): Boolean = get_address().is_equal(0)

// Converts the pointer into a reference
// if the pointer is null, the program will crash
@Extern [lib: "core", name: "ptr_as_ref"]
@WasmInline [opcode: "nop"]
fun Ptr<#Value>.unsafe_as_ref(): #Value {}

// Convert the pointer to a numerical address of memory
@Extern [lib: "core", name: "ptr_get_address"]
@WasmInline [opcode: "nop"]
fun Ptr<#Value>.get_address(): Int {}

// Cast a pointer of one type to the pointer of another type
// This operation is inherently unsafe and must be avoided as much as possible
@Extern [lib: "core", name: "ptr_unsafe_cast"]
@WasmInline [opcode: "nop"]
fun <#Value, #Target> Ptr<#Value>.unsafe_cast(): Ptr<#Target> {}

// Creates a new pointer that is [num_bytes] ahead of this
fun Ptr<#Value>.offset_in_bytes(num_bytes: Int): Ptr<#Value> {
    ret ptr_from_address(this.get_address() + num_bytes)
}

// Aligns the pointer to the next multiple of 4
fun Ptr::align(value: Int): Int = (value + 3) & 3.bitwise_not()

// Debug representation of the pointer
fun Ptr<#Value>.to_string(): String {
    let str = StringBuilder::new()
    str[] = "0x"
    str.add_int_in_base(16, get_address())
    str[] = " ("
    str.add_int_in_base(10, get_address())
    str[] = ")"
    ret str.to_string()
}
