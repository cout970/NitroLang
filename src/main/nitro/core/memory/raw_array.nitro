
// Pointer to an array of values stored sequentially in heap
// The size of the array must be keep separately and proper checks must be used to avoid crashes
// Note: the array *can* be a null pointer
//
// It's recommended to use List<#Item> instead of this low level representation
//
@Extern [lib: "core", name: "RawArray"]
@ValueType
@Intrinsic
struct RawArray<#Item> {}

// Creates a new array of the given length
// The length must be greater than zero
fun RawArray::new<#Item>(len: Int): RawArray<#Item> {
    let ptr: Ptr<Byte> = get_memory().alloc_bytes(size_of<#Item> * len)
    ret ptr.unsafe_cast().to_raw_array<#Item>()
}

// Gets the pointer to an element in the array
// The array bounds are not checked
fun RawArray<#Item>.get_ptr(index: Int): Ptr<#Item> {
    let item_ptr = ptr_of(this).unsafe_cast<RawArray<#Item>, #Item>()
    ret item_ptr.offset_in_bytes(size_of<#Item> * index)
}

// Gets a reference to a value in the array
// The array bounds are not checked
fun RawArray<#Item>.get(index: Int): #Item {
    let ptr: Ptr<#Item> = this.get_ptr(index)

    // Some values are encoded in the reference, so a ref to the array position is no enough
    if is_encoded_in_ref<#Item>() {
        ret ptr.unsafe_cast<#Item, Ptr<#Item>>().read().unsafe_as_ref()
    } else {
        ret ptr.unsafe_as_ref()
    }
}

// Sets a value in the array at the given index
// The array bounds are not checked
fun RawArray<#Item>.set(index: Int, value: #Item) {
    this.get_ptr(index).write_copy(value)
}

// Copy a number of items from one array into another
fun RawArray<#Item>.copy_into(other: RawArray<#Item>, len: Int) {
    get_memory().copy_within(
        other.get_ptr(0).unsafe_cast(),
        this.get_ptr(0).unsafe_cast(),
        size_of<#Item> * len
    )
}

// Returns the address of the array
fun RawArray<#Item>.get_address(): Int {
    ret this.get_ptr(0).get_address()
}

// Debug representation of the pointer to the array
fun RawArray<#Item>.to_string(): String {
    ret this.get_ptr(0).to_string()
}
