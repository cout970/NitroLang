mod math {

    // 3x3 Matrix with Float components
    // Represents a 3x3 transformation matrix stored in column-major order
    // Matrix layout:
    // | m00 m10 m20 |
    // | m01 m11 m21 |
    // | m02 m12 m22 |
    struct Mat3f {
        m00: Float, m01: Float, m02: Float,
        m10: Float, m11: Float, m12: Float,
        m20: Float, m21: Float, m22: Float,
    }

    // Identity matrix
    fun Mat3f::new(): Mat3f {
        ret Mat3f @[
            m00: 1.0, m01: 0.0, m02: 0.0,
            m10: 0.0, m11: 1.0, m12: 0.0,
            m20: 0.0, m21: 0.0, m22: 1.0,
        ]
    }

    // Create matrix from individual components
    fun Mat3f::new(
        m00: Float, m01: Float, m02: Float,
        m10: Float, m11: Float, m12: Float,
        m20: Float, m21: Float, m22: Float
    ): Mat3f {
        ret Mat3f @[
            m00: m00, m01: m01, m02: m02,
            m10: m10, m11: m11, m12: m12,
            m20: m20, m21: m21, m22: m22,
        ]
    }

    // Create matrix from three column vectors
    fun Mat3f::new(col0: Vec3f, col1: Vec3f, col2: Vec3f): Mat3f {
        ret Mat3f @[
            m00: col0.x, m01: col0.y, m02: col0.z,
            m10: col1.x, m11: col1.y, m12: col1.z,
            m20: col2.x, m21: col2.y, m22: col2.z,
        ]
    }

    // Create 3x3 rotation matrix from quaternion (upper-left 3x3 of 4x4 rotation matrix)
    fun Mat3f::new_from_quaternion(quat: Quat4f): Mat3f {
        check(quat.is_normalized()) @{ "Non normalized quaternion" }

        let x = quat.x
        let y = quat.y
        let z = quat.z
        let w = quat.w

        let x2 = x + x
        let y2 = y + y
        let z2 = z + z

        let xx = x * x2
        let xy = x * y2
        let xz = x * z2
        let yy = y * y2
        let yz = y * z2
        let zz = z * z2
        let wx = w * x2
        let wy = w * y2
        let wz = w * z2

        ret Mat3f @[
            m00: 1.0 - (yy + zz), m01: xy - wz,         m02: xz + wy,
            m10: xy + wz,         m11: 1.0 - (xx + zz), m12: yz - wx,
            m20: xz - wy,         m21: yz + wx,         m22: 1.0 - (xx + yy),
        ]
    }

    fun Mat3f.set_identity() {
        m00 = 1.0; m01 = 0.0; m02 = 0.0
        m10 = 0.0; m11 = 1.0; m12 = 0.0
        m20 = 0.0; m21 = 0.0; m22 = 1.0
    }

    fun Mat3f.set(other: Mat3f) {
        m00 = other.m00; m01 = other.m01; m02 = other.m02
        m10 = other.m10; m11 = other.m11; m12 = other.m12
        m20 = other.m20; m21 = other.m21; m22 = other.m22
    }

    // Get element at row, column (0-indexed)
    fun Mat3f.get(row: Int, col: Int): Float {
        when row {
            0 -> when col {
                0 -> ret m00
                1 -> ret m10
                2 -> ret m20
                else -> crash("Column index out of bounds for Mat3f: $col")
            }
            1 -> when col {
                0 -> ret m01
                1 -> ret m11
                2 -> ret m21
                else -> crash("Column index out of bounds for Mat3f: $col")
            }
            2 -> when col {
                0 -> ret m02
                1 -> ret m12
                2 -> ret m22
                else -> crash("Column index out of bounds for Mat3f: $col")
            }
            else -> crash("Row index out of bounds for Mat3f: $row")
        }
    }

    // Set element at row, column (0-indexed)
    fun Mat3f.set(row: Int, col: Int, value: Float) {
        when row {
            0 -> when col {
                0 -> { m00 = value }
                1 -> { m10 = value }
                2 -> { m20 = value }
                else -> crash("Column index out of bounds for Mat3f: $col")
            }
            1 -> when col {
                0 -> { m01 = value }
                1 -> { m11 = value }
                2 -> { m21 = value }
                else -> crash("Column index out of bounds for Mat3f: $col")
            }
            2 -> when col {
                0 -> { m02 = value }
                1 -> { m12 = value }
                2 -> { m22 = value }
                else -> crash("Column index out of bounds for Mat3f: $col")
            }
            else -> crash("Row index out of bounds for Mat3f: $row")
        }
    }

    // Get column as Vec3f
    fun Mat3f.get_column(col: Int): Vec3f {
        when col {
            0 -> ret Vec3f::new(m00, m01, m02)
            1 -> ret Vec3f::new(m10, m11, m12)
            2 -> ret Vec3f::new(m20, m21, m22)
            else -> crash("Column index out of bounds for Mat3f: $col")
        }
    }

    // Set column from Vec3f
    fun Mat3f.set_column(col: Int, vec: Vec3f) {
        when col {
            0 -> { m00 = vec.x; m01 = vec.y; m02 = vec.z }
            1 -> { m10 = vec.x; m11 = vec.y; m12 = vec.z }
            2 -> { m20 = vec.x; m21 = vec.y; m22 = vec.z }
            else -> crash("Column index out of bounds for Mat3f: $col")
        }
    }

    // Get row as Vec3f
    fun Mat3f.get_row(row: Int): Vec3f {
        when row {
            0 -> ret Vec3f::new(m00, m10, m20)
            1 -> ret Vec3f::new(m01, m11, m21)
            2 -> ret Vec3f::new(m02, m12, m22)
            else -> crash("Row index out of bounds for Mat3f: $row")
        }
    }

    // Set row from Vec3f
    fun Mat3f.set_row(row: Int, vec: Vec3f) {
        when row {
            0 -> { m00 = vec.x; m10 = vec.y; m20 = vec.z }
            1 -> { m01 = vec.x; m11 = vec.y; m21 = vec.z }
            2 -> { m02 = vec.x; m12 = vec.y; m22 = vec.z }
            else -> crash("Row index out of bounds for Mat3f: $row")
        }
    }

    // Matrix addition
    fun Mat3f.add(other: Mat3f): Mat3f {
        ret Mat3f @[
            m00: m00 + other.m00, m01: m01 + other.m01, m02: m02 + other.m02,
            m10: m10 + other.m10, m11: m11 + other.m11, m12: m12 + other.m12,
            m20: m20 + other.m20, m21: m21 + other.m21, m22: m22 + other.m22,
        ]
    }

    fun Mat3f.add_assign(other: Mat3f) {
        m00 += other.m00; m01 += other.m01; m02 += other.m02
        m10 += other.m10; m11 += other.m11; m12 += other.m12
        m20 += other.m20; m21 += other.m21; m22 += other.m22
    }

    // Matrix subtraction
    fun Mat3f.sub(other: Mat3f): Mat3f {
        ret Mat3f @[
            m00: m00 - other.m00, m01: m01 - other.m01, m02: m02 - other.m02,
            m10: m10 - other.m10, m11: m11 - other.m11, m12: m12 - other.m12,
            m20: m20 - other.m20, m21: m21 - other.m21, m22: m22 - other.m22,
        ]
    }

    fun Mat3f.sub_assign(other: Mat3f) {
        m00 -= other.m00; m01 -= other.m01; m02 -= other.m02
        m10 -= other.m10; m11 -= other.m11; m12 -= other.m12
        m20 -= other.m20; m21 -= other.m21; m22 -= other.m22
    }

    // Scalar multiplication
    fun Mat3f.mul(scalar: Float): Mat3f {
        ret Mat3f @[
            m00: m00 * scalar, m01: m01 * scalar, m02: m02 * scalar,
            m10: m10 * scalar, m11: m11 * scalar, m12: m12 * scalar,
            m20: m20 * scalar, m21: m21 * scalar, m22: m22 * scalar,
        ]
    }

    fun Mat3f.mul_assign(scalar: Float) {
        m00 *= scalar; m01 *= scalar; m02 *= scalar
        m10 *= scalar; m11 *= scalar; m12 *= scalar
        m20 *= scalar; m21 *= scalar; m22 *= scalar
    }

    // Matrix multiplication
    fun Mat3f.mul(other: Mat3f): Mat3f {
        ret Mat3f @[
            m00: m00 * other.m00 + m10 * other.m01 + m20 * other.m02,
            m01: m01 * other.m00 + m11 * other.m01 + m21 * other.m02,
            m02: m02 * other.m00 + m12 * other.m01 + m22 * other.m02,

            m10: m00 * other.m10 + m10 * other.m11 + m20 * other.m12,
            m11: m01 * other.m10 + m11 * other.m11 + m21 * other.m12,
            m12: m02 * other.m10 + m12 * other.m11 + m22 * other.m12,

            m20: m00 * other.m20 + m10 * other.m21 + m20 * other.m22,
            m21: m01 * other.m20 + m11 * other.m21 + m21 * other.m22,
            m22: m02 * other.m20 + m12 * other.m21 + m22 * other.m22,
        ]
    }

    // In-place matrix multiplication (this = this * other)
    fun Mat3f.mul_assign(other: Mat3f) {
        let new_m00 = m00 * other.m00 + m10 * other.m01 + m20 * other.m02
        let new_m01 = m01 * other.m00 + m11 * other.m01 + m21 * other.m02
        let new_m02 = m02 * other.m00 + m12 * other.m01 + m22 * other.m02

        let new_m10 = m00 * other.m10 + m10 * other.m11 + m20 * other.m12
        let new_m11 = m01 * other.m10 + m11 * other.m11 + m21 * other.m12
        let new_m12 = m02 * other.m10 + m12 * other.m11 + m22 * other.m12

        let new_m20 = m00 * other.m20 + m10 * other.m21 + m20 * other.m22
        let new_m21 = m01 * other.m20 + m11 * other.m21 + m21 * other.m22
        let new_m22 = m02 * other.m20 + m12 * other.m21 + m22 * other.m22

        m00 = new_m00; m01 = new_m01; m02 = new_m02
        m10 = new_m10; m11 = new_m11; m12 = new_m12
        m20 = new_m20; m21 = new_m21; m22 = new_m22
    }

    // Transform Vec3f (matrix * vector)
    fun Mat3f.mul(vec: Vec3f): Vec3f {
        ret Vec3f::new(
            m00 * vec.x + m10 * vec.y + m20 * vec.z,
            m01 * vec.x + m11 * vec.y + m21 * vec.z,
             m02 * vec.x + m12 * vec.y + m22 * vec.z,
        )
    }

    // In-place vector transformation (modifies the input vector)
    fun Mat3f.transform_inplace(vec: Vec3f) {
        let new_x = m00 * vec.x + m10 * vec.y + m20 * vec.z
        let new_y = m01 * vec.x + m11 * vec.y + m21 * vec.z
        let new_z = m02 * vec.x + m12 * vec.y + m22 * vec.z

        vec.x = new_x
        vec.y = new_y
        vec.z = new_z
    }

    fun Mat3f.transform(vec: Vec3f): Vec3f {
        let new_x = m00 * vec.x + m10 * vec.y + m20 * vec.z
        let new_y = m01 * vec.x + m11 * vec.y + m21 * vec.z
        let new_z = m02 * vec.x + m12 * vec.y + m22 * vec.z
        ret Vec3f::new(new_x, new_y, new_z)
    }

    // Matrix transpose
    fun Mat3f.transpose() {
        let temp01 = m01
        let temp02 = m02
        let temp12 = m12

        m01 = m10; m10 = temp01
        m02 = m20; m20 = temp02
        m12 = m21; m21 = temp12
    }

    fun Mat3f.to_transposed(): Mat3f {
        ret Mat3f @[
            m00, m10, m20,
            m01, m11, m21,
            m02, m12, m22,
        ]
    }

    // Determinant
    fun Mat3f.get_determinant(): Float {
        let m0 = m00 * (m11 * m22 - m12 * m21)
        let m1 = m10 * (m01 * m22 - m02 * m21)
        let m2 = m20 * (m01 * m12 - m02 * m11)
        ret m0 - m1 + m2
    }

    // Matrix inversion
    fun Mat3f.inverse() {
        let det = this.get_determinant()
        if det.abs() < epsilon {
            this.set_identity()
            ret
        }

        let inv_det = 1.0 / det

        // Calculate cofactor matrix and transpose (adjugate matrix)
        let new_m00 = (m11 * m22 - m12 * m21) * inv_det
        let new_m01 = (m02 * m21 - m01 * m22) * inv_det
        let new_m02 = (m01 * m12 - m02 * m11) * inv_det

        let new_m10 = (m12 * m20 - m10 * m22) * inv_det
        let new_m11 = (m00 * m22 - m02 * m20) * inv_det
        let new_m12 = (m02 * m10 - m00 * m12) * inv_det

        let new_m20 = (m10 * m21 - m11 * m20) * inv_det
        let new_m21 = (m01 * m20 - m00 * m21) * inv_det
        let new_m22 = (m00 * m11 - m01 * m10) * inv_det

        m00 = new_m00; m01 = new_m01; m02 = new_m02
        m10 = new_m10; m11 = new_m11; m12 = new_m12
        m20 = new_m20; m21 = new_m21; m22 = new_m22
    }

    fun Mat3f.to_inversed(): Mat3f {
        let det = this.get_determinant()
        if det.abs() < epsilon {
            ret Mat3f::new()
        }

        let inv_det = 1.0 / det

        // Calculate cofactor matrix and transpose (adjugate matrix)
        ret Mat3f @[
            m00: (m11 * m22 - m12 * m21) * inv_det,
            m01: (m02 * m21 - m01 * m22) * inv_det,
            m02: (m01 * m12 - m02 * m11) * inv_det,

            m10: (m12 * m20 - m10 * m22) * inv_det,
            m11: (m00 * m22 - m02 * m20) * inv_det,
            m12: (m02 * m10 - m00 * m12) * inv_det,

            m20: (m10 * m21 - m11 * m20) * inv_det,
            m21: (m01 * m20 - m00 * m21) * inv_det,
            m22: (m00 * m11 - m01 * m10) * inv_det,
        ]
    }

    // Trace (sum of diagonal elements)
    fun Mat3f.get_trace(): Float {
        ret m00 + m11 + m22
    }

    // Linear interpolation between matrices
    fun Mat3f.lerp(other: Mat3f, t: Float): Mat3f {
        let one_minus_t = 1.0 - t
        ret Mat3f @[
            m00: m00 * one_minus_t + other.m00 * t,
            m01: m01 * one_minus_t + other.m01 * t,
            m02: m02 * one_minus_t + other.m02 * t,
            m10: m10 * one_minus_t + other.m10 * t,
            m11: m11 * one_minus_t + other.m11 * t,
            m12: m12 * one_minus_t + other.m12 * t,
            m20: m20 * one_minus_t + other.m20 * t,
            m21: m21 * one_minus_t + other.m21 * t,
            m22: m22 * one_minus_t + other.m22 * t,
        ]
    }

    // Checks
    fun Mat3f.is_finite(): Boolean {
        ret m00.is_finite() && m01.is_finite() && m02.is_finite() && m10.is_finite() && m11.is_finite() && m12.is_finite() && m20.is_finite() && m21.is_finite() && m22.is_finite()
    }

    fun Mat3f.is_nan(): Boolean {
        ret m00.is_nan() || m01.is_nan() || m02.is_nan() || m10.is_nan() || m11.is_nan() || m12.is_nan() || m20.is_nan() || m21.is_nan() || m22.is_nan()
    }

    fun Mat3f.is_identity(): Boolean {
        ret is_equal(Mat3f::new(), epsilon)
    }

    fun Mat3f.is_equal(other: Mat3f, epsilon: Float): Boolean {
        ret (m00 - other.m00).abs() < epsilon && (m01 - other.m01).abs() < epsilon && (m02 - other.m02).abs() < epsilon && (m10 - other.m10).abs() < epsilon && (m11 - other.m11).abs() < epsilon && (m12 - other.m12).abs() < epsilon && (m20 - other.m20).abs() < epsilon && (m21 - other.m21).abs() < epsilon && (m22 - other.m22).abs() < epsilon
    }

    // Check if matrix is orthogonal (preserves lengths and angles)
    fun Mat3f.is_orthogonal(): Boolean {
        let col0 = this.get_column(0)
        let col1 = this.get_column(1)
        let col2 = this.get_column(2)

        // Check if columns are unit length
        if (col0.get_len_squared() - 1.0).abs() > epsilon || (col1.get_len_squared() - 1.0).abs() > epsilon || (col2.get_len_squared() - 1.0).abs() > epsilon {
            ret false
        }

        // Check if columns are orthogonal
        if col0.dot(col1).abs() > epsilon || col0.dot(col2).abs() > epsilon || col1.dot(col2).abs() > epsilon {
            ret false
        }

        ret true
    }

    // Check if matrix is invertible (determinant ≠ 0)
    fun Mat3f.is_invertible(): Boolean {
        ret this.get_determinant().abs() > epsilon
    }

    // Append the matrix elements to a list
    fun Mat3f.add_to(list: List<Float>) {
        list[] = m00
        list[] = m01
        list[] = m02
        list[] = m10
        list[] = m10
        list[] = m12
        list[] = m20
        list[] = m21
        list[] = m22
    }

    fun Mat3f.to_mat3f(): Mat3f {
        ret Mat3f @[
            m00, m01, m02,
            m10, m11, m12,
            m20, m21, m22,
        ]
    }

    // Standard Operations
    fun Mat3f.get_hash(): Int {
        ret 31 * (31 * (31 * (31 * (31 * (31 * (31 * (31 * m00.reinterpret_as_int() + m01.reinterpret_as_int()) + m02.reinterpret_as_int()) + m10.reinterpret_as_int()) + m11.reinterpret_as_int()) + m12.reinterpret_as_int()) + m20.reinterpret_as_int()) + m21.reinterpret_as_int()) + m22.reinterpret_as_int()
    }

    fun Mat3f.to_string(): String {
        ret "Mat3f(\n  [$m00, $m10, $m20]\n  [$m01, $m11, $m21]\n  [$m02, $m12, $m22]\n)"
    }
}
