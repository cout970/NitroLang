mod math {

    // 4x4 Matrix with Float components
    // Represents a 4x4 transformation matrix stored in column-major order
    // Matrix layout:
    // | m00 m10 m20 m30 |
    // | m01 m11 m21 m31 |
    // | m02 m12 m22 m32 |
    // | m03 m13 m23 m33 |
    struct Mat4f {
        m00: Float, m01: Float, m02: Float, m03: Float,
        m10: Float, m11: Float, m12: Float, m13: Float,
        m20: Float, m21: Float, m22: Float, m23: Float,
        m30: Float, m31: Float, m32: Float, m33: Float,
    }

    // Identity matrix
    fun Mat4f::new(): Mat4f {
        ret Mat4f @[
            m00: 1.0, m01: 0.0, m02: 0.0, m03: 0.0,
            m10: 0.0, m11: 1.0, m12: 0.0, m13: 0.0,
            m20: 0.0, m21: 0.0, m22: 1.0, m23: 0.0,
            m30: 0.0, m31: 0.0, m32: 0.0, m33: 1.0,
        ]
    }

    // Create matrix from individual components
    fun Mat4f::new(
        m00: Float, m01: Float, m02: Float, m03: Float,
        m10: Float, m11: Float, m12: Float, m13: Float,
        m20: Float, m21: Float, m22: Float, m23: Float,
        m30: Float, m31: Float, m32: Float, m33: Float
    ): Mat4f {
        ret Mat4f @[
            m00: m00, m01: m01, m02: m02, m03: m03,
            m10: m10, m11: m11, m12: m12, m13: m13,
            m20: m20, m21: m21, m22: m22, m23: m23,
            m30: m30, m31: m31, m32: m32, m33: m33,
        ]
    }

    // Create matrix from four column vectors
    fun Mat4f::new(col0: Vec4f, col1: Vec4f, col2: Vec4f, col3: Vec4f): Mat4f {
        ret Mat4f @[
            m00: col0.x, m01: col0.y, m02: col0.z, m03: col0.w,
            m10: col1.x, m11: col1.y, m12: col1.z, m13: col1.w,
            m20: col2.x, m21: col2.y, m22: col2.z, m23: col2.w,
            m30: col3.x, m31: col3.y, m32: col3.z, m33: col3.w,
        ]
    }

    // Create matrix from 3x3 matrix (upper-left) with identity translation part
    fun Mat4f::new(mat3: Mat3f): Mat4f {
        ret Mat4f @[
            m00: mat3.m00, m01: mat3.m01, m02: mat3.m02, m03: 0.0,
            m10: mat3.m10, m11: mat3.m11, m12: mat3.m12, m13: 0.0,
            m20: mat3.m20, m21: mat3.m21, m22: mat3.m22, m23: 0.0,
            m30: 0.0,      m31: 0.0,      m32: 0.0,      m33: 1.0,
        ]
    }

    // Create 4x4 transformation matrix from quaternion and translation
    fun Mat4f.set_from_quaternion_translation(quat: Quat4f, translation: Vec3f) {
        check(quat.is_normalized()) @{ "Non normalized quaternion" }

        let x = quat.x
        let y = quat.y
        let z = quat.z
        let w = quat.w

        let x2 = x + x
        let y2 = y + y
        let z2 = z + z

        let xx = x * x2
        let xy = x * y2
        let xz = x * z2
        let yy = y * y2
        let yz = y * z2
        let zz = z * z2
        let wx = w * x2
        let wy = w * y2
        let wz = w * z2

        m00 = 1.0 - (yy + zz); m01 = xy - wz;         m02 = xz + wy;         m03 = 0.0
        m10 = xy + wz;         m11 = 1.0 - (xx + zz); m12 = yz - wx;         m13 = 0.0
        m20 = xz - wy;         m21 = yz + wx;         m22 = 1.0 - (xx + yy); m23 = 0.0
        m30 = translation.x;   m31 = translation.y;   m32 = translation.z;   m33 = 1.0
    }

    // Set this matrix to orthogonal projection
    fun Mat4f.set_orthogonal(left: Float, right: Float, bottom: Float, top: Float, near: Float, far: Float) {
        let width = right - left
        let height = top - bottom
        let depth = far - near

        m00 = 2.0 / width;  m01 = 0.0;           m02 = 0.0;           m03 = 0.0
        m10 = 0.0;          m11 = 2.0 / height;  m12 = 0.0;           m13 = 0.0
        m20 = 0.0;          m21 = 0.0;           m22 = -2.0 / depth;  m23 = 0.0
        m30 = -(right + left) / width; m31 = -(top + bottom) / height; m32 = -(far + near) / depth; m33 = 1.0
    }

    // Set this matrix to perspective projection
    fun Mat4f.set_perspective(fov_y: Float, aspect: Float, near: Float, far: Float) {
        let f = 1.0 / tan(fov_y * 0.5)
        let depth = far - near

        m00 = f / aspect;  m01 = 0.0;  m02 = 0.0;                    m03 = 0.0
        m10 = 0.0;         m11 = f;    m12 = 0.0;                    m13 = 0.0
        m20 = 0.0;         m21 = 0.0;  m22 = -(far + near) / depth;  m23 = -1.0
        m30 = 0.0;         m31 = 0.0;  m32 = -2.0 * far * near / depth; m33 = 0.0
    }

    // Set this matrix to perspective projection with frustum bounds
    fun Mat4f.set_frustum(left: Float, right: Float, bottom: Float, top: Float, near: Float, far: Float) {
        let width = right - left
        let height = top - bottom
        let depth = far - near

        m00 = 2.0 * near / width;  m01 = 0.0;                  m02 = 0.0;   m03 = 0.0
        m10 = 0.0;                 m11 = 2.0 * near / height;  m12 = 0.0;   m13 = 0.0
        m20 = (right + left) / width; m21 = (top + bottom) / height; m22 = -(far + near) / depth; m23 = -1.0
        m30 = 0.0;                 m31 = 0.0;                  m32 = -2.0 * far * near / depth; m33 = 0.0
    }

    // Set this matrix to look-at view matrix
    fun Mat4f.set_look_at(eye: Vec3f, target: Vec3f, up: Vec3f) {
        let forward = target.sub(eye).to_normalized()
        let right = forward.cross(up).to_normalized()
        let camera_up = right.cross(forward)

        m00 = right.x;     m01 = camera_up.x;  m02 = -forward.x;  m03 = 0.0
        m10 = right.y;     m11 = camera_up.y;  m12 = -forward.y;  m13 = 0.0
        m20 = right.z;     m21 = camera_up.z;  m22 = -forward.z;  m23 = 0.0
        m30 = -right.dot(eye); m31 = -camera_up.dot(eye); m32 = forward.dot(eye); m33 = 1.0
    }

    // Set this matrix to FPS camera view matrix
    fun Mat4f.set_fps_view(position: Vec3f, yaw: Float, pitch: Float) {
        let cos_pitch = cos(pitch)
        let sin_pitch = sin(pitch)
        let cos_yaw = cos(yaw)
        let sin_yaw = sin(yaw)

        let right_x = cos_yaw
        let right_y = 0.0
        let right_z = -sin_yaw

        let up_x = sin_yaw * sin_pitch
        let up_y = cos_pitch
        let up_z = cos_yaw * sin_pitch

        let forward_x = sin_yaw * cos_pitch
        let forward_y = -sin_pitch
        let forward_z = cos_yaw * cos_pitch

        m00 = right_x;     m01 = up_x;     m02 = forward_x;     m03 = 0.0
        m10 = right_y;     m11 = up_y;     m12 = forward_y;     m13 = 0.0
        m20 = right_z;     m21 = up_z;     m22 = forward_z;     m23 = 0.0
        m30 = -(right_x * position.x + right_y * position.y + right_z * position.z)
        m31 = -(up_x * position.x + up_y * position.y + up_z * position.z)
        m32 = -(forward_x * position.x + forward_y * position.y + forward_z * position.z)
        m33 = 1.0
    }

    fun Mat4f.set_identity() {
        m00 = 1.0; m01 = 0.0; m02 = 0.0; m03 = 0.0
        m10 = 0.0; m11 = 1.0; m12 = 0.0; m13 = 0.0
        m20 = 0.0; m21 = 0.0; m22 = 1.0; m23 = 0.0
        m30 = 0.0; m31 = 0.0; m32 = 0.0; m33 = 1.0
    }

    fun Mat4f.set(other: Mat4f) {
        m00 = other.m00; m01 = other.m01; m02 = other.m02; m03 = other.m03
        m10 = other.m10; m11 = other.m11; m12 = other.m12; m13 = other.m13
        m20 = other.m20; m21 = other.m21; m22 = other.m22; m23 = other.m23
        m30 = other.m30; m31 = other.m31; m32 = other.m32; m33 = other.m33
    }

    // Get element at row, column (0-indexed)
    fun Mat4f.get(row: Int, col: Int): Float {
        when row {
            0 -> when col {
                0 -> ret m00
                1 -> ret m10
                2 -> ret m20
                3 -> ret m30
                else -> crash("Column index out of bounds for Mat4f: $col")
            }
            1 -> when col {
                0 -> ret m01
                1 -> ret m11
                2 -> ret m21
                3 -> ret m31
                else -> crash("Column index out of bounds for Mat4f: $col")
            }
            2 -> when col {
                0 -> ret m02
                1 -> ret m12
                2 -> ret m22
                3 -> ret m32
                else -> crash("Column index out of bounds for Mat4f: $col")
            }
            3 -> when col {
                0 -> ret m03
                1 -> ret m13
                2 -> ret m23
                3 -> ret m33
                else -> crash("Column index out of bounds for Mat4f: $col")
            }
            else -> crash("Row index out of bounds for Mat4f: $row")
        }
    }

    // Set element at row, column (0-indexed)
    fun Mat4f.set(row: Int, col: Int, value: Float) {
        when row {
            0 -> when col {
                0 -> { m00 = value }
                1 -> { m10 = value }
                2 -> { m20 = value }
                3 -> { m30 = value }
                else -> crash("Column index out of bounds for Mat4f: $col")
            }
            1 -> when col {
                0 -> { m01 = value }
                1 -> { m11 = value }
                2 -> { m21 = value }
                3 -> { m31 = value }
                else -> crash("Column index out of bounds for Mat4f: $col")
            }
            2 -> when col {
                0 -> { m02 = value }
                1 -> { m12 = value }
                2 -> { m22 = value }
                3 -> { m32 = value }
                else -> crash("Column index out of bounds for Mat4f: $col")
            }
            3 -> when col {
                0 -> { m03 = value }
                1 -> { m13 = value }
                2 -> { m23 = value }
                3 -> { m33 = value }
                else -> crash("Column index out of bounds for Mat4f: $col")
            }
            else -> crash("Row index out of bounds for Mat4f: $row")
        }
    }

    // Get column as Vec4f
    fun Mat4f.get_column(col: Int): Vec4f {
        when col {
            0 -> ret Vec4f::new(m00, m01, m02, m03)
            1 -> ret Vec4f::new(m10, m11, m12, m13)
            2 -> ret Vec4f::new(m20, m21, m22, m23)
            3 -> ret Vec4f::new(m30, m31, m32, m33)
            else -> crash("Column index out of bounds for Mat4f: $col")
        }
    }

    // Set column from Vec4f
    fun Mat4f.set_column(col: Int, vec: Vec4f) {
        when col {
            0 -> { m00 = vec.x; m01 = vec.y; m02 = vec.z; m03 = vec.w }
            1 -> { m10 = vec.x; m11 = vec.y; m12 = vec.z; m13 = vec.w }
            2 -> { m20 = vec.x; m21 = vec.y; m22 = vec.z; m23 = vec.w }
            3 -> { m30 = vec.x; m31 = vec.y; m32 = vec.z; m33 = vec.w }
            else -> crash("Column index out of bounds for Mat4f: $col")
        }
    }

    // Get row as Vec4f
    fun Mat4f.get_row(row: Int): Vec4f {
        when row {
            0 -> ret Vec4f::new(m00, m10, m20, m30)
            1 -> ret Vec4f::new(m01, m11, m21, m31)
            2 -> ret Vec4f::new(m02, m12, m22, m32)
            3 -> ret Vec4f::new(m03, m13, m23, m33)
            else -> crash("Row index out of bounds for Mat4f: $row")
        }
    }

    // Set row from Vec4f
    fun Mat4f.set_row(row: Int, vec: Vec4f) {
        when row {
            0 -> { m00 = vec.x; m10 = vec.y; m20 = vec.z; m30 = vec.w }
            1 -> { m01 = vec.x; m11 = vec.y; m21 = vec.z; m31 = vec.w }
            2 -> { m02 = vec.x; m12 = vec.y; m22 = vec.z; m32 = vec.w }
            3 -> { m03 = vec.x; m13 = vec.y; m23 = vec.z; m33 = vec.w }
            else -> crash("Row index out of bounds for Mat4f: $row")
        }
    }

    // Matrix addition
    fun Mat4f.add(other: Mat4f): Mat4f {
        ret Mat4f @[
            m00: m00 + other.m00, m01: m01 + other.m01, m02: m02 + other.m02, m03: m03 + other.m03,
            m10: m10 + other.m10, m11: m11 + other.m11, m12: m12 + other.m12, m13: m13 + other.m13,
            m20: m20 + other.m20, m21: m21 + other.m21, m22: m22 + other.m22, m23: m23 + other.m23,
            m30: m30 + other.m30, m31: m31 + other.m31, m32: m32 + other.m32, m33: m33 + other.m33,
        ]
    }

    fun Mat4f.add_assign(other: Mat4f) {
        m00 += other.m00; m01 += other.m01; m02 += other.m02; m03 += other.m03
        m10 += other.m10; m11 += other.m11; m12 += other.m12; m13 += other.m13
        m20 += other.m20; m21 += other.m21; m22 += other.m22; m23 += other.m23
        m30 += other.m30; m31 += other.m31; m32 += other.m32; m33 += other.m33
    }

    // Matrix subtraction
    fun Mat4f.sub(other: Mat4f): Mat4f {
        ret Mat4f @[
            m00: m00 - other.m00, m01: m01 - other.m01, m02: m02 - other.m02, m03: m03 - other.m03,
            m10: m10 - other.m10, m11: m11 - other.m11, m12: m12 - other.m12, m13: m13 - other.m13,
            m20: m20 - other.m20, m21: m21 - other.m21, m22: m22 - other.m22, m23: m23 - other.m23,
            m30: m30 - other.m30, m31: m31 - other.m31, m32: m32 - other.m32, m33: m33 - other.m33,
        ]
    }

    fun Mat4f.sub_assign(other: Mat4f) {
        m00 -= other.m00; m01 -= other.m01; m02 -= other.m02; m03 -= other.m03
        m10 -= other.m10; m11 -= other.m11; m12 -= other.m12; m13 -= other.m13
        m20 -= other.m20; m21 -= other.m21; m22 -= other.m22; m23 -= other.m23
        m30 -= other.m30; m31 -= other.m31; m32 -= other.m32; m33 -= other.m33
    }

    // Scalar multiplication
    fun Mat4f.mul(scalar: Float): Mat4f {
        ret Mat4f @[
            m00: m00 * scalar, m01: m01 * scalar, m02: m02 * scalar, m03: m03 * scalar,
            m10: m10 * scalar, m11: m11 * scalar, m12: m12 * scalar, m13: m13 * scalar,
            m20: m20 * scalar, m21: m21 * scalar, m22: m22 * scalar, m23: m23 * scalar,
            m30: m30 * scalar, m31: m31 * scalar, m32: m32 * scalar, m33: m33 * scalar,
        ]
    }

    fun Mat4f.mul_assign(scalar: Float) {
        m00 *= scalar; m01 *= scalar; m02 *= scalar; m03 *= scalar
        m10 *= scalar; m11 *= scalar; m12 *= scalar; m13 *= scalar
        m20 *= scalar; m21 *= scalar; m22 *= scalar; m23 *= scalar
        m30 *= scalar; m31 *= scalar; m32 *= scalar; m33 *= scalar
    }

    // Matrix multiplication
    fun Mat4f.mul(other: Mat4f): Mat4f {
        ret Mat4f @[
            m00: m00 * other.m00 + m10 * other.m01 + m20 * other.m02 + m30 * other.m03,
            m01: m01 * other.m00 + m11 * other.m01 + m21 * other.m02 + m31 * other.m03,
            m02: m02 * other.m00 + m12 * other.m01 + m22 * other.m02 + m32 * other.m03,
            m03: m03 * other.m00 + m13 * other.m01 + m23 * other.m02 + m33 * other.m03,

            m10: m00 * other.m10 + m10 * other.m11 + m20 * other.m12 + m30 * other.m13,
            m11: m01 * other.m10 + m11 * other.m11 + m21 * other.m12 + m31 * other.m13,
            m12: m02 * other.m10 + m12 * other.m11 + m22 * other.m12 + m32 * other.m13,
            m13: m03 * other.m10 + m13 * other.m11 + m23 * other.m12 + m33 * other.m13,

            m20: m00 * other.m20 + m10 * other.m21 + m20 * other.m22 + m30 * other.m23,
            m21: m01 * other.m20 + m11 * other.m21 + m21 * other.m22 + m31 * other.m23,
            m22: m02 * other.m20 + m12 * other.m21 + m22 * other.m22 + m32 * other.m23,
            m23: m03 * other.m20 + m13 * other.m21 + m23 * other.m22 + m33 * other.m23,

            m30: m00 * other.m30 + m10 * other.m31 + m20 * other.m32 + m30 * other.m33,
            m31: m01 * other.m30 + m11 * other.m31 + m21 * other.m32 + m31 * other.m33,
            m32: m02 * other.m30 + m12 * other.m31 + m22 * other.m32 + m32 * other.m33,
            m33: m03 * other.m30 + m13 * other.m31 + m23 * other.m32 + m33 * other.m33,
        ]
    }

    // In-place matrix multiplication (this = this * other)
    fun Mat4f.mul_assign(other: Mat4f) {
        let new_m00 = m00 * other.m00 + m10 * other.m01 + m20 * other.m02 + m30 * other.m03
        let new_m01 = m01 * other.m00 + m11 * other.m01 + m21 * other.m02 + m31 * other.m03
        let new_m02 = m02 * other.m00 + m12 * other.m01 + m22 * other.m02 + m32 * other.m03
        let new_m03 = m03 * other.m00 + m13 * other.m01 + m23 * other.m02 + m33 * other.m03

        let new_m10 = m00 * other.m10 + m10 * other.m11 + m20 * other.m12 + m30 * other.m13
        let new_m11 = m01 * other.m10 + m11 * other.m11 + m21 * other.m12 + m31 * other.m13
        let new_m12 = m02 * other.m10 + m12 * other.m11 + m22 * other.m12 + m32 * other.m13
        let new_m13 = m03 * other.m10 + m13 * other.m11 + m23 * other.m12 + m33 * other.m13

        let new_m20 = m00 * other.m20 + m10 * other.m21 + m20 * other.m22 + m30 * other.m23
        let new_m21 = m01 * other.m20 + m11 * other.m21 + m21 * other.m22 + m31 * other.m23
        let new_m22 = m02 * other.m20 + m12 * other.m21 + m22 * other.m22 + m32 * other.m23
        let new_m23 = m03 * other.m20 + m13 * other.m21 + m23 * other.m22 + m33 * other.m23

        let new_m30 = m00 * other.m30 + m10 * other.m31 + m20 * other.m32 + m30 * other.m33
        let new_m31 = m01 * other.m30 + m11 * other.m31 + m21 * other.m32 + m31 * other.m33
        let new_m32 = m02 * other.m30 + m12 * other.m31 + m22 * other.m32 + m32 * other.m33
        let new_m33 = m03 * other.m30 + m13 * other.m31 + m23 * other.m32 + m33 * other.m33

        m00 = new_m00; m01 = new_m01; m02 = new_m02; m03 = new_m03
        m10 = new_m10; m11 = new_m11; m12 = new_m12; m13 = new_m13
        m20 = new_m20; m21 = new_m21; m22 = new_m22; m23 = new_m23
        m30 = new_m30; m31 = new_m31; m32 = new_m32; m33 = new_m33
    }

    // Transform Vec4f (matrix * vector)
    fun Mat4f.mul(vec: Vec4f): Vec4f {
        ret Vec4f::new(
            m00 * vec.x + m10 * vec.y + m20 * vec.z + m30 * vec.w,
            m01 * vec.x + m11 * vec.y + m21 * vec.z + m31 * vec.w,
            m02 * vec.x + m12 * vec.y + m22 * vec.z + m32 * vec.w,
            m03 * vec.x + m13 * vec.y + m23 * vec.z + m33 * vec.w,
        )
    }

    // Transform Vec3f as homogeneous coordinate (w=1) and return Vec3f
    fun Mat4f.mul(vec: Vec3f): Vec3f {
        let w = m03 + m13 + m23 + m33  // w component after transformation
        if w.abs() < epsilon {
            ret Vec3f::new(0.0, 0.0, 0.0)
        }
        ret Vec3f::new(
            (m00 * vec.x + m10 * vec.y + m20 * vec.z + m30) / w,
            (m01 * vec.x + m11 * vec.y + m21 * vec.z + m31) / w,
            (m02 * vec.x + m12 * vec.y + m22 * vec.z + m32) / w,
        )
    }

    // In-place vector transformation (modifies the input vector)
    fun Mat4f.transform_inplace(vec: Vec4f) {
        let new_x = m00 * vec.x + m10 * vec.y + m20 * vec.z + m30 * vec.w
        let new_y = m01 * vec.x + m11 * vec.y + m21 * vec.z + m31 * vec.w
        let new_z = m02 * vec.x + m12 * vec.y + m22 * vec.z + m32 * vec.w
        let new_w = m03 * vec.x + m13 * vec.y + m23 * vec.z + m33 * vec.w

        vec.x = new_x
        vec.y = new_y
        vec.z = new_z
        vec.w = new_w
    }

    // Matrix transpose
    fun Mat4f.transpose() {
        let temp01 = m01; let temp02 = m02; let temp03 = m03
        let temp12 = m12; let temp13 = m13; let temp23 = m23

        m01 = m10; m10 = temp01
        m02 = m20; m20 = temp02
        m03 = m30; m30 = temp03
        m12 = m21; m21 = temp12
        m13 = m31; m31 = temp13
        m23 = m32; m32 = temp23
    }

    fun Mat4f.to_transposed(): Mat4f {
        ret Mat4f @[
            m00: m00, m01: m10, m02: m20, m03: m30,
            m10: m01, m11: m11, m12: m21, m13: m31,
            m20: m02, m21: m12, m22: m22, m23: m32,
            m30: m03, m31: m13, m32: m23, m33: m33,
        ]
    }

    // Determinant (using cofactor expansion along first row)
    fun Mat4f.get_determinant(): Float {
        let a = m00 * (m11 * (m22 * m33 - m23 * m32) - m12 * (m21 * m33 - m23 * m31) + m13 * (m21 * m32 - m22 * m31))
        let b = m10 * (m01 * (m22 * m33 - m23 * m32) - m02 * (m21 * m33 - m23 * m31) + m03 * (m21 * m32 - m22 * m31))
        let c = m20 * (m01 * (m12 * m33 - m13 * m32) - m02 * (m11 * m33 - m13 * m31) + m03 * (m11 * m32 - m12 * m31))
        let d = m30 * (m01 * (m12 * m23 - m13 * m22) - m02 * (m11 * m23 - m13 * m21) + m03 * (m11 * m22 - m12 * m21))
        ret a - b + c - d
    }

    // Matrix inversion (using Gauss-Jordan elimination)
    fun Mat4f.inverse() {
        let det = this.get_determinant()
        if det.abs() < epsilon {
            this.set_identity()
            ret
        }

        let inv_det = 1.0 / det

        // Calculate cofactor matrix
        let c00 = (m11 * (m22 * m33 - m23 * m32) - m12 * (m21 * m33 - m23 * m31) + m13 * (m21 * m32 - m22 * m31)) * inv_det
        let c01 = -(m01 * (m22 * m33 - m23 * m32) - m02 * (m21 * m33 - m23 * m31) + m03 * (m21 * m32 - m22 * m31)) * inv_det
        let c02 = (m01 * (m12 * m33 - m13 * m32) - m02 * (m11 * m33 - m13 * m31) + m03 * (m11 * m32 - m12 * m31)) * inv_det
        let c03 = -(m01 * (m12 * m23 - m13 * m22) - m02 * (m11 * m23 - m13 * m21) + m03 * (m11 * m22 - m12 * m21)) * inv_det

        let c10 = -(m10 * (m22 * m33 - m23 * m32) - m12 * (m20 * m33 - m23 * m30) + m13 * (m20 * m32 - m22 * m30)) * inv_det
        let c11 = (m00 * (m22 * m33 - m23 * m32) - m02 * (m20 * m33 - m23 * m30) + m03 * (m20 * m32 - m22 * m30)) * inv_det
        let c12 = -(m00 * (m12 * m33 - m13 * m32) - m02 * (m10 * m33 - m13 * m30) + m03 * (m10 * m32 - m12 * m30)) * inv_det
        let c13 = (m00 * (m12 * m23 - m13 * m22) - m02 * (m10 * m23 - m13 * m20) + m03 * (m10 * m22 - m12 * m20)) * inv_det

        let c20 = (m10 * (m21 * m33 - m23 * m31) - m11 * (m20 * m33 - m23 * m30) + m13 * (m20 * m31 - m21 * m30)) * inv_det
        let c21 = -(m00 * (m21 * m33 - m23 * m31) - m01 * (m20 * m33 - m23 * m30) + m03 * (m20 * m31 - m21 * m30)) * inv_det
        let c22 = (m00 * (m11 * m33 - m13 * m31) - m01 * (m10 * m33 - m13 * m30) + m03 * (m10 * m31 - m11 * m30)) * inv_det
        let c23 = -(m00 * (m11 * m23 - m13 * m21) - m01 * (m10 * m23 - m13 * m20) + m03 * (m10 * m21 - m11 * m20)) * inv_det

        let c30 = -(m10 * (m21 * m32 - m22 * m31) - m11 * (m20 * m32 - m22 * m30) + m12 * (m20 * m31 - m21 * m30)) * inv_det
        let c31 = (m00 * (m21 * m32 - m22 * m31) - m01 * (m20 * m32 - m22 * m30) + m02 * (m20 * m31 - m21 * m30)) * inv_det
        let c32 = -(m00 * (m11 * m32 - m12 * m31) - m01 * (m10 * m32 - m12 * m30) + m02 * (m10 * m31 - m11 * m30)) * inv_det
        let c33 = (m00 * (m11 * m22 - m12 * m21) - m01 * (m10 * m22 - m12 * m20) + m02 * (m10 * m21 - m11 * m20)) * inv_det

        m00 = c00; m01 = c01; m02 = c02; m03 = c03
        m10 = c10; m11 = c11; m12 = c12; m13 = c13
        m20 = c20; m21 = c21; m22 = c22; m23 = c23
        m30 = c30; m31 = c31; m32 = c32; m33 = c33
    }

    fun Mat4f.to_inversed(): Mat4f {
        let det = this.get_determinant()
        if det.abs() < epsilon {
            ret Mat4f::new()
        }

        let inv_det = 1.0 / det

        // Calculate cofactor matrix
        ret Mat4f @[
            m00: (m11 * (m22 * m33 - m23 * m32) - m12 * (m21 * m33 - m23 * m31) + m13 * (m21 * m32 - m22 * m31)) * inv_det,
            m01: -(m01 * (m22 * m33 - m23 * m32) - m02 * (m21 * m33 - m23 * m31) + m03 * (m21 * m32 - m22 * m31)) * inv_det,
            m02: (m01 * (m12 * m33 - m13 * m32) - m02 * (m11 * m33 - m13 * m31) + m03 * (m11 * m32 - m12 * m31)) * inv_det,
            m03: -(m01 * (m12 * m23 - m13 * m22) - m02 * (m11 * m23 - m13 * m21) + m03 * (m11 * m22 - m12 * m21)) * inv_det,

            m10: -(m10 * (m22 * m33 - m23 * m32) - m12 * (m20 * m33 - m23 * m30) + m13 * (m20 * m32 - m22 * m30)) * inv_det,
            m11: (m00 * (m22 * m33 - m23 * m32) - m02 * (m20 * m33 - m23 * m30) + m03 * (m20 * m32 - m22 * m30)) * inv_det,
            m12: -(m00 * (m12 * m33 - m13 * m32) - m02 * (m10 * m33 - m13 * m30) + m03 * (m10 * m32 - m12 * m30)) * inv_det,
            m13: (m00 * (m12 * m23 - m13 * m22) - m02 * (m10 * m23 - m13 * m20) + m03 * (m10 * m22 - m12 * m20)) * inv_det,

            m20: (m10 * (m21 * m33 - m23 * m31) - m11 * (m20 * m33 - m23 * m30) + m13 * (m20 * m31 - m21 * m30)) * inv_det,
            m21: -(m00 * (m21 * m33 - m23 * m31) - m01 * (m20 * m33 - m23 * m30) + m03 * (m20 * m31 - m21 * m30)) * inv_det,
            m22: (m00 * (m11 * m33 - m13 * m31) - m01 * (m10 * m33 - m13 * m30) + m03 * (m10 * m31 - m11 * m30)) * inv_det,
            m23: -(m00 * (m11 * m23 - m13 * m21) - m01 * (m10 * m23 - m13 * m20) + m03 * (m10 * m21 - m11 * m20)) * inv_det,

            m30: -(m10 * (m21 * m32 - m22 * m31) - m11 * (m20 * m32 - m22 * m30) + m12 * (m20 * m31 - m21 * m30)) * inv_det,
            m31: (m00 * (m21 * m32 - m22 * m31) - m01 * (m20 * m32 - m22 * m30) + m02 * (m20 * m31 - m21 * m30)) * inv_det,
            m32: -(m00 * (m11 * m32 - m12 * m31) - m01 * (m10 * m32 - m12 * m30) + m02 * (m10 * m31 - m11 * m30)) * inv_det,
            m33: (m00 * (m11 * m22 - m12 * m21) - m01 * (m10 * m22 - m12 * m20) + m02 * (m10 * m21 - m11 * m20)) * inv_det,
        ]
    }

    // Trace (sum of diagonal elements)
    fun Mat4f.get_trace(): Float {
        ret m00 + m11 + m22 + m33
    }

    // Linear interpolation between matrices
    fun Mat4f.lerp(other: Mat4f, t: Float): Mat4f {
        let one_minus_t = 1.0 - t
        ret Mat4f @[
            m00: m00 * one_minus_t + other.m00 * t, m01: m01 * one_minus_t + other.m01 * t,
            m02: m02 * one_minus_t + other.m02 * t, m03: m03 * one_minus_t + other.m03 * t,
            m10: m10 * one_minus_t + other.m10 * t, m11: m11 * one_minus_t + other.m11 * t,
            m12: m12 * one_minus_t + other.m12 * t, m13: m13 * one_minus_t + other.m13 * t,
            m20: m20 * one_minus_t + other.m20 * t, m21: m21 * one_minus_t + other.m21 * t,
            m22: m22 * one_minus_t + other.m22 * t, m23: m23 * one_minus_t + other.m23 * t,
            m30: m30 * one_minus_t + other.m30 * t, m31: m31 * one_minus_t + other.m31 * t,
            m32: m32 * one_minus_t + other.m32 * t, m33: m33 * one_minus_t + other.m33 * t,
        ]
    }

    // Checks
    fun Mat4f.is_finite(): Boolean {
        ret m00.is_finite() && m01.is_finite() && m02.is_finite() && m03.is_finite() && m10.is_finite() && m11.is_finite() && m12.is_finite() && m13.is_finite() && m20.is_finite() && m21.is_finite() && m22.is_finite() && m23.is_finite() && m30.is_finite() && m31.is_finite() && m32.is_finite() && m33.is_finite()
    }

    fun Mat4f.is_nan(): Boolean {
        ret m00.is_nan() || m01.is_nan() || m02.is_nan() || m03.is_nan() || m10.is_nan() || m11.is_nan() || m12.is_nan() || m13.is_nan() || m20.is_nan() || m21.is_nan() || m22.is_nan() || m23.is_nan() || m30.is_nan() || m31.is_nan() || m32.is_nan() || m33.is_nan()
    }

    fun Mat4f.is_identity(): Boolean {
        ret is_equal(Mat4f::new(), epsilon)
    }

    fun Mat4f.is_equal(other: Mat4f, epsilon: Float): Boolean {
        ret (m00 - other.m00).abs() < epsilon && (m01 - other.m01).abs() < epsilon && (m02 - other.m02).abs() < epsilon && (m03 - other.m03).abs() < epsilon && (m10 - other.m10).abs() < epsilon && (m11 - other.m11).abs() < epsilon && (m12 - other.m12).abs() < epsilon && (m13 - other.m13).abs() < epsilon && (m20 - other.m20).abs() < epsilon && (m21 - other.m21).abs() < epsilon && (m22 - other.m22).abs() < epsilon && (m23 - other.m23).abs() < epsilon && (m30 - other.m30).abs() < epsilon && (m31 - other.m31).abs() < epsilon && (m32 - other.m32).abs() < epsilon && (m33 - other.m33).abs() < epsilon
    }

    // Check if matrix is orthogonal (preserves lengths and angles)
    fun Mat4f.is_orthogonal(): Boolean {
        let col0 = this.get_column(0)
        let col1 = this.get_column(1)
        let col2 = this.get_column(2)
        let col3 = this.get_column(3)

        // Check if columns are unit length
        if (col0.get_len_squared() - 1.0).abs() > epsilon || (col1.get_len_squared() - 1.0).abs() > epsilon || (col2.get_len_squared() - 1.0).abs() > epsilon || (col3.get_len_squared() - 1.0).abs() > epsilon {
            ret false
        }

        // Check if columns are orthogonal
        if col0.dot(col1).abs() > epsilon || col0.dot(col2).abs() > epsilon || col0.dot(col3).abs() > epsilon || col1.dot(col2).abs() > epsilon || col1.dot(col3).abs() > epsilon || col2.dot(col3).abs() > epsilon {
            ret false
        }

        ret true
    }

    // Check if matrix is invertible (determinant ≠ 0)
    fun Mat4f.is_invertible(): Boolean {
        ret this.get_determinant().abs() > epsilon
    }

    // Append the matrix elements to a list
    fun Mat4f.add_to(list: List<Float>) {
        list[] = m00
        list[] = m01
        list[] = m02
        list[] = m03
        list[] = m10
        list[] = m10
        list[] = m12
        list[] = m13
        list[] = m20
        list[] = m21
        list[] = m22
        list[] = m23
        list[] = m30
        list[] = m31
        list[] = m32
        list[] = m33
    }

    // Extract the upper-left 3x3 matrix
    fun Mat4f.to_mat3f(): Mat3f {
        ret Mat3f @[
            m00: m00, m01: m01, m02: m02,
            m10: m10, m11: m11, m12: m12,
            m20: m20, m21: m21, m22: m22,
        ]
    }

    // Standard Operations
    fun Mat4f.get_hash(): Int {
        ret 31 * (31 * (31 * (31 * (31 * (31 * (31 * (31 * (31 * (31 * (31 * (31 * (31 * (31 * (31 * m00.reinterpret_as_int() + m01.reinterpret_as_int()) + m02.reinterpret_as_int()) + m03.reinterpret_as_int()) + m10.reinterpret_as_int()) + m11.reinterpret_as_int()) + m12.reinterpret_as_int()) + m13.reinterpret_as_int()) + m20.reinterpret_as_int()) + m21.reinterpret_as_int()) + m22.reinterpret_as_int()) + m23.reinterpret_as_int()) + m30.reinterpret_as_int()) + m31.reinterpret_as_int()) + m32.reinterpret_as_int()) + m33.reinterpret_as_int()
    }

    fun Mat4f.to_string(): String {
        ret "Mat4f(\n  [$m00, $m10, $m20, $m30]\n  [$m01, $m11, $m21, $m31]\n  [$m02, $m12, $m22, $m32]\n  [$m03, $m13, $m23, $m33]\n)"
    }
}
