
// Intrinsics function to ask the system for a random value to use as seed for the Random Number Generators
fun random_get_initial_seed(): Int {
    let bytes = runtime::get_random_bytes(4)
    let a = bytes[0]!!.to_int()
    let b = bytes[1]!!.to_int()
    let c = bytes[2]!!.to_int()
    let d = bytes[3]!!.to_int()
    ret (a << 24) | (b << 16) | (c << 8) | d
}

// Random Number Generator based on a Permuted congruential generator (PCG) with 32-bit output
struct RngPcg32 {
    seed: Int
}

// Creates a new RngPcg32 with a random seed
fun RngPcg32::new(): RngPcg32 {
    ret RngPcg32 @[seed: random_get_initial_seed()]
}

// Creates a new RngPcg32 with a specific seed
fun RngPcg32::new(seed: Int): RngPcg32 {
    ret RngPcg32 @[seed: seed]
}

// Generates a random integer in the range -2^31..2^31-1
fun RngPcg32.next_int(): Int {
    let value = (seed * 1103515245 + 12345).bitwise_and(0x7FFFFFFF)
    seed = value
    ret value
}

// Generates a random boolean
fun RngPcg32.next_boolean(): Boolean {
    ret this.next_int() < 0x3FFFFFFF
}

fun RngPcg32.next_int_in(start: Int, end: Int): Int {
    let len = end - start
    if len <= 0 {
        crash("Invalid range $start..$end")
    }
    ret start + this.next_int() % len
}
