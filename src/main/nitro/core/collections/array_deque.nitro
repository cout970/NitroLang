// Based on the openjdk-jdk11 implementation
// https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/master/src/java.base/share/classes/java/util/ArrayDeque.java
// But with a few changes:
// - head and tail are replaced with first and len
// - the capacity is always a power of 2
struct ArrayDeque<#Item> {
    capacity: Int
    first: Int
    count: Int
    items: Array<#Item>
}

// Create a new deque
fun <#Item> ArrayDeque::new(): ArrayDeque<#Item> {
    ret ArrayDeque<#Item> @[
        capacity: 0,
        first: 0,
        count: 0,
        items: Array::new<#Item>(0),
    ]
}

fun <#Item> ArrayDeque::new(capacity: Int): ArrayDeque<#Item> {
    ret ArrayDeque<#Item> @[
        capacity,
        first: 0,
        count: 0,
        items: Array::new<#Item>(capacity),
    ]
}

// Makes sure the deque has capacity for the requested number of items
fun ArrayDeque<#Item>.ensure_capacity(needed_capacity: Int) {
    if needed_capacity <= capacity {
       ret
    }

    let new_capacity = max(capacity * 2, 16)

    while new_capacity < needed_capacity {
        new_capacity = new_capacity * 2
    }

    let new_items = Array::new<#Item>(new_capacity)

    // Copy the items to the new array
    repeat count {
        let index = raw_index_of(it)
        new_items[it] = items[index]
    }

    first = 0
    items = new_items
    capacity = new_capacity
}

// Converts a logical index (0..<len) to a raw index in the underlying circular array
fun ArrayDeque<#Item>.raw_index_of(index: Int): Int {
    ret (first + index + capacity) % capacity
}

// Add an item to the end of the deque
fun ArrayDeque<#Item>.add_last(item: #Item) {
    // Expand list if needed
    ensure_capacity(count + 1)

    items[raw_index_of(count)] = item
    count += 1
}

// Adds the given item to the deque `count` times at the end
fun ArrayDeque<#Item>.add_last_multiple_times(item: #Item, count: Int) {
    // Expand list if needed
    ensure_capacity(count + count)

    // Write the item `count` times
    repeat count {
        items[raw_index_of(count)] = item
        count += 1
    }
}

// Add an item to the start of the deque
fun ArrayDeque<#Item>.add_first(item: #Item) {
    // Expand list if needed
    ensure_capacity(count + 1)

    let index = raw_index_of(-1)
    items[index] = item

    first = index
    count += 1
}

// Adds the given item to the deque `count` times at the start
fun ArrayDeque<#Item>.add_first_multiple_times(item: #Item, count: Int) {
    // Expand list if needed
    ensure_capacity(count + count)

    // Write the item `count` times
    repeat count {
        let index = raw_index_of(-1)
        items[index] = item
        first = index
        count += 1
    }
}

// Allow `deque[] = item` syntax
fun ArrayDeque<#Item>.add(item: #Item) = add_last(item)

// Number of items in the deque
fun ArrayDeque<#Item>.get_len(): Int = count

// Check if the deque is empty
fun ArrayDeque<#Item>.is_empty(): Boolean = count == 0

// Check if the deque is not empty
fun ArrayDeque<#Item>.is_not_empty(): Boolean = count != 0

// Remove all items from the deque
fun ArrayDeque<#Item>.clear() {
    count = 0
    first = 0
}

// Remove an item from the start of the deque
fun ArrayDeque<#Item>.remove_first(): Optional<#Item> {
    if count == 0 {
        ret None()
    }

    let item = this[0]
    first = raw_index_of(1)
    count -= 1
    ret item
}

// Remove an item from the end of the deque
fun ArrayDeque<#Item>.remove_last(): Optional<#Item> {
    if count == 0 {
        ret None()
    }

    let item = this[count - 1]
    count -= 1
    ret item
}

// Retrieve an item from the start of the deque
fun ArrayDeque<#Item>.get_first(): Optional<#Item> {
    if count == 0 {
        ret None()
    }

    ret Some(items[raw_index_of(0)])
}

// Retrieve an item from the end of the deque
fun ArrayDeque<#Item>.get_last(): Optional<#Item> {
    if count == 0 {
        ret None()
    }

    ret Some(items[raw_index_of(count - 1)])
}

// Retrieve an item from the deque at the given index (0..<len)
fun ArrayDeque<#Item>.get(index: Int): Optional<#Item> {
    if index < 0 || index >= count {
        ret None()
    }

    ret Some(items[raw_index_of(index)])
}

// Override an item in the deque at the given index (0..<len)
fun ArrayDeque<#Item>.set(index: Int, item: #Item) {
    if index < 0 || index >= count {
        crash("Index out of bounds")
    }

    items[raw_index_of(index)] = item
}

// Convert the deque to a list
fun ArrayDeque<#Item>.to_list(): List<#Item> {
    let list = List::new<#Item>()

    repeat count {
        list[] = this[it]!!
    }

    ret list
}

// Convert the deque to a string
fun <#Item: ToString> ArrayDeque<#Item>.to_string(): String {
    let s = ""

    repeat count {
        if s.is_not_empty() {
            s += ", "
        }
        s += this[it]!!.to_string()
    }

    ret "^[$s]"
}
