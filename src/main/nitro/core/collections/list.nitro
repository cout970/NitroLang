
// This type represents a heap-allocated sequence of items of type `#Item`
// The implementation is a dynamic array that doubles in size when it runs out of space.
// The array stores pointers to the items, so the items are not owned by the list
//
// A list can be created using the `[...]` syntax:
// ```
// let my_list: List<Int> = [1, 2, 3]
// ```
// or using the `List::new()` function:
// ```
// let my_list = List::new<Int>()
// my_list[] = 1
// my_list[] = 2
// my_list[] = 3
// ```
struct List<#Item> {
    capacity: Int
    count: Int
    items: Array<#Item>
}

// Creates an empty list
fun List::new<#Item>(): List<#Item> {
    ret List<#Item> @[
        capacity: 0
        count: 0
        items: Array::new<#Item>(0)
    ]
}

// Creates an empty list with the given capacity pre-allocated
fun List::new<#Item>(capacity: Int): List<#Item> {
    ret List<#Item> @[
        capacity: capacity
        count: 0
        items: Array::new<#Item>(capacity)
    ]
}

// Makes sure the list has capacity for the requested number of items
fun List<#Item>.ensure_capacity(required_capacity: Int) {
    if required_capacity <= capacity {
       ret
    }

    let new_capacity = max(capacity * 2, 16)

    while new_capacity < required_capacity {
        new_capacity *= 2
    }

    let new_items = Array::new<#Item>(new_capacity)

    repeat count {
        new_items[it] = items[it]
    }

    items = new_items
    capacity = new_capacity
}

// Adds the given item to the list
// Can be called using the `list[] = value` syntax:
// `my_list[] = 1` is equivalent to `my_list.add(1)`
//
fun List<#Item>.add(item: #Item) {
    // Expand list if needed
    ensure_capacity(count + 1)

    items[count] = item
    count += 1
}

// Adds the given item to the list `count` times
fun List<#Item>.add_multiple_times(item: #Item, times: Int) {
    // Expand list if needed
    ensure_capacity(count + times)

    // Write the item `count` times
    repeat times {
        items[count] = item
        count += 1
    }
}

fun List<#Item>.add_all(other: List<#Item>) {
    // Expand list if needed
    ensure_capacity(this.count + other.count)

    // Copy the items from the other list
    repeat other.count {
        this[] = other[it]!!
    }
}

// Get the item at the given index, if the index is out of bounds, returns `None`
// Can be called using the `list[index]` syntax:
// `my_list[0]` is equivalent to `my_list.get(0)`
//
fun List<#Item>.get(index: Int): Optional<#Item> {
    if index < 0 || index >= count {
        ret None<#Item>()
    }

    ret Some(items[index])
}

// Set the item at the given index, if the index is out of bounds, the program crashes
// Can be called using the `list[index] = value` syntax:
// `my_list[0] = 1` is equivalent to `my_list.set(0, 1)`
fun List<#Item>.set(index: Int, item: #Item) {
    if index < 0 || index >= count {
        crash("Invalid list index: $index, len: ${count}")
    }

    items[index] = item
}

// Swaps the items at the given indexes
fun List<#Item>.swap(index1: Int, index2: Int) {
    let temp = this[index1]!!
    this[index1] = this[index2]!!
    this[index2] = temp
}

// Insert a new item at the given index, if the index is out of bounds, the program crashes
fun List<#Item>.insert(index: Int, value: #Item) {
    if index < 0 || index > count {
        crash("Invalid list index: $index, len: ${count}")
    }

    // Insert at the end
    if index == count {
        this[] = value
        ret
    }

    // Expand list if needed
    ensure_capacity(count + 1)

    let prev_len = count

    // Add a new item slot at the end
    count += 1

    // Move every item one place to the right
    repeat prev_len - index {
        swap(prev_len - it - 1, prev_len - it)
    }

    // Finish by inserting the new item
    this[index] = value
}

// Insert at the start and shift all other items to the right
fun List<#Item>.add_first(value: #Item) {
    insert(0, value)
}

// Insert at the end of the list
fun List<#Item>.add_last(value: #Item) {
    this[] = value
}

// Creates a new list with the given item added at the end
fun List<#Item>.plus(item: #Item): List<#Item> {
    let result = to_list()
    result[] = item
    ret result
}

// Crea a new list with the given items added at the end
fun List<#Item>.plus(other: List<#Item>): List<#Item> {
    let result = to_list()

    repeat other.count {
        result[] = other[it]!!
    }

    ret result
}

// Removes the item at the given index, if the index is out of bounds, the program crashes
fun List<#Item>.remove_at(index: Int): Optional<#Item> {
    if index < 0 || index >= count {
        ret None()
    }

    let value = this[index]

    // Move every item one place to the left
    repeat count - index - 1 {
        swap(index + it, index + it + 1)
    }

    count -= 1
    ret value
}

// Removes the last item in the array
fun List<#Item>.remove_last(): Optional<#Item> {
    if count == 0 {
        ret None()
    }

    let item = this[count - 1]!!
    count -= 1
    ret Some(item)
}

// Removes the last item in the array
fun List<#Item>.remove_first(): Optional<#Item> {
    ret remove_at(0)
}

// Removes the given item from the list, if the item is not in the list, nothing happens
fun <#Item: GetOrdering> List<#Item>.remove_value(item: #Item) {
    let index = index_of(item)

    if index.is_some() {
        remove_at(index!!)!!
    }
}

fun List<#Item>.clear() {
    count = 0
}

fun List<#Item>.remove_all(predicate: (#Item) -> Boolean) {
    let i = 0

    while i < count {
        if predicate(this[i]!!) {
            remove_at(i)!!
        } else {
            i += 1
        }
    }
}

// Returns the index of the given item, if the item is not in the list, returns `None`
fun <#Item: GetOrdering> List<#Item>.index_of(item: #Item): Optional<Int> {
    repeat count {
        if this[it]!! == item {
            ret Some(it)
        }
    }

    ret None()
}

// Returns the size of the list, meaning the number of items it contains
fun List<#Item>.get_len(): Int = count

// Checks if the list is empty
fun List<#Item>.is_empty(): Boolean = count == 0

// Checks if the list is not empty
fun List<#Item>.is_not_empty(): Boolean = count != 0

// Checks if the list contains the given item
fun <#Item: GetOrdering> List<#Item>.contains(item: #Item): Boolean {
    ret index_of(item).is_some()
}

// Returns a new list where each item is replaced by the result of the given function
fun <#Item, #Other> List<#Item>.map(func: (#Item) -> #Other): List<#Other> {
    let result = List::new<#Other>(count)

    repeat count {
        result[] = func(this[it]!!)
    }

    ret result
}

// Each item is passed to the given function to get a new list, the result is a list will all the items
fun List<#Item>.flat_map(func: (#Item) -> List<#Other>): List<#Other> {
    let result = List::new<#Other>(count)

    repeat count {
        let items = func(this[it]!!)
        repeat items.count {
            result[] = items[it]!!
        }
    }

    ret result
}

// Returns a new list with only the items that match the given predicate
fun List<#Item>.filter(func: (#Item) -> Boolean): List<#Item> {
    let result = List::new<#Item>(count)

    repeat count {
        let item = this[it]!!
        if func(item) {
            result[] = item
        }
    }

    ret result
}

// Given a list of lists, returns a new list with all the items in the sublists
fun List<List<#Item>>.flatten(): List<#Item> {
    let result = List::new<#Item>(count)

    repeat count {
        let items = this[it]!!
        repeat items.count {
            result[] = items[it]!!
        }
    }

    ret result
}

// Counts the number of items in the list that match the given predicate
fun List<#Item>.count(predicate: (#Item) -> Boolean): Int {
    let count = 0

    repeat count {
        if predicate(this[it]!!) {
            count += 1
        }
    }

    ret count
}

// Returns true if all the items in the list match the given predicate
// If the list is empty, returns true
fun List<#Item>.all(predicate: (#Item) -> Boolean): Boolean {
    repeat count {
        if !predicate(this[it]!!) {
            ret false
        }
    }

    ret true
}

// Returns true if any of the items in the list match the given predicate
// If the list is empty, returns false
fun List<#Item>.any(predicate: (#Item) -> Boolean): Boolean {
    repeat count {
        if predicate(this[it]!!) {
            ret true
        }
    }

    ret false
}

// Returns true if none of the items in the list match the given predicate
// If the list is empty, returns true
fun List<#Item>.none(predicate: (#Item) -> Boolean): Boolean {
    repeat count {
        if predicate(this[it]!!) {
            ret false
        }
    }

    ret true
}

// Returns the first item in the list, if the list is empty, returns `None`
fun List<#Item>.first(): Optional<#Item> {
    if is_empty() {
        ret None()
    }

    ret Some(this[0]!!)
}

// Returns a new list with all the items except the first one
fun List<#Item>.rest(): List<#Item> {
    let result = List::new<#Item>(count - 1)

    repeat count - 1 {
        result[] = this[it + 1]!!
    }

    ret result
}

// Returns the last item in the list, if the list is empty, returns `None`
fun List<#Item>.last(): Optional<#Item> {
    if is_empty() {
        ret None()
    }

    ret Some(this[count - 1]!!)
}

// Finds the first item in the list that matches the given predicate, if no item matches, returns `None`
fun List<#Item>.find(predicate: (#Item) -> Boolean): Optional<#Item> {
    repeat count {
        if predicate(this[it]!!) {
            ret Some(this[it]!!)
        }
    }

    ret None()
}

// Finds the index of the first item in the list that matches the given predicate, if no item matches, returns `None`
fun List<#Item>.find_index(predicate: (#Item) -> Boolean): Optional<Int> {
    repeat count {
        if predicate(this[it]!!) {
            ret Some(it)
        }
    }

    ret None()
}

// Converts the list to a string
fun <#Item: ToString> List<#Item>.to_string(): String {
    let str = "["

    repeat count {
        let item = this[it]!!.to_string()
        str += item

        if it != limit - 1 {
            str += ", "
        }
    }
    str += "]"

    ret str
}

// Iterates over the list and calls the given function for each item
// Can be called using the `list.for_each @{ ... }` syntax:
// ```
// [1, 2, 3].for_each @{ item: Int ->
//     println(item)
// }
// ```
fun List<#Item>.for_each(func: (#Item) -> Nothing) {
    repeat count {
        func(this[it]!!)
    }
}

// Iterates over the list and calls the given function for each item, passing the index as well
// Can be called using the `list.for_each_entry @{ ... }` syntax:
// ```
// [1, 2, 3].for_each_entry @{ index: Int, item: Int ->
//     println("Item at index $index is $item")
// }
fun List<#Item>.for_each_entry(func: (Int, #Item) -> Nothing) {
    repeat count {
        func(it, this[it]!!)
    }
}

// Concatenates all the items in the list into a string, separated by the given separator
fun <#Item: ToString> List<#Item>.join(separator: String): String {
    let str = ""

    repeat count {
        str += this[it]!!.to_string()

        if it != count - 1 {
            str += separator
        }
    }

    ret str
}

// Concatenates all the items in the list into a string, separated by the given separator
fun List<#Item>.join_to_string(separator: String, func: (#Item) -> String): String {
    let str = ""

    repeat count {
        str += func(this[it]!!)

        if it != count - 1 {
            str += separator
        }
    }

    ret str
}

// Creates a new list with items between the given start and end indexes
// start is inclusive and end is exclusive:
// - `list.to_sublist(0, list.len)` will return all items
// - `list.to_sublist(0, 1)` will return only the first item
// - `list.to_sublist(list.len - 1, list.len)` will return only the last item
// If start or end are negative, they are counted from the end of the list
// - `list.to_sublist(-1, list.len)` will return only the last item
// - `list.to_sublist(0, -1)` will return all items except the last one
fun List<#Item>.to_sublist(start: Int, end: Int): List<#Item> {
    if end < 0 {
        end = count + end
    }
    if end > count {
        end = count
    }

    if start < 0 {
        start = count + start
    }
    if start < 0 {
        start = 0
    }

    let length = end - start
    if length <= 0 {
        ret List::new<#Item>()
    }

    let sublist = List::new<#Item>(length)
    let i: Int = start

    while i < end {
        sublist[] = this[i]!!
        i += 1
    }

    ret sublist
}

// Removes all items that match the given predicate
fun List<#Item>.remove_if(condition: (#Item) -> Boolean) {
    let i = 0

    while i < count {
        if condition(this[i]!!) {
            remove_at(i)
        } else {
            i += 1
        }
    }
}

// Creates a copy of this list
fun List<#Item>.to_list(): List<#Item> {
    let list = List::new<#Item>(count)

    repeat count {
        list[] = this[it]!!
    }

    ret list
}

// Creates a Set with all the items in the list
fun <#Item: MapKey> List<#Item>.to_set(): Set<#Item> {
    let set = Set::new<#Item>()

    repeat count {
        set[] = this[it]!!
    }

    ret set
}

// Creates new list with all the items in reverse order
fun List<#Item>.to_reversed(): List<#Item> {
    let list = List::new<#Item>(count)

    repeat count {
        list[] = this[count - it - 1]!!
    }

    ret list
}

// Sorts the list in place, without allocating a new list
fun <#Item: GetOrdering> List<#Item>.sort_in_place() {
    // Already sorted
    if count <= 1 {
        ret
    }

    quicksort_in_place()
}

// Returns a sorted copy of the list
fun <#Item: GetOrdering> List<#Item>.to_sorted_list(): List<#Item> {
    let sorted = to_list()
    sorted.sort_in_place()
    ret sorted
}

// Compares two lists
fun <#Item: GetOrdering> List<#Item>.get_ordering(other: List<#Item>): Ordering {
    if count < other.count {
        ret Ordering::Less
    }
    if count > other.count {
        ret Ordering::Greater
    }

    repeat count {
        let cmp = this[it]!!.get_ordering(other[it]!!)
        if cmp != Ordering::Equals {
            ret cmp
        }
    }

    ret Ordering::Equals
}