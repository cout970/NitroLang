
// This type represents a unordered map, a.k.a a dictionary or an associative array
// It is implemented as a hash table with bucketing for collisions
// Any type that has the functions Type.get_hash() and Type.get_ordering(Type) can be used as a key
//
// A map can be created using the `#[...]` syntax:
// ```
// let map = #[
//     foo: 1,
//     bar: 2,
// ]
// ```
// If the keys are strings the " can be omitted is only ascii letters, numbers and _ are used
// Any arbitrary expression can be used as a key by surrounding it with ()
// ```
// let map = #[
//     regular_key: 0,
//     "key with spaces": 1,
//     "key with string templates $index => ${1 + 1}": 2,
//     (123.to_string()): 3,
//     (hash_of(item)): 4,
// ]
// ```
struct Map<#Key, #Value> {
    capacity: Int
    count: Int
    table: Array<Optional<MapEntry<#Key, #Value>>>
}

struct MapEntry<#Key, #Value> {
    hash: Int
    pair: Pair<#Key, #Value>
    next: Optional<MapEntry<#Key, #Value>>
}

// Functions required for keys
tag MapKey {
    fun This.get_hash(): Int
    fun This.get_ordering(other: This): Ordering
}

// Creates an empty map
fun <#Key: MapKey> Map::new(): Map<#Key, #Value> {
    ret Map<#Key, #Value> @[
        capacity: 0,
        count: 0,
        table: Array::new<Optional<MapEntry<#Key, #Value>>>(0),
    ]
}

// Creates an empty map with pre-allocated capacity
fun <#Key: MapKey> Map::new(capacity: Int): Map<#Key, #Value> {
    let map = Map::new<#Key, #Value>()
    map.ensure_capacity(capacity)
    ret map
}

// Makes sure the map has capacity for the requested number of items
fun <#Key: MapKey> Map<#Key, #Value>.ensure_capacity(required_capacity: Int) {
    let load_factor = 0.75f

    // No resize needed
    if required_capacity.to_float() < capacity.to_float() * load_factor {
        ret
    }

    let new_capacity = max(capacity * 2, 16)

    while new_capacity.to_float() * load_factor <= required_capacity.to_float() {
        new_capacity *= 2
    }

    // Keep old table to move items later
    let old_map = Map<#Key, #Value> @[
        capacity: capacity,
        count: count,
        table: table,
    ]

    capacity = new_capacity
    count = 0
    table = Array::new<Optional<MapEntry<#Key, #Value>>>(new_capacity)
    table.fill(None())

    // Copy previous items
    add_all(old_map)
}

fun Map::get_index(hash: Int, capacity: Int): Int {
    ret (hash ^ (hash >> 16)).modulo(capacity)
}

// Removes all values from the map
fun <#Key: MapKey> Map<#Key, #Value>.clear() {
    count = 0
    table.fill(None())
}

// Override an entry of the map with a new value
fun <#Key: MapKey> Map<#Key, #Value>.set(key: #Key, value: #Value) {
    this[] = Pair::of(key, value)
}

// Equivalent to `Map.set(key, value)` but with a Pair
fun <#Key: MapKey> Map<#Key, #Value>.add(new_entry: Pair<#Key, #Value>) {
    ensure_capacity(count + 1)

    // Index where to insert the value
    let key_hash = new_entry.first.get_hash()
    let index = Map::get_index(key_hash, capacity)
    let bucket = table[index]

    while bucket.is_some() {
        let entry: MapEntry<#Key, #Value> = bucket!!

        if entry.hash == key_hash && entry.pair.first == new_entry.first {
            entry.pair.second = new_entry.second
            ret
        }

        // Last entry in the linked list
        if entry.next.is_none() {
            entry.next = Some(MapEntry<#Key, #Value> @[
                hash: key_hash
                pair: new_entry
                next: None()
            ])
            count += 1
            ret
        }

        bucket = entry.next
    }

    // No items in the bucket yet, add the first entry
    table[index] = Some(MapEntry<#Key, #Value> @[
        hash: key_hash
        pair: new_entry
        next: None()
    ])
    count += 1
}

// Copies all entries from another map into this map
fun <#Key: MapKey> Map<#Key, #Value>.add_all(other: Map<#Key, #Value>) {
    if other.is_empty() {
        ret
    }

    this.ensure_capacity(this.count + other.count)

    other.for_each_entry @{ key: #Key, value: #Value ->
        this[] = Pair::of(key, value)
    }
}

// Finds a value in the map by key
fun <#Key: MapKey> Map<#Key, #Value>.get(key: #Key): Optional<#Value> {
    let opt = get_entry(key)

    if opt.is_none() {
        ret None()
    }

    ret Some(opt!!.second)
}

// Unsafe version of `get`
fun <#Key: MapKey> Map<#Key, #Value>.unsafe_get(key: #Key): #Value {
    let opt = get_entry(key)

    if opt.is_none() {
        crash("Key not found in map")
    }

    ret opt!!.second
}

// Equivalent to `Map.get(key)` but returns a Pair
fun <#Key: MapKey> Map<#Key, #Value>.get_entry(key: #Key): Optional<Pair<#Key, #Value>> {
    if count == 0 || capacity == 0 {
        ret None()
    }

    // Index where to insert the value
    let key_hash = key.get_hash()
    let index = Map::get_index(key_hash, capacity)
    let bucket = table[index]

    while bucket.is_some() {
        let entry: MapEntry<#Key, #Value> = bucket!!

        if entry.hash == key_hash && entry.pair.first == key {
            ret Some(entry.pair)
        }

        bucket = entry.next
    }

    // Not found
    ret None()
}

// Removes a value from the map by key
fun <#Key: MapKey> Map<#Key, #Value>.remove(key: #Key): Boolean {
    if count == 0 || capacity == 0 {
        ret false
    }

    // Index where to insert the value
    let key_hash = key.get_hash()
    let index = Map::get_index(key_hash, capacity)
    let bucket = table[index]
    let prev: Optional<MapEntry<#Key, #Value>> = None()

    while bucket.is_some() {
        let entry: MapEntry<#Key, #Value> = bucket!!

        if entry.hash == key_hash && entry.pair.first == key {
            // Found, remove the entry and fix the linked list
            count -= 1
            if prev.is_none() {
                table[index] = entry.next
            } else {
                prev!!.next = entry.next
            }
            ret true
        }

        prev = Some(entry)
        bucket = entry.next
    }

    // Not found
    ret false
}

fun <#Key: MapKey> Map<#Key, #Value>.get_or_set(key: #Key, create_value: () -> #Value): #Value {
    let opt = this[key]

    if opt.is_some() {
        ret opt!!
    }

    let value = create_value()
    this[key] = value
    ret value
}

// Iterates over the each entry in the map
fun <#Key: MapKey> Map<#Key, #Value>.for_each_entry(func: (#Key, #Value) -> Nothing) {
    repeat capacity {
        let bucket = table[it]

        while bucket.is_some() {
            let entry: MapEntry<#Key, #Value> = bucket!!

            func(entry.pair.first, entry.pair.second)

            bucket = entry.next
        }
    }
}

// Allows to use `key in map` syntax
fun <#Key: MapKey> Map<#Key, #Value>.contains(key: #Key): Boolean {
    ret contains_key(key)
}

// Checks if the map contains a key
fun <#Key: MapKey> Map<#Key, #Value>.contains_key(key: #Key): Boolean {
    ret this[key].is_some()
}

// Checks if the map contains a value
fun <#Key: MapKey, #Value: GetOrdering> Map<#Key, #Value>.contains_value(value: #Value): Boolean {
    let found = false

    for_each_entry @{ key: #Key, entry_value: #Value ->
        if entry_value == value {
            found = true
        }
    }

    ret found
}

// Length/size of the map, a.k.a the number of items in the map
fun <#Key: MapKey> Map<#Key, #Value>.get_len(): Int { ret count }

// Checks if the map has no items
fun <#Key: MapKey> Map<#Key, #Value>.is_empty(): Boolean = count == 0

// Checks if the map has at least one item
fun <#Key: MapKey> Map<#Key, #Value>.is_not_empty(): Boolean = count != 0

// Returns the value for a key or inserts a new value if the key is not present
fun <#Key: MapKey> Map<#Key, #Value>.get_or_insert(key: #Key, value: #Value): #Value {
    let opt = this[key]

    if opt.is_some() {
        ret opt!!
    }

    this[key] = value
    ret value
}

// Returns the value for a key or computes and inserts a new value if the key is not present
fun <#Key: MapKey> Map<#Key, #Value>.get_or_compute(key: #Key, func: () -> #Value): #Value {
    let opt = this[key]

    if opt.is_some() {
        ret opt!!
    }

    let value = func()
    this[key] = value
    ret value
}

// Convenience function to iterate over the each entry in the map
fun <#Key: MapKey> Map<#Key, #Value>.for_each(func: (#Key, #Value) -> Nothing) {
    for_each_entry(func)
}

// Iterates over the each value in the map
fun <#Key: MapKey> Map<#Key, #Value>.for_each_value(func: (#Value) -> Nothing) {
    for_each_entry @{ key: #Key, value: #Value -> func(value) }
}

// Iterates over the each key in the map
fun <#Key: MapKey> Map<#Key, #Value>.for_each_key(func: (#Key) -> Nothing) {
    for_each_entry @{ key: #Key, value: #Value -> func(key) }
}

// Returns the list of keys in the map
fun <#Key: MapKey> Map<#Key, #Value>.keys_to_list(): List<#Key> {
    let res = List::new<#Key>()

    for_each_entry @{ key: #Key, value: #Value ->
        res[] = key
    }

    ret res
}

// Returns the list of values in the map
fun <#Key: MapKey> Map<#Key, #Value>.values_to_list(): List<#Value> {
    let res = List::new<#Value>()

    for_each_entry @{ key: #Key, value: #Value ->
        res[] = value
    }

    ret res
}

// Maps each map entry into a value and collects it into a list
fun <#Key: MapKey> Map<#Key, #Value>.map(func: (#Key, #Value) -> #Value): List<#Value> {
    let res: List<#Value> = []

    for_each_entry @{ key: #Key, value: #Value ->
        res[] = func(key, value)
    }

    ret res
}

// Returns the list of entries in the map
fun <#Key: MapKey> Map<#Key, #Value>.to_list(): List<Pair<#Key, #Value>> {
    let res = List::new<Pair<#Key, #Value>>()

    for_each_entry @{ key: #Key, value: #Value ->
        res[] = Pair::of(key, value)
    }

    ret res
}

// Create a clone of this map
fun <#Key: MapKey> Map<#Key, #Value>.to_map(): Map<#Key, #Value> {
    let res = Map::new<#Key, #Value>(count)

    for_each_entry @{ key: #Key, value: #Value ->
        res[key] = value
    }

    ret res
}

// Converts the map to a string
fun <#Key: MapKey | ToString, #Value: ToString> Map<#Key, #Value>.to_string(): String {
    let str = StringBuilder::new()
    let index = 0
    str[] = "#["


    for_each_entry @{ key: #Key, value: #Value ->
        if index != 0 {
            str[] = ", "
        }
        str[] = key
        str[] = ": "
        str[] = value
        index += 1
    }

    str[] = "]"
    ret str.to_string()
}

// Converts the map to a string
fun <#Key: MapKey | ToString, #Value: ToString> Map<#Key, #Value>.to_pretty_string(): String {
    let str = StringBuilder::new()
    let index = 0
    str[] = "#["

    for_each_entry @{ key: #Key, value: #Value ->
        if index != 0 {
            str[] = ","
        }
        str[] = "\n  "
        str[] = key
        str[] = ": "
        str[] = value
        index += 1
    }

    if index != 0 {
        str[] = "\n"
    }

    str[] = "]"
    ret str.to_string()
}
