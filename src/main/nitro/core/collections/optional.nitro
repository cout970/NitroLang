
// This type represents an optional value. It can either be Some(value) or None
// It's used to represent a value that may or may not be present, similar to null in other languages
@ValueType
option Optional<#Value> {
    None
    Some { value: #Value }
}

// Creates an instance of the Some variant of the Optional type
fun Some(value: #Value): Optional<#Value> {
    ret Optional::Some<#Value> @[value]
}

// Creates an instance of the None variant of the Optional type
fun None<#Value>(): Optional<#Value> {
    ret Optional::None<#Value> @[]
}

// Checks if the Optional is the Some variant
fun Optional<#Value>.is_some(): Boolean = this is Optional::Some<#Value>

// Checks if the Optional is the None variant
fun Optional<#Value>.is_none(): Boolean = this is Optional::None<#Value>

// Returns the value of the Some variant, or crashes if the Optional is the None variant
// Can be called with the syntax `optional!!`
fun Optional<#Value>.get_or_crash(): #Value {
    if this.is_some() {
        ret (this as Optional::Some<#Value>).value
    }

    crash("Call to get_or_crash() on None variant")
}

// Returns the value of the Some variant, or the default value if the Optional is the None variant
fun Optional<#Value>.get_or_default(default: #Value): #Value {
    ret if this.is_some() { this!! } else { default }
}


// Returns the value of the Some variant, or panics if the Optional is the None variant
fun <#Value: ToString> Optional<#Value>.to_string(): String {
    if this.is_some() {
        ret "Some(${this!!})"
    }
    ret "None"
}
