
// This type represents an optional value. It can either be Some(value) or None
// It's used to represent a value that may or may not be present, similar to null in other languages
@ValueType
option Optional<#Value> {
    None
    Some { value: #Value }
}

/* TODO: Optimize this using intrinsics to decrease memory usage */

// Creates an instance of the Some variant of the Optional type
fun Some(value: #Value): Optional<#Value> {
    ret Optional::Some<#Value> @[value]
}

// Creates an instance of the None variant of the Optional type
fun None<#Value>(): Optional<#Value> {
    ret Optional::None<#Value> @[]
}

// Checks if the Optional is the Some variant
fun Optional<#Value>.is_some(): Boolean = this is Optional::Some<#Value>

// Checks if the Optional is the None variant
fun Optional<#Value>.is_none(): Boolean = this is Optional::None<#Value>

// Returns the value of the Some variant, or crashes if the Optional is the None variant
// Can be called with the syntax `optional!!`
fun Optional<#Value>.get_or_crash(): #Value {
    if this.is_some() {
        ret (this as Optional::Some<#Value>).value
    }

    crash("Call to get_or_crash() '!!' on None variant")
}

// Same as get_or_crash(), but with a custom error message
fun Optional<#Value>.or_fail_with(msg: String): #Value {
    if this.is_some() {
        ret (this as Optional::Some<#Value>).value
    }

    crash(msg)
}

// Same as or_fail_with(String),
// but with a lambda to lazily generate the error message only when the error occurs
fun Optional<#Value>.or_fail_with(msg: () -> String): #Value {
    if this.is_some() {
        ret (this as Optional::Some<#Value>).value
    }

    crash(msg())
}

// Allows the use of `?` to perform an early return if value is None
fun Optional<#Value>.is_returnable_error(): Boolean = this.is_none()

fun Optional<#A>.convert_error(): Optional<#B> {
    if this.is_none() {
        ret None<#B>()
    }

    crash("Call to convert_error() on Optional::Some variant")
}

// Returns the value of the Some variant, or the default value if the Optional is the None variant
fun Optional<#Value>.or_default(default: #Value): #Value {
    ret if this.is_some() { this!! } else { default }
}

// Returns the value of the Some variant, or the result of the function if the Optional is the None variant
fun Optional<#Value>.or_else(f: () -> #Value): #Value {
    ret if this.is_some() { this!! } else { f() }
}

// Applies a function to the value of the Some variant, do nothing if the Optional is the None variant
fun Optional<#Source>.map(func: (#Source) -> #Target): Optional<#Target> {
    if this.is_some() {
        ret Some(func(this!!))
    }
    ret None<#Target>()
}

// Applies a function to the value of the Some variant, do nothing if the Optional is the None variant
// The function must return an Optional, and the result will be flattened into a single Optional
fun Optional<#Source>.flat_map(func: (#Source) -> Optional<#Target>): Optional<#Target> {
    if this.is_some() {
        ret func(this!!)
    }
    ret None<#Target>()
}

// Returns the value of the Some variant, or panics if the Optional is the None variant
fun <#Value: ToString> Optional<#Value>.to_string(): String {
    if this.is_some() {
        ret "Some(${this!!})"
    }
    ret "None"
}
