
struct FilePath {
    path: String
}

struct IoError {
    message: String
    code: String
}

fun FilePath::new(path: String): FilePath {
    ret FilePath @[path]
}

fun FilePath::join(dir: String, sub: String): String {
    let components: List<String> = dir.split("/")
    components.add_all(sub.split("/"))

    // Remove empty components and "." components
    components = components.filter @{ i -> i != "" && i != "." }

    // Remove ".." components
    let i = 0
    while i < components.len {
        if components[i]!! == ".." && i > 0{
            components.remove_at(i)!!
            components.remove_at(i - 1)!!
            i -= 1
            continue
        }
        i += 1
    }

    ret components.join("/")
}

fun FilePath::directory_name(path: String): String {
    let components: List<String> = path.split("/")
    if components.len <= 1 {
        ret "."
    }
    components.remove_at(components.len - 1)!!
    ret components.join("/")
}

fun FilePath::base_name(path: String): String {
    if "/" !in path {
        ret path
    }
    let components: List<String> = path.split("/")
    ret components[components.len - 1]!!
}

// Returns a list of all files in the directory and all subdirectories
fun FilePath.read_directory_files_recursive(): Result<List<String>, IoError> {

    let files = read_directory_files()?
    let all_files = []

    for filename in files {
        all_files[] = filename

        let sub_path = FilePath::new(FilePath::join(path, filename))
        let res = sub_path.is_directory()
        // ignore errors, probably a permission issue
        if res.is_ok() && res!! {
            let names = sub_path.read_directory_files_recursive()?
            for name in names {
                all_files[] = FilePath::join(sub_path.path, name)
            }
        }
    }

    ret Ok(all_files)
}

// Returns a list of files in the directory
fun FilePath.read_directory_files(): Result<List<String>, IoError> {
    return runtime_fs::read_directory_files(path)
}

// Returns true if the path is a directory
fun FilePath.is_directory(): Result<Boolean, IoError> {
    let meta = get_metadata()?
    ret Ok(meta.file_type == FileType::Directory)
}

// Returns the metadata of the file
fun FilePath.get_metadata(): Result<FileMetadata, IoError> {
    ret runtime_fs::get_metadata(path)
}

// Reads the text from the file, all at once
fun FilePath.read_text(): Result<String, IoError> {
    ret runtime_fs::read_text(path)
}

// Writes the given text to the file, all at once, if the file does not exist it will be created
fun FilePath.write_text(text: String): Result<Nothing, IoError> {
    return runtime_fs::write_text(path, text)
}

// Reads the bytes from the file, all at once
fun FilePath.read_bytes(): Result<List<Byte>, IoError> {
    ret runtime_fs::read_bytes(path)
}

// Writes the given bytes to the file, all at once, if the file does not exist it will be created
fun FilePath.write_bytes(bytes: List<Byte>): Result<Nothing, IoError> {
    return runtime_fs::write_bytes(path, bytes)
}

// Returns true if the file exists
fun FilePath.exists(): Result<Boolean, IoError> {
    ret runtime_fs::exists(path)
}

// Returns the access time of the file
fun FilePath.get_access_time(): Result<Instant, IoError> {
    let meta = get_metadata()?
    ret Ok(meta.access_time)
}

// Returns the last modified time of the file
fun FilePath.get_last_modified_time(): Result<Instant, IoError> {
    let meta = get_metadata()?
    ret Ok(meta.modification_time)
}

// Returns the creation time of the file
fun FilePath.get_creation_time(): Result<Instant, IoError> {
    let meta = get_metadata()?
    ret Ok(meta.creation_time)
}

// Returns the size of the file
fun FilePath.get_size(): Result<Long, IoError> {
    let meta = get_metadata()?
    ret Ok(meta.size)
}

// Returns the file type of the file
fun FilePath.get_file_type(): Result<FileType, IoError> {
    let meta = get_metadata()?
    ret Ok(meta.file_type)
}

//fun FilePath.delete(): Result<Nothing, IoError> {}
//
//fun FilePath.delete_recursive(): Result<Nothing, IoError> {}

fun FilePath.to_string(): String = path

fun IoError.to_string(): String = "$message ($code)"
