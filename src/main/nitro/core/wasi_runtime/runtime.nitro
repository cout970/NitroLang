
// This module provides utilities to extract information about the runtime environment
mod runtime {

    // Exit the program with the given exit code
    fun exit(code: Int) {
        wasi::proc_exit(code)
    }

    // Returns the list of arguments passed to the program
    fun get_program_args(): List<String> {
        let arg_count = IntPtr @[value: 0]
        let argv_buf_size = IntPtr @[value: 0]

        let rc = wasi::args_sizes_get(arg_count, argv_buf_size)
        if rc != 0 {
            crash("wasi::args_sizes_get failed: $rc")
        }

        let buff: CArray<Byte> = ffi::malloc(argv_buf_size.value)
        defer ffi::free(buff)

        let arg_vec = Array::new<CString>(arg_count.value)
        defer arg_vec.free()

        let rc = wasi::args_get(arg_vec.data_ptr, buff)
        if rc != 0 {
            crash("wasi::args_get failed: $rc")
        }

        let args: List<String> = []

        repeat arg_count.value {
            let cstring: CString = arg_vec[it]
            args[] = ffi::cstring_to_string(cstring)
        }

        ret args
    }

    // Returns a map of the environment variables
    fun get_environment(): Map<String, String> {
        let environ_count = IntPtr @[value: 0]
        let environ_buf_size = IntPtr @[value: 0]

        let rc = wasi::environ_sizes_get(environ_count, environ_buf_size)
        if rc != 0 {
            crash("wasi::environ_sizes_get failed: $rc")
        }

        let buff: CArray<Byte> = ffi::malloc(environ_buf_size.value)
        defer ffi::free(buff)

        let environ_vec = Array::new<CString>(environ_count.value)
        defer environ_vec.free()

        let rc = wasi::environ_get(environ_vec.data_ptr, buff)
        if rc != 0 {
            crash("wasi::environ_get failed: $rc")
        }

        let env = #[]

        repeat environ_count.value {
            let cstring: CString = environ_vec[it]
            let str = ffi::cstring_to_string(cstring)
            let parts = str.split("=")

            env[parts[0]!!] = parts[1]!!
        }

        ret env
    }

    // Returns an instant representing the current time, using the REALTIME clock,
    // which is subject to NTP adjustments and tries to be as close to the wall-clock time as possible
    fun get_realtime_instant(): Instant {
        let buff = ffi::malloc(8)
        defer ffi::free(buff)

        let time_ns: LongPtr = buff.unsafe_cast_as_ref()
        let rc = wasi::clock_time_get(wasi::CLOCK_REALTIME, 1_000_000_000L, time_ns)
        if rc != 0 {
            crash("wasi::clock_time_get failed: $rc")
        }

        ret Instant @[
            seconds: time_ns.value / 1_000_000_000L,
            nanoseconds: (time_ns.value % 1_000_000_000L).to_int(),
        ]
    }

    // Returns a monotonic clock value in nanoseconds, meaning it will never go backwards and is not subject to clock adjustments
    // This is useful for measuring time intervals and benchmarking
    fun get_monotonic_timer_ns(): Long {
        let buff = ffi::malloc(8)
        defer ffi::free(buff)

        let time_ns: LongPtr = buff.unsafe_cast_as_ref()
        let rc = wasi::clock_time_get(wasi::CLOCK_MONOTONIC, 1_000_000_000L, time_ns)
        if rc != 0 {
            crash("wasi::clock_time_get failed: $rc")
        }
        ret time_ns.value
    }

    // Returns a list of random bytes with the given length
    fun get_random_bytes(amount: Int): List<Byte> {
        let buffer: CArray<Byte> = ffi::malloc(amount)
        defer ffi::free(buffer)

        let rc = wasi::random_get(buffer, amount)
        if rc != 0 {
            crash("wasi::random_get failed: $rc")
        }
        let list = []

        repeat amount {
            let ptr: BytePtr = buffer.offset_in_bytes(it).unsafe_cast_as_ref()
            list[] = ptr.value
        }

        ret list
    }

    // Static memory to avoid allocations in stdout_write_char()
    //  struct {
    //      int written,
    //      int iovec_buf,
    //      int iovec_buf_len,
    //      char[4] chars,
    //      char[33] digits,
    //  }
    let static_buffer: String = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    let sb_written: Int = 0
    let sb_buf: Int = 4
    let sb_buf_size: Int = 8
    let sb_chars: Int = 12
    let sb_digits: Int = 16

    // Write the given string to stdout, does not append a newline
    // Note: this function has been carefully optimized to avoid allocations
    fun stdout_write(str: String) {
        let buffer: Ptr<Byte> = static_buffer.utf8_data.data_ptr

        let iovec_buf: IntPtr = buffer.offset_in_bytes(sb_buf).unsafe_cast_as_ref()
        iovec_buf.value = str.utf8_data.data_ptr.address

        let iovec_buf_size: IntPtr = buffer.offset_in_bytes(sb_buf_size).unsafe_cast_as_ref()
        iovec_buf_size.value = str.len

        let written: IntPtr = buffer.offset_in_bytes(sb_written).unsafe_cast_as_ref()

        let rc = wasi::fd_write(wasi::FD_STDOUT, ptr_of(iovec_buf).unsafe_cast(), 1, written)
        if rc != 0 {
            crash("wasi::fd_write failed")
        }
    }

    // Write a char to the stdout
    fun stdout_write_char(unicode: Char) {
        stdout_write_char(unicode.to_int())
    }

    // Write a char to the stdout given a Unicode code point
    // Note: this function has been carefully optimized to avoid allocations
    fun stdout_write_char(unicode: Int) {
        let buffer: Ptr<Byte> = static_buffer.utf8_data.data_ptr
        // `chars` is a UTF-8 string with only one character
        let chars: Ptr<Byte> = buffer.offset_in_bytes(sb_chars)
        let char_len = when  {
            unicode < 0x80 -> 1
            unicode < 0x800 -> 2
            unicode < 0x10000 -> 3
            else -> 4
        }

        let ptr: Ptr<Byte> = chars
        ptr.write(when char_len {
            1 -> unicode.to_byte()
            2 -> (0xC0 | (unicode >> 6)).to_byte()
            3 -> (0xE0 | (unicode >> 12)).to_byte()
            else -> (0xF0 | (unicode >> 18)).to_byte()
        })
        ptr = ptr.offset_in_bytes(1)
        ptr.write(when char_len {
            1 -> 0.to_byte()
            2 -> (0x80 | (unicode & 0x3F)).to_byte()
            3 -> (0x80 | ((unicode >> 6) & 0x3F)).to_byte()
            else -> (0x80 | ((unicode >> 12) & 0x3F)).to_byte()
        })
        ptr = ptr.offset_in_bytes(1)
        ptr.write(when char_len {
            1 -> 0.to_byte()
            2 -> 0.to_byte()
            3 -> (0x80 | (unicode & 0x3F)).to_byte()
            else -> (0x80 | ((unicode >> 6) & 0x3F)).to_byte()
        })
        ptr = ptr.offset_in_bytes(1)
        ptr.write(when char_len {
            1 -> 0.to_byte()
            2 -> 0.to_byte()
            3 -> 0.to_byte()
            else -> (0x80 | (unicode & 0x3F)).to_byte()
        })

        let iovec_buf: IntPtr = buffer.offset_in_bytes(sb_buf).unsafe_cast_as_ref()
        iovec_buf.value = chars.address

        let iovec_buf_size: IntPtr = buffer.offset_in_bytes(sb_buf_size).unsafe_cast_as_ref()
        iovec_buf_size.value = char_len

        let written: IntPtr = buffer.offset_in_bytes(sb_written).unsafe_cast_as_ref()

        let rc = wasi::fd_write(wasi::FD_STDOUT, ptr_of(iovec_buf).unsafe_cast(), 1, written)
        if rc != 0 {
            crash("wasi::fd_write failed")
        }
    }

    // Write a signed integer to the stdout
    // Note: this function has been carefully optimized to avoid allocations
    fun stdout_write_int(value: Int) {
        let buffer: Ptr<Byte> = static_buffer.utf8_data.data_ptr
        let chars: Ptr<Byte> = buffer.offset_in_bytes(sb_chars)
        let ptr = chars

        // Special case for 0
        if value == 0 {
            stdout_write_char(a"0")
            ret
        }

        // Special case for int_min_value
        if value == -2147483648 {
            stdout_write("-2147483648")
            ret
        }

        // Minus sign for negative numbers
        let negative = value < 0
        if negative {
            value = -value
        }

        let offset = 33
        while value > 0 {
            let digit = value % 10
            value = value / 10
            offset -= 1
            let ptr: BytePtr = buffer.offset_in_bytes(sb_digits + offset).unsafe_cast_as_ref()
            ptr.value = (digit + a"0").to_byte()
        }

        if negative {
            offset -= 1
            let ptr: BytePtr = buffer.offset_in_bytes(sb_digits + offset).unsafe_cast_as_ref()
            ptr.value = a"-".to_byte()
        }

        let iovec_buf: IntPtr = buffer.offset_in_bytes(sb_buf).unsafe_cast_as_ref()
        iovec_buf.value = buffer.offset_in_bytes(sb_digits + offset).address

        let iovec_buf_size: IntPtr = buffer.offset_in_bytes(sb_buf_size).unsafe_cast_as_ref()
        iovec_buf_size.value = 33 - offset

        let written: IntPtr = buffer.offset_in_bytes(sb_written).unsafe_cast_as_ref()

        let rc = wasi::fd_write(wasi::FD_STDOUT, ptr_of(iovec_buf).unsafe_cast(), 1, written)
        if rc != 0 {
            crash("wasi::fd_write failed")
        }
    }
}
