
// This type is used to represent signed integers in the range of -2^63 to 2^63 - 1
@ValueType
@Intrinsic [size: 8]
struct Long {}

// Adds two long values
@WasmInline [opcode: "i64.add"]
fun Long.plus(other: Long): Long {}

// Subtracts two long values
@WasmInline [opcode: "i64.sub"]
fun Long.minus(other: Long): Long {}

// Multiplies two long values
@WasmInline [opcode: "i64.mul"]
fun Long.mul(other: Long): Long {}

// Divides two long values
@WasmInline [opcode: "i64.div_s"]
fun Long.div(other: Long): Long {}

// Divides two unsigned long values
// This function treats the two integers as unsigned integers in the range of 0 to 2^64 - 1
@WasmInline [opcode: "i64.div_u"]
fun Long.unsigned_div(other: Long): Long {}

// Calculates the remainder of the division of two long values
// Note: this is not the same as the modulo operator, the results are different for negative numbers
@WasmInline [opcode: "i64.rem_s"]
fun Long.rem(other: Long): Long {}

// Calculates the remainder of the division of two unsigned long values
// This function treats the two integers as unsigned integers in the range of 0 to 2^64 - 1
@WasmInline [opcode: "i64.rem_u"]
fun Long.unsigned_rem(other: Long): Long {}

// Calculates the modulo of two long values
// The difference between modulo and remainder is that modulo always returns a positive number
// e.g. -1.rem(3) = -1, but -1.modulo(3) = 2
fun Long.modulo(other: Long): Long {
    let rem = this.rem(other)
    ret if rem < 0L { rem + other } else { rem }
}

// Math

// Returns the absolute value
fun Long.abs(): Long = if this < 0L { -this } else { this }

// Returns the negated value
fun Long.neg(): Long = -this

// Bits

// Performs a bitwise AND operation on two long values,
// e.g. 0b1010.bitwise_and(0b1100) = 0b1000
@WasmInline [opcode: "i64.and"]
fun Long.bitwise_and(other: Long): Long {}

// Performs a bitwise OR operation on two long values,
// e.g. 0b1010.bitwise_or(0b1100) = 0b1110
@WasmInline [opcode: "i64.or"]
fun Long.bitwise_or(other: Long): Long {}

// Performs a bitwise XOR operation on two long values,
// e.g. 0b1010.bitwise_xor(0b1100) = 0b0110
@WasmInline [opcode: "i64.xor"]
fun Long.bitwise_xor(other: Long): Long {}

// Performs a bitwise shift left operation on two long values,
// this is equivalent to multiplying the long by 2^[other]
// e.g. 0b1010.bitwise_shift_left(2) = 0b101000
@WasmInline [opcode: "i64.shl"]
fun Long.bitwise_shift_left(other: Long): Long {}

// Performs a bitwise shift right operation on two long values,
// this is equivalent to dividing the long by 2^[other]
// [See Int.bitwise_shift_right()](core/int.nitro)
@WasmInline [opcode: "i64.shr_s"]
fun Long.bitwise_shift_right(other: Long): Long {}

// Performs a bitwise shift right operation on two unsigned long values,
// this is equivalent to dividing the long by 2^[other]
// Unsigned means that the sign bit (the most significant bit) is not copied to the new bits
// [See Int.bitwise_shift_right_unsigned()](core/int.nitro)
@WasmInline [opcode: "i64.shr_u"]
fun Long.bitwise_shift_right_unsigned(other: Long): Long {}

// Counts the number of leading zeros in the binary representation of the long
@WasmInline [opcode: "i64.clz"]
fun Long.bitwise_count_leading_zeros(): Long {}

// Counts the number of trailing zeros in the binary representation of the long
@WasmInline [opcode: "i64.ctz"]
fun Long.bitwise_count_trailing_zeros(): Long {}

// Counts the number of bits that are set to 1 in the binary representation of the long
// Also known as the Population Count (popcnt)
@WasmInline [opcode: "i64.popcnt"]
fun Long.bitwise_count_nonzero_bits(): Long {}

// Comparisons

// Compares two long values for equality
@WasmInline [opcode: "i64.eq"]
fun Long.is_equal(other: Long): Boolean {}

// Compares two long values for inequality
@WasmInline [opcode: "i64.ne"]
fun Long.is_not_equal(other: Long): Boolean {}

// Checks if the long is equal to zero
@WasmInline [opcode: "i64.eqz"]
fun Long.is_equal_zero(): Boolean {}

// Checks if this long value is strictly less than 'other'
@WasmInline [opcode: "i64.lt_s"]
fun Long.less_than_signed(other: Long): Boolean {}

// Checks if this long value is strictly less than 'other',
// but treats the two integers as unsigned integers
// e.g. -1, represented in 2's complement as 2^64 - 1, will be greater than 0
@WasmInline [opcode: "i64.lt_u"]
fun Long.less_than_unsigned(other: Long): Boolean {}

// Checks if this long value is less than or equal to 'other'
@WasmInline [opcode: "i64.le_s"]
fun Long.less_equal_signed(other: Long): Boolean {}

// Checks if this long value is less than or equal to 'other',
// but treats the two integers as unsigned integers
// e.g. -1, represented in 2's complement as 2^64 - 1, will be greater than 0
@WasmInline [opcode: "i64.le_u"]
fun Long.less_equal_unsigned(other: Long): Boolean {}

// Checks if this long value is greater than or equal to 'other'
@WasmInline [opcode: "i64.ge_s"]
fun Long.greater_equal_signed(other: Long): Boolean {}

// Checks if this long value is greater than or equal to 'other',
// but treats the two integers as unsigned integers
@WasmInline [opcode: "i64.ge_u"]
fun Long.greater_equal_unsigned(other: Long): Boolean {}

// Checks if this long value is strictly greater than 'other'
@WasmInline [opcode: "i64.gt_s"]
fun Long.greater_than_signed(other: Long): Boolean {}

// Checks if this long value is strictly greater than 'other',
// but treats the two integers as unsigned integers
@WasmInline [opcode: "i64.gt_u"]
fun Long.greater_than_unsigned(other: Long): Boolean {}

// Function called when a unary minus is applied to a long value, e.g. -(1)
// Note: -1 is parsed as a negative number, so no operation is performed
fun Long.unary_minus(): Long = 0L - this

// Function called when a unary plus is applied to a long value, e.g. +(1)
// Note: +1 is parsed as a positive number, so no operation is performed
fun Long.unary_plus(): Long = this

// Converts a long to a floating point number
@WasmInline [opcode: "f32.convert_i64_s"]
fun Long.to_float(): Float {}

// Converts this long (64 bit) into a byte (8 bit) by keeping the least significant 8 bits
@WasmInline [opcode: "i32.wrap_i64"]
fun Long.to_int(): Int {}

// Converts this long (64 bit) into a byte (8 bit) by keeping the least significant 8 bits
fun Long.to_byte(): Byte = to_int().to_byte()

// Converts this long value to a string
fun Long.to_string(): String {
    let buff = StringBuilder::new()
    buff.add(this)
    ret buff.to_string()
}

// Converts this long value to a string in the given base,
// the base must be in the range of 2 to 36
// e.g. 0x10L.to_string_in_base(16) = "10"
// e.g. 0x10L.to_string_in_base(10) = "16"
// e.g. 0x10L.to_string_in_base(8) = "20"
// e.g. 0x10L.to_string_in_base(2) = "10000"
fun Long.to_string_in_base(radix: Int): String {
    let buff = StringBuilder::new()
    buff.add_long_in_base(this, radix.to_long())
    ret buff.to_string()
}

// Converts an integer value to a character in the given base
// The value must be in the range of 0 to base - 1
// The base must be in the range of 2 to 36
// e.g. 255.to_digit_in_base(16) = 'f'
fun Long.to_digit_in_base(base: Long): Char {
    check(base >= 2L && base <= 36L, "Base must be in the range of 2 to 36")
    check(this >= 0L && this < base, "Value must be in the range of 0 to base - 1")

    ret if this < 10L {
        (a"0" + this.to_int()).to_char()
    } else {
        (a"a" + this.to_int() - 10).to_char()
    }
}

// This function compares two long values and returns an ordering value
// that represents the sorting order of the values
fun Long.get_ordering(other: Long): Ordering {
    if this.is_equal(other) {
        ret Ordering::Equals
    } else {
        if this.greater_equal_signed(other) {
            ret Ordering::Greater
        } else {
            ret Ordering::Less
        }
    }
}

// Optimized version of max() for long values
fun max(a: Long, b: Long): Long {
    ret if a > b { a } else { b }
}

// Optimized version of min() for long values
fun min(a: Long, b: Long): Long {
    ret if a > b { b } else { a }
}

// This function is used to calculate the hash value of a long
// to be used in hash tables and similar data structures
fun Long.get_hash(): Int = (this >> 32L).to_int() ^ this.to_int()
