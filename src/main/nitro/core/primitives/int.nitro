
// This type is used to represent signed integers in the range of -2^31 to 2^31 - 1
@ValueType
@NoGC
@IntrinsicSize [size: 4]
struct Int {}

// Adds two integer values
@WasmInline [opcode: "i32.add"]
fun Int.plus(other: Int): Int {}

// Subtracts two integer values
@WasmInline [opcode: "i32.sub"]
fun Int.minus(other: Int): Int {}

// Multiplies two integer values
@WasmInline [opcode: "i32.mul"]
fun Int.mul(other: Int): Int {}

// Divides two integer values
@WasmInline [opcode: "i32.div_s"]
fun Int.div(other: Int): Int {}

// Divides two unsigned integer values
// This function treats the two integers as unsigned integers in the range of 0 to 2^32 - 1
@WasmInline [opcode: "i32.div_u"]
fun Int.unsigned_div(other: Int): Int {}

// Calculates the remainder of the division of two integer values
// Note: this is not the same as the modulo operator, the results are different for negative numbers
@WasmInline [opcode: "i32.rem_s"]
fun Int.rem(other: Int): Int {}

// Calculates the remainder of the division of two unsigned integer values
// This function treats the two integers as unsigned integers in the range of 0 to 2^32 - 1
@WasmInline [opcode: "i32.rem_u"]
fun Int.unsigned_rem(other: Int): Int {}

// Calculates the modulo of two integer values
// The difference between modulo and remainder is that modulo always returns a positive number
// e.g. -1.rem(3) = -1, but -1.modulo(3) = 2
fun Int.modulo(other: Int): Int {
    let rem = this.rem(other)
    ret if rem < 0 { rem + other } else { rem }
}

// Math

// Returns the absolute value
fun Int.abs(): Int = if this < 0 { -this } else { this }

// Returns the negated value
fun Int.neg(): Int = -this

// Bits

// Performs a bitwise NOT operation on the integer value, i.e. flips the bits
// e.g. 0b1010.bitwise_not() = 0b0101
fun Int.bitwise_not(): Int = this ^ -1

// Performs a bitwise AND operation on two integer values,
// e.g. 0b1010.bitwise_and(0b1100) = 0b1000
@WasmInline [opcode: "i32.and"]
fun Int.bitwise_and(other: Int): Int {}

// Performs a bitwise OR operation on two integer values,
// e.g. 0b1010.bitwise_or(0b1100) = 0b1110
@WasmInline [opcode: "i32.or"]
fun Int.bitwise_or(other: Int): Int {}

// Performs a bitwise XOR operation on two integer values,
// e.g. 0b1010.bitwise_xor(0b1100) = 0b0110
@WasmInline [opcode: "i32.xor"]
fun Int.bitwise_xor(other: Int): Int {}

// Performs a bitwise shift left operation on two integer values,
// this is equivalent to multiplying the integer by 2^[other]
// e.g. 0b1010.bitwise_shift_left(2) = 0b101000
@WasmInline [opcode: "i32.shl"]
fun Int.bitwise_shift_left(other: Int): Int {}

// Performs a bitwise shift right operation on two integer values,
// this is equivalent to dividing the integer by 2^[other]
// The sign bit (the most significant bit) is copied to the new bits,
// (-65281) 0b11111111111111110000000011111111.bitwise_shift_right(8) = 0b11111111111111111111111100000000
// e.g. 0b1010.bitwise_shift_right(2) = 0b10
@WasmInline [opcode: "i32.shr_s"]
fun Int.bitwise_shift_right(other: Int): Int {}

// Performs a bitwise shift right operation on two unsigned integer values,
// this is equivalent to dividing the integer by 2^[other]
// Unsigned means that the sign bit (the most significant bit) is not copied to the new bits,
// (-65281) 0b11111111111111110000000011111111.bitwise_shift_right_unsigned(8) = 0b00000000111111111111111100000000
// e.g. 0b1010.bitwise_shift_right_unsigned(2) = 0b10
@WasmInline [opcode: "i32.shr_u"]
fun Int.bitwise_shift_right_unsigned(other: Int): Int {}

// Counts the number of leading zeros in the binary representation of the integer
@WasmInline [opcode: "i32.clz"]
fun Int.bitwise_count_leading_zeros(): Int {}

// Counts the number of trailing zeros in the binary representation of the integer
@WasmInline [opcode: "i32.ctz"]
fun Int.bitwise_count_trailing_zeros(): Int {}

// Counts the number of bits that are set to 1 in the binary representation of the integer
// Also known as the Population Count (popcnt)
@WasmInline [opcode: "i32.popcnt"]
fun Int.bitwise_count_nonzero_bits(): Int {}

// Comparisons

// Compares two integer values for equality
@WasmInline [opcode: "i32.eq"]
fun Int.is_equal(other: Int): Boolean {}

// Compares two integer values for inequality
@WasmInline [opcode: "i32.ne"]
fun Int.is_not_equal(other: Int): Boolean {}

// Checks if the integer is equal to zero
@WasmInline [opcode: "i32.eqz"]
fun Int.is_equal_zero(): Boolean {}

// Checks if this integer value is strictly less than 'other'
@WasmInline [opcode: "i32.lt_s"]
fun Int.less_than_signed(other: Int): Boolean {}

// Checks if this integer value is strictly less than 'other',
// but treats the two integers as unsigned integers
// e.g. -1, represented in 2's complement as 2^32 - 1, will be greater than 0
@WasmInline [opcode: "i32.lt_u"]
fun Int.less_than_unsigned(other: Int): Boolean {}

// Checks if this integer value is less than or equal to 'other'
@WasmInline [opcode: "i32.le_s"]
fun Int.less_equal_signed(other: Int): Boolean {}

// Checks if this integer value is less than or equal to 'other',
// but treats the two integers as unsigned integers
// e.g. -1, represented in 2's complement as 2^32 - 1, will be greater than 0
@WasmInline [opcode: "i32.le_u"]
fun Int.less_equal_unsigned(other: Int): Boolean {}

// Checks if this integer value is greater than or equal to 'other'
@WasmInline [opcode: "i32.ge_s"]
fun Int.greater_equal_signed(other: Int): Boolean {}

// Checks if this integer value is greater than or equal to 'other',
// but treats the two integers as unsigned integers
@WasmInline [opcode: "i32.ge_u"]
fun Int.greater_equal_unsigned(other: Int): Boolean {}

// Checks if this integer value is strictly greater than 'other'
@WasmInline [opcode: "i32.gt_s"]
fun Int.greater_than_signed(other: Int): Boolean {}

// Checks if this integer value is strictly greater than 'other',
// but treats the two integers as unsigned integers
@WasmInline [opcode: "i32.gt_u"]
fun Int.greater_than_unsigned(other: Int): Boolean {}

// Function called when a unary minus is applied to a integer value, e.g. -(1)
// Note: -1 is parsed as a negative number, so no operation is performed
fun Int.unary_minus(): Int = 0 - this

// Function called when a unary plus is applied to a integer value, e.g. +(1)
// Note: +1 is parsed as a positive number, so no operation is performed
fun Int.unary_plus(): Int = this

// Reinterpret the bits of this 32bit integer as a float
@WasmInline [opcode: "f32.reinterpret_i32"]
fun Int.reinterpret_as_float(): Float {}

// Converts an integer to a floating point number
@WasmInline [opcode: "f32.convert_i32_s"]
fun Int.to_float(): Float {}

// Converts this 32 bit integer into a 64 bit long
@WasmInline [opcode: "i64.extend_i32_s"]
fun Int.to_long(): Long {}

// Converts this 32 bit integer into a 8 bit integer
 @WasmInline [opcode: "i32.and" , arg0: 0xFF]
fun Int.to_byte(): Byte {}

// Converts this integer value to a string
fun Int.to_string(): String = to_string_in_base(10)

// Converts this integer value to a hexadecimal string with fixed width
fun Int.to_hex(): String {
    let buffer = StringBuilder::new()
    buffer.add_hex(this)
    ret buffer.to_string()
}

// Converts this integer value to a string in the given base,
// the base must be in the range of 2 to 36
// e.g. 0x10.to_string_in_base(16) = "10"
// e.g. 0x10.to_string_in_base(10) = "16"
// e.g. 0x10.to_string_in_base(8) = "20"
// e.g. 0x10.to_string_in_base(2) = "10000"
fun Int.to_string_in_base(base: Int): String {
    check(base >= 2 && base <= 36, "Base must be in the range of 2 to 36")

    // Optimization for zero the most common case and easier to handle in multiple bases
    if this == 0 {
        ret "0"
    }

    let buffer = StringBuilder::new()
    buffer.add_int_in_base(base, this)
    ret buffer.to_string()

    test! "Convert numbers to string" {
        check(0.to_string_in_base(10) == "0", "0 dec")
        check(1.to_string_in_base(10) == "1", "1 dec")
        check(-10.to_string_in_base(10) == "-10", "-10 dec ${-10.to_string_in_base(10)}")
        check(-10.to_string_in_base(16) == "-a", "-10 hex")
        check(255.to_string_in_base(16) == "ff", "255 hex")
        check(255.to_string_in_base(2) == "11111111", "255 bin")
        check(255.to_string_in_base(8) == "377", "255 oct")
        check(255.to_string_in_base(10) == "255", "255 dec")
        check(255.to_string_in_base(36) == "73", "255 base 36")
        check(2_147_483_647.to_string_in_base(10) == "2147483647", "max int")
        check(-2_147_483_648.to_string_in_base(10) == "-2147483648", "min int")
        check(2_147_483_647.to_string_in_base(2) == "1111111111111111111111111111111", "max int bin")
    }
}

// Converts an integer value to a character in the given base
// The value must be in the range of 0 to base - 1
// The base must be in the range of 2 to 36
// e.g. 255.to_digit_in_base(16) = 'f'
fun Int.to_digit_in_base(base: Int): Char {
    check(base >= 2 && base <= 36, "Base must be in the range of 2 to 36")
    check(this >= 0 && this < base, "Value must be in the range of 0 to base - 1")

    ret if this < 10 {
        (a"0" + this).to_char()
    } else {
        (a"a" + this - 10).to_char()
    }
}

// This function compares two integer values and returns an ordering value
// that represents the sorting order of the values
@Autogenerated [name: "int_get_ordering"]
fun Int.get_ordering(other: Int): Ordering {}

// Optimized version of max() for integer values
fun max(a: Int, b: Int): Int {
    ret if a > b { a } else { b }
}

// Optimized version of min() for integer values
fun min(a: Int, b: Int): Int {
    ret if a > b { b } else { a }
}

// This function is used to calculate the hash value of an integer
// to be used in hash tables and similar data structures
fun Int.get_hash(): Int = this

// Clamps an Int between a minimum and a maximum value
fun Int.clamp(min: Int, max: Int): Int {
    ret when {
        this < min -> min
        this > max -> max
        else -> this
    }
}

// Rounds the integer up to the nearest power of two, if it is already a power of two it is returned as is
fun Int.round_up_to_power_of_two(): Int {
    let value = this
    value -= 1
    value = value | (value >> 1)
    value = value | (value >> 2)
    value = value | (value >> 4)
    value = value | (value >> 8)
    value = value | (value >> 16)
    value += 1
    ret value
}
