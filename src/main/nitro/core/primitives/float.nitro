
// This type is used to represent floating point numbers defined in the IEEE 754 standard
@ValueType
@NoGC
@IntrinsicSize [size: 4]
struct Float {}

// Max representable value
let float_max: Float = 0b0111_1111_0111_1111_1111_1111_1111_1111.reinterpret_as_float()

// Min representable value (closest to 0)
let float_min: Float = 0b0000_0000_1000_0000_0000_0000_0000_0000.reinterpret_as_float()

// Standard machine epsilon (the gap between 1 and the next largest floating point number).
let float_epsilon: Float = 0b0011_0100_0000_0000_0000_0000_0000_0000.reinterpret_as_float()

// Quiet NaN (Not a Number), be careful with NaN, float_nan == float_nan will return false by IEEE 754 definition
let float_nan: Float = 0b0111_1111_1100_0000_0000_0000_0000_0001.reinterpret_as_float()

// Positive infinity, result of 1 / 0
let float_infinity: Float = 0b0111_1111_1000_0000_0000_0000_0000_0000.reinterpret_as_float()

// Negative infinity, result of -1 / 0
let float_negative_infinity: Float = 0b1111_1111_1000_0000_0000_0000_0000_0000.reinterpret_as_float()

// Max float value that can be safely, without loosing precision, be casted into an integer (2^24)
let float_max_safe_integer: Float = 0b0100_1011_0111_1111_1111_1111_1111_1111.reinterpret_as_float()

// Same as float_max_safe_integer but negative, the smallest float that can be safely casted into an integer
let float_negative_max_safe_integer: Float = 0b1100_1011_1000_0000_0000_0000_0000_0000.reinterpret_as_float()

// Adds two floating point numbers
@WasmInline [opcode: "f32.add"]
fun Float.plus(other: Float): Float {}

// Subtracts two floating point numbers
@WasmInline [opcode: "f32.sub"]
fun Float.minus(other: Float): Float {}

// Multiplies two floating point numbers
@WasmInline [opcode: "f32.mul"]
fun Float.mul(other: Float): Float {}

// Fused multiply-add operation
// Unfortunately, WASM does not provide f32.fma, so its implemented using f32.mul and f32.add
fun Float.fma(m: Float, a: Float): Float = this * m + a

// Divides two floating point numbers
@WasmInline [opcode: "f32.div"]
fun Float.div(other: Float): Float {}

// Returns the remainder of two floating point numbers
// Note: this is not the same as the modulo operator, the results are different for negative numbers
// WASM does not provide f32.rem, so its implemented using f32.div and f32.floor
fun Float.rem(other: Float): Float = this - (floor(this / other) * other)

// Returns the smallest of two floating point numbers
// If any of the numbers is NaN, the result will be NaN
@WasmInline [opcode: "f32.min"]
fun Float.min(other: Float): Float {}

// Returns the largest of two floating point numbers
// If any of the numbers is NaN, the result will be NaN
@WasmInline [opcode: "f32.max"]
fun Float.max(other: Float): Float {}

// Returns this number with the sign of the provided number
@WasmInline [opcode: "f32.copysign"]
fun Float.copy_sign(other: Float): Float {}

// Returns the absolute value of a floating point number
@WasmInline [opcode: "f32.abs"]
fun Float.abs(): Float {}

// Returns the negated value of a floating point number
// For 0, -0 is returned
// For NaN, NaN is returned
@WasmInline [opcode: "f32.neg"]
fun Float.neg(): Float {}

// Returns the square root of a floating point number
@WasmInline [opcode: "f32.sqrt"]
fun Float.sqrt(): Float {}

// Rounds up and returns the smallest integer greater than or equal to a given number
@WasmInline [opcode: "f32.ceil"]
fun Float.ceil(): Float {}

// Rounds down and returns the largest integer less than or equal to a given number
@WasmInline [opcode: "f32.floor"]
fun Float.floor(): Float {}

// Returns the integer part of a number by removing any fractional digits
@WasmInline [opcode: "f32.trunc"]
fun Float.trunc(): Float {}

// Returns the nearest integer to a given number
@WasmInline [opcode: "f32.nearest"]
fun Float.nearest(): Float {}

fun Float.round(): Float = this.nearest()

// Converts a floating point number to an integer, by removing any fractional digits
@WasmInline [opcode: "i32.trunc_f32_s"]
fun Float.to_int(): Int {}

// Converts a floating point number to a long, by removing any fractional digits
@WasmInline [opcode: "i64.trunc_f32_s"]
fun Float.to_long(): Long {}

// Comparisons

// This function compares two floating point numbers for equality
@WasmInline [opcode: "f32.eq"]
fun Float.is_equal(other: Float): Boolean {}

// This function compares two floating point numbers for inequality
@WasmInline [opcode: "f32.ne"]
fun Float.is_not_equal(other: Float): Boolean {}

// Checks if this floating point number is strictly less than 'other'
@WasmInline [opcode: "f32.lt"]
fun Float.less_than(other: Float): Boolean {}

// Checks if this floating point number is less than or equal to 'other'
@WasmInline [opcode: "f32.le"]
fun Float.less_equal(other: Float): Boolean {}

// Checks if this floating point number is greater than or equal to 'other'
@WasmInline [opcode: "f32.ge"]
fun Float.greater_equal(other: Float): Boolean {}

// Checks if this floating point number is strictly greater than 'other'
@WasmInline [opcode: "f32.gt"]
fun Float.greater_than(other: Float): Boolean {}

// Reinterpret the bits of this float as a 32bit integer
@WasmInline [opcode: "i32.reinterpret_f32"]
fun Float.reinterpret_as_int(): Int {}

// Checks if this floating point number is NaN
// Note: NaN is not equal to itself, so NaN == NaN will return false
fun Float.is_nan(): Boolean = this != this

// Checks if this floating point number is finite, meaning it is not NaN, -Inf or +Inf
fun Float.is_finite(): Boolean = !this.is_infinite() && !this.is_nan()

// Checks if this floating point number is infinite, meaning it is -Inf or +Inf
fun Float.is_infinite(): Boolean = this == float_infinity || this == float_negative_infinity

// Checks if this floating point number has no fractional digits
fun Float.is_integer(): Boolean = this.is_finite() && this.floor() == this

// Determines whether the provided value is a number that is a safe integer
// The safe integers consist of all integers from -(2^53 - 1) to 2^53 - 1, inclusive (+/- 9,007,199,254,740,991).
// A safe integer is an integer that:
// - can be exactly represented as an IEEE-754 double precision number, and
// - whose IEEE-754 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation
fun Float.is_safe_integer(): Boolean = this.is_integer() && (this >= float_negative_max_safe_integer) && (this <= float_max_safe_integer)

// Function called when a unary minus is applied to a floating point number, e.g. -(1.0)
// Note: -1.0 is parsed as a negative number, so no operation is performed
fun Float.unary_minus(): Float = this.neg()

// Function called when a unary plus is applied to a floating point number, e.g. +(1.0)
fun Float.unary_plus(): Float = this

// Linear interpolation between this and other value
// t is a value between 0 and 1
// t = 0 returns this, t = 1 returns other, t = 0.5 returns the average of this and other
fun Float.lerp(other: Float, t: Float): Float {
    ret this * (1f - t) + other * t
}

// Converts this floating point number into a string
fun Float.to_string(): String {
    let buff = StringBuilder::new()
    buff.add(this)
    ret buff.to_string()
}

// This function compares two floating point numbers and returns an ordering value
// that represents the sorting order of the values
@Autogenerated [name: "float_get_ordering"]
fun Float.get_ordering(other: Float): Ordering {}

// Clamps a floating point number between a minimum and a maximum value
fun Float.clamp(min: Float, max: Float): Float {
    ret when {
        this < min -> min
        this > max -> max
        else -> this
    }
}
