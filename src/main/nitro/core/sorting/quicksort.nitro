
// Sorts the list using the quicksort algorithm
fun <#Item: GetOrdering> List<#Item>.quicksort_in_place() {
    this.quicksort_rec(0, this.len - 1, false)
}

// Recursive quicksort function, the partition parameter is used to toggle between finding the partition index and
// sorting the two sublists
fun <#Item: GetOrdering> List<#Item>.quicksort_rec(low: Int, high: Int, partition: Boolean): Int {
    // Find the partition index
    if partition {
        let pivot = items[high]
        let i = low - 1
        let j = low

        while j < high {
            if items[j] <= pivot {
                i += 1
                let temp = items[i]
                items[i] = items[j]
                items[j] = temp
            }
            j += 1
        }

        let temp = items[i + 1]
        items[i + 1] = items[high]
        items[high] = temp
        ret i + 1
    }

    if low >= high {
        ret 0
    }

    // regular recursive quicksort
    let pivot = quicksort_rec(low, high, true)

    quicksort_rec(low, pivot - 1, false)
    quicksort_rec(pivot + 1, high, false)
    ret 0
}
