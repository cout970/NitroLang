include "./constants.nitro"
include "./color.nitro"

// Opaque Types (references to JS objects)
struct WebGLRenderingContext { ptr: Int }
struct WebGLContextAttributes { ptr: Int }
struct WebGLProgram { ptr: Int }
struct WebGLBuffer { ptr: Int }
struct WebGLFramebuffer { ptr: Int }
struct WebGLRenderbuffer { ptr: Int }
struct WebGLTexture { ptr: Int }
struct WebGLShader { ptr: Int }
struct WebGLShaderPrecisionFormat { ptr: Int }
struct WebGLUniformLocation { ptr: Int }
struct WebGLActiveInfo { ptr: Int }

@Extern [lib: "bindings", name: "window_request_animation_frame"]
fun Window::request_animation_frame(callback_js_name: String): Int {}

@Extern [lib: "bindings", name: "performance_now_ns"]
fun Performance::now_ns(): Long {}

fun Performance::now(): Instant = Instant::from_nanoseconds(Performance::now_ns())

@Extern [lib: "bindings", name: "webgl_get_context_webgl"]
fun HtmlCanvasElement.get_context_webgl(): Optional<WebGLRenderingContext>

@Extern [lib: "bindings", name: "webgl_get_canvas"]
fun WebGLRenderingContext.get_canvas(): Optional<HtmlCanvasElement> {}

@Extern [lib: "bindings", name: "webgl_get_drawing_buffer_width"]
fun WebGLRenderingContext.get_drawing_buffer_width(): Int {}

@Extern [lib: "bindings", name: "webgl_get_drawing_buffer_height"]
fun WebGLRenderingContext.get_drawing_buffer_height(): Int {}

@Extern [lib: "bindings", name: "webgl_get_context_attributes"]
fun WebGLRenderingContext.get_context_attributes(): Optional<WebGLContextAttributes> {}

@Extern [lib: "bindings", name: "webgl_is_context_lost"]
fun WebGLRenderingContext.is_context_lost(): Boolean {}

@Extern [lib: "bindings", name: "webgl_scissor"]
fun WebGLRenderingContext.scissor(x: Int, y: Int, width: Int, height: Int) {}

@Extern [lib: "bindings", name: "webgl_viewport"]
fun WebGLRenderingContext.viewport(x: Int, y: Int, width: Int, height: Int) {}

@Extern [lib: "bindings", name: "webgl_clear_color"]
fun WebGLRenderingContext.clear_color(red: Float, green: Float, blue: Float, alpha: Float) {}

@Extern [lib: "bindings", name: "webgl_get_parameter_as_int"]
fun WebGLRenderingContext.get_parameter_as_int(parameter_constant: Int): Optional<Int> {}

@Extern [lib: "bindings", name: "webgl_get_parameter_as_float"]
fun WebGLRenderingContext.get_parameter_as_float(parameter_constant: Int): Optional<Float> {}

@Extern [lib: "bindings", name: "webgl_get_parameter_as_boolean"]
fun WebGLRenderingContext.get_parameter_as_boolean(parameter_constant: Int): Optional<Boolean> {}

@Extern [lib: "bindings", name: "webgl_get_parameter_as_string"]
fun WebGLRenderingContext.get_parameter_as_string(parameter_constant: Int): Optional<String> {}

@Extern [lib: "bindings", name: "webgl_get_parameter_as_float_array"]
fun WebGLRenderingContext.get_parameter_as_float_array(parameter_constant: Int): Optional<Float32Array> {}

@Extern [lib: "bindings", name: "webgl_get_parameter_as_int_array"]
fun WebGLRenderingContext.get_parameter_as_int_array(parameter_constant: Int): Optional<Int32Array> {}

@Extern [lib: "bindings", name: "webgl_get_parameter_as_program"]
fun WebGLRenderingContext.get_parameter_as_program(parameter_constant: Int): Optional<WebGLProgram> {}

@Extern [lib: "bindings", name: "webgl_get_parameter_as_buffer"]
fun WebGLRenderingContext.get_parameter_as_buffer(parameter_constant: Int): Optional<WebGLBuffer> {}

@Extern [lib: "bindings", name: "webgl_get_parameter_as_framebuffer"]
fun WebGLRenderingContext.get_parameter_as_framebuffer(parameter_constant: Int): Optional<WebGLFramebuffer> {}

@Extern [lib: "bindings", name: "webgl_get_parameter_as_renderbuffer"]
fun WebGLRenderingContext.get_parameter_as_renderbuffer(parameter_constant: Int): Optional<WebGLRenderbuffer> {}

@Extern [lib: "bindings", name: "webgl_get_parameter_as_texture"]
fun WebGLRenderingContext.get_parameter_as_texture(parameter_constant: Int): Optional<WebGLTexture> {}

@Extern [lib: "bindings", name: "webgl_is_enabled"]
fun WebGLRenderingContext.is_enabled(capability_constant: Int): Boolean {}

@Extern [lib: "bindings", name: "webgl_enable"]
fun WebGLRenderingContext.enable(capability_constant: Int) {}

@Extern [lib: "bindings", name: "webgl_disable"]
fun WebGLRenderingContext.disable(capability_constant: Int) {}

@Extern [lib: "bindings", name: "webgl_get_error"]
fun WebGLRenderingContext.get_error(): Int {}

@Extern [lib: "bindings", name: "webgl_hint"]
fun WebGLRenderingContext.hint(target: Int, mode: Int) {}

@Extern [lib: "bindings", name: "webgl_front_face"]
fun WebGLRenderingContext.front_face(mode: Int) {}

@Extern [lib: "bindings", name: "webgl_line_width"]
fun WebGLRenderingContext.line_width(width: Float) {}

// Buffers

@Extern [lib: "bindings", name: "webgl_create_buffer"]
fun WebGLRenderingContext.create_buffer(): Optional<WebGLBuffer> {}

@Extern [lib: "bindings", name: "webgl_delete_buffer"]
fun WebGLRenderingContext.delete_buffer(buffer: WebGLBuffer) {}

@Extern [lib: "bindings", name: "webgl_bind_buffer"]
fun WebGLRenderingContext.bind_buffer(target: Int, buffer: Optional<WebGLBuffer>) {}

@Extern [lib: "bindings", name: "webgl_buffer_data_float"]
fun WebGLRenderingContext.buffer_data_float(target: Int, data: Float32Array, usage: Int) {}

@Extern [lib: "bindings", name: "webgl_buffer_data_int"]
fun WebGLRenderingContext.buffer_data_int(target: Int, data: Int32Array, usage: Int) {}

@Extern [lib: "bindings", name: "webgl_buffer_sub_data_float"]
fun WebGLRenderingContext.buffer_sub_data_float(target: Int, offset: Int, data: Optional<Float32Array>) {}

@Extern [lib: "bindings", name: "webgl_buffer_sub_data_int"]
fun WebGLRenderingContext.buffer_sub_data_int(target: Int, offset: Int, data: Optional<Int32Array>) {}

@Extern [lib: "bindings", name: "webgl_get_buffer_parameter_as_int"]
fun WebGLRenderingContext.get_buffer_parameter_as_int(target: Int, parameter_constant: Int): Optional<Int> {}

@Extern [lib: "bindings", name: "webgl_is_buffer"]
fun WebGLRenderingContext.is_buffer(buffer: WebGLBuffer): Boolean {}

// Framebuffer

@Extern [lib: "bindings", name: "webgl_bind_framebuffer"]
fun WebGLRenderingContext.bind_framebuffer(target: Int, framebuffer: Optional<WebGLFramebuffer>) {}

@Extern [lib: "bindings", name: "webgl_check_framebuffer_status"]
fun WebGLRenderingContext.check_framebuffer_status(target: Int): Int {}

@Extern [lib: "bindings", name: "webgl_create_framebuffer"]
fun WebGLRenderingContext.create_framebuffer(): Optional<WebGLFramebuffer> {}

@Extern [lib: "bindings", name: "webgl_delete_framebuffer"]
fun WebGLRenderingContext.delete_framebuffer(framebuffer: WebGLFramebuffer) {}

@Extern [lib: "bindings", name: "webgl_framebuffer_renderbuffer"]
fun WebGLRenderingContext.framebuffer_renderbuffer(target: Int, attachment: Int, renderbuffer_target: Int, renderbuffer: Optional<WebGLRenderbuffer>) {}

@Extern [lib: "bindings", name: "webgl_framebuffer_texture_2d"]
fun WebGLRenderingContext.framebuffer_texture_2d(target: Int, attachment: Int, textarget: Int, texture: Optional<WebGLTexture>, level: Int) {}

@Extern [lib: "bindings", name: "webgl_get_framebuffer_attachment_parameter"]
fun WebGLRenderingContext.get_framebuffer_attachment_parameter(target: Int, attachment: Int, parameter_constant: Int): Optional<Int> {}

@Extern [lib: "bindings", name: "webgl_is_framebuffer"]
fun WebGLRenderingContext.is_framebuffer(framebuffer: WebGLFramebuffer): Boolean {}

@Extern [lib: "bindings", name: "webgl_read_pixels"]
fun WebGLRenderingContext.read_pixels(x: Int, y: Int, width: Int, height: Int, format: Int, type_constant: Int, pixels: Optional<UInt8Array>) {}

// Renderbuffers

@Extern [lib: "bindings", name: "webgl_bind_renderbuffer"]
fun WebGLRenderingContext.bind_renderbuffer(target: Int, renderbuffer: Optional<WebGLRenderbuffer>) {}

@Extern [lib: "bindings", name: "webgl_create_renderbuffer"]
fun WebGLRenderingContext.create_renderbuffer(): Optional<WebGLRenderbuffer> {}

@Extern [lib: "bindings", name: "webgl_delete_renderbuffer"]
fun WebGLRenderingContext.delete_renderbuffer(renderbuffer: WebGLRenderbuffer) {}

@Extern [lib: "bindings", name: "webgl_get_renderbuffer_parameter_as_int"]
fun WebGLRenderingContext.get_renderbuffer_parameter_as_int(target: Int, parameter_constant: Int): Optional<Int> {}

@Extern [lib: "bindings", name: "webgl_is_renderbuffer"]
fun WebGLRenderingContext.is_renderbuffer(renderbuffer: WebGLRenderbuffer): Boolean {}

@Extern [lib: "bindings", name: "webgl_renderbuffer_storage"]
fun WebGLRenderingContext.renderbuffer_storage(target: Int, internal_format: Int, width: Int, height: Int) {}

// Textures

@Extern [lib: "bindings", name: "webgl_bind_texture"]
fun WebGLRenderingContext.bind_texture(target: Int, texture: Optional<WebGLTexture>) {}

@Extern [lib: "bindings", name: "webgl_create_texture"]
fun WebGLRenderingContext.create_texture(): Optional<WebGLTexture> {}

@Extern [lib: "bindings", name: "webgl_delete_texture"]
fun WebGLRenderingContext.delete_texture(texture: WebGLTexture) {}

@Extern [lib: "bindings", name: "webgl_tex_image_2d"]
fun WebGLRenderingContext.tex_image_2d(target: Int, level: Int, internal_format: Int, width: Int, height: Int, border: Int, format: Int, type_constant: Int, pixels: Optional<UInt8Array>) {}

@Extern [lib: "bindings", name: "webgl_tex_sub_image_2d"]
fun WebGLRenderingContext.tex_sub_image_2d(target: Int, level: Int, x_offset: Int, y_offset: Int, width: Int, height: Int, format: Int, type_constant: Int, pixels: Optional<UInt8Array>) {}

@Extern [lib: "bindings", name: "webgl_tex_parameterf"]
fun WebGLRenderingContext.tex_parameter_float(target: Int, pname: Int, param: Float) {}

@Extern [lib: "bindings", name: "webgl_tex_parameteri"]
fun WebGLRenderingContext.tex_parameter_int(target: Int, pname: Int, param: Int) {}

// Programs and Shaders

@Extern [lib: "bindings", name: "webgl_create_program"]
fun WebGLRenderingContext.create_program(): Optional<WebGLProgram> {}

@Extern [lib: "bindings", name: "webgl_delete_program"]
fun WebGLRenderingContext.delete_program(program: WebGLProgram) {}

@Extern [lib: "bindings", name: "webgl_use_program"]
fun WebGLRenderingContext.use_program(program: Optional<WebGLProgram>) {}

@Extern [lib: "bindings", name: "webgl_link_program"]
fun WebGLRenderingContext.link_program(program: WebGLProgram) {}

@Extern [lib: "bindings", name: "webgl_get_program_parameter_as_int"]
fun WebGLRenderingContext.get_program_parameter_as_int(program: WebGLProgram, parameter_constant: Int): Optional<Int> {}

@Extern [lib: "bindings", name: "webgl_get_program_parameter_as_boolean"]
fun WebGLRenderingContext.get_program_parameter_as_boolean(program: WebGLProgram, parameter_constant: Int): Optional<Boolean> {}

@Extern [lib: "bindings", name: "webgl_get_program_info_log"]
fun WebGLRenderingContext.get_program_info_log(program: WebGLProgram): String {}

@Extern [lib: "bindings", name: "webgl_is_program"]
fun WebGLRenderingContext.is_program(program: WebGLProgram): Boolean {}

@Extern [lib: "bindings", name: "webgl_bind_attrib_location"]
fun WebGLRenderingContext.bind_attrib_location(program: WebGLProgram, index: Int, name: String) {}

@Extern [lib: "bindings", name: "webgl_create_shader"]
fun WebGLRenderingContext.create_shader(shader_type: Int): Optional<WebGLShader> {}

@Extern [lib: "bindings", name: "webgl_delete_shader"]
fun WebGLRenderingContext.delete_shader(shader: WebGLShader) {}

@Extern [lib: "bindings", name: "webgl_attach_shader"]
fun WebGLRenderingContext.attach_shader(program: WebGLProgram, shader: WebGLShader) {}

@Extern [lib: "bindings", name: "webgl_detach_shader"]
fun WebGLRenderingContext.detach_shader(program: WebGLProgram, shader: WebGLShader) {}

@Extern [lib: "bindings", name: "webgl_compile_shader"]
fun WebGLRenderingContext.compile_shader(shader: WebGLShader) {}

@Extern [lib: "bindings", name: "webgl_get_attached_shaders"]
fun WebGLRenderingContext.get_attached_shaders(program: WebGLProgram): Array<WebGLShader>

@Extern [lib: "bindings", name: "webgl_get_shader_parameter_as_int"]
fun WebGLRenderingContext.get_shader_parameter_as_int(shader: WebGLShader, parameter_constant: Int): Optional<Int> {}

@Extern [lib: "bindings", name: "webgl_get_shader_parameter_as_boolean"]
fun WebGLRenderingContext.get_shader_parameter_as_boolean(shader: WebGLShader, parameter_constant: Int): Optional<Boolean> {}

@Extern [lib: "bindings", name: "webgl_get_shader_info_log"]
fun WebGLRenderingContext.get_shader_info_log(shader: WebGLShader): String {}

@Extern [lib: "bindings", name: "webgl_get_shader_source"]
fun WebGLRenderingContext.get_shader_source(shader: WebGLShader): String {}

@Extern [lib: "bindings", name: "webgl_shader_source"]
fun WebGLRenderingContext.shader_source(shader: WebGLShader, source: String) {}

@Extern [lib: "bindings", name: "webgl_is_shader"]
fun WebGLRenderingContext.is_shader(shader: WebGLShader): Boolean {}

@Extern [lib: "bindings", name: "webgl_get_shader_precision_format"]
fun WebGLRenderingContext.get_shader_precision_format(shader_type: Int, precision_type: Int): Optional<WebGLShaderPrecisionFormat> {}

@Extern [lib: "bindings", name: "webgl_get_shader_precision_format_range_min"]
fun WebGLShaderPrecisionFormat.get_range_min(): Int {}

@Extern [lib: "bindings", name: "webgl_get_shader_precision_format_range_max"]
fun WebGLShaderPrecisionFormat.get_range_max(): Int {}

@Extern [lib: "bindings", name: "webgl_get_shader_precision_format_precision"]
fun WebGLShaderPrecisionFormat.get_precision(): Int {}

// Uniforms and Attributes

@Extern [lib: "bindings", name: "webgl_enable_vertex_attrib_array"]
fun WebGLRenderingContext.enable_vertex_attrib_array(index: Int) {}

@Extern [lib: "bindings", name: "webgl_disable_vertex_attrib_array"]
fun WebGLRenderingContext.disable_vertex_attrib_array(index: Int) {}

@Extern [lib: "bindings", name: "webgl_get_active_attrib"]
fun WebGLRenderingContext.get_active_attrib(program: WebGLProgram, index: Int): Optional<WebGLActiveInfo> {}

@Extern [lib: "bindings", name: "webgl_get_active_uniform"]
fun WebGLRenderingContext.get_active_uniform(program: WebGLProgram, index: Int): Optional<WebGLActiveInfo> {}

@Extern [lib: "bindings", name: "webgl_active_info_get_name"]
fun WebGLActiveInfo.get_name(): String {}

@Extern [lib: "bindings", name: "webgl_active_info_get_size"]
fun WebGLActiveInfo.get_size(): Int {}

@Extern [lib: "bindings", name: "webgl_active_info_get_type"]
fun WebGLActiveInfo.get_type(): Int {}

@Extern [lib: "bindings", name: "webgl_get_attrib_location"]
fun WebGLRenderingContext.get_attrib_location(program: WebGLProgram, name: String): Int {}

@Extern [lib: "bindings", name: "webgl_get_uniform"]
fun WebGLRenderingContext.get_uniform(program: WebGLProgram, location: Optional<WebGLUniformLocation>): Optional<JsValue> {}

@Extern [lib: "bindings", name: "webgl_get_uniform_location"]
fun WebGLRenderingContext.get_uniform_location(program: WebGLProgram, name: String): Optional<WebGLUniformLocation> {}

@Extern [lib: "bindings", name: "webgl_get_vertex_attrib"]
fun WebGLRenderingContext.get_vertex_attrib(index: Int, pname: Int): Optional<JsValue> {}

@Extern [lib: "bindings", name: "webgl_get_vertex_attrib_offset"]
fun WebGLRenderingContext.get_vertex_attrib_offset(index: Int, pname: Int): Int {}

// Set uniforms

// 1 parameters

@Extern [lib: "bindings", name: "webgl_uniform1f"]
fun WebGLRenderingContext.uniform1f(location: Optional<WebGLUniformLocation>, x: Float) {}

@Extern [lib: "bindings", name: "webgl_uniform1fv"]
fun WebGLRenderingContext.uniform1fv(location: Optional<WebGLUniformLocation>, value: Float32Array) {}

@Extern [lib: "bindings", name: "webgl_uniform1i"]
fun WebGLRenderingContext.uniform1i(location: Optional<WebGLUniformLocation>, x: Int) {}

@Extern [lib: "bindings", name: "webgl_uniform1iv"]
fun WebGLRenderingContext.uniform1iv(location: Optional<WebGLUniformLocation>, value: Int32Array) {}

// 2 parameters

@Extern [lib: "bindings", name: "webgl_uniform2f"]
fun WebGLRenderingContext.uniform2f(location: Optional<WebGLUniformLocation>, x: Float, y: Float) {}

@Extern [lib: "bindings", name: "webgl_uniform2fv"]
fun WebGLRenderingContext.uniform2fv(location: Optional<WebGLUniformLocation>, value: Float32Array) {}

@Extern [lib: "bindings", name: "webgl_uniform2i"]
fun WebGLRenderingContext.uniform2i(location: Optional<WebGLUniformLocation>, x: Int, y: Int) {}

@Extern [lib: "bindings", name: "webgl_uniform2iv"]
fun WebGLRenderingContext.uniform2iv(location: Optional<WebGLUniformLocation>, value: Int32Array) {}

// 3 parameters

@Extern [lib: "bindings", name: "webgl_uniform3f"]
fun WebGLRenderingContext.uniform3f(location: Optional<WebGLUniformLocation>, x: Float, y: Float, z: Float) {}

@Extern [lib: "bindings", name: "webgl_uniform3fv"]
fun WebGLRenderingContext.uniform3fv(location: Optional<WebGLUniformLocation>, value: Float32Array) {}

@Extern [lib: "bindings", name: "webgl_uniform3i"]
fun WebGLRenderingContext.uniform3i(location: Optional<WebGLUniformLocation>, x: Int, y: Int, z: Int) {}

@Extern [lib: "bindings", name: "webgl_uniform3iv"]
fun WebGLRenderingContext.uniform3iv(location: Optional<WebGLUniformLocation>, value: Int32Array) {}

// 4 parameters

@Extern [lib: "bindings", name: "webgl_uniform4f"]
fun WebGLRenderingContext.uniform4f(location: Optional<WebGLUniformLocation>, x: Float, y: Float, z: Float, w: Float) {}

@Extern [lib: "bindings", name: "webgl_uniform4fv"]
fun WebGLRenderingContext.uniform4fv(location: Optional<WebGLUniformLocation>, value: Float32Array) {}

@Extern [lib: "bindings", name: "webgl_uniform4i"]
fun WebGLRenderingContext.uniform4i(location: Optional<WebGLUniformLocation>, x: Int, y: Int, z: Int, w: Int) {}

@Extern [lib: "bindings", name: "webgl_uniform4iv"]
fun WebGLRenderingContext.uniform4iv(location: Optional<WebGLUniformLocation>, value: Int32Array) {}

// Set matrices

@Extern [lib: "bindings", name: "webgl_uniform_matrix2fv"]
fun WebGLRenderingContext.uniform_matrix2fv(location: Optional<WebGLUniformLocation>, transpose: Boolean, value: Float32Array) {}

@Extern [lib: "bindings", name: "webgl_uniform_matrix3fv"]
fun WebGLRenderingContext.uniform_matrix3fv(location: Optional<WebGLUniformLocation>, transpose: Boolean, value: Float32Array) {}

@Extern [lib: "bindings", name: "webgl_uniform_matrix4fv"]
fun WebGLRenderingContext.uniform_matrix4fv(location: Optional<WebGLUniformLocation>, transpose: Boolean, value: Float32Array) {}

// Vertex attributes

@Extern [lib: "bindings", name: "webgl_vertex_attrib_1f"]
fun WebGLRenderingContext.vertex_attrib_1f(index: Int, x: Float) {}

@Extern [lib: "bindings", name: "webgl_vertex_attrib_1fv"]
fun WebGLRenderingContext.vertex_attrib_1fv(index: Int, values: Float32Array) {}

@Extern [lib: "bindings", name: "webgl_vertex_attrib_2f"]
fun WebGLRenderingContext.vertex_attrib_2f(index: Int, x: Float, y: Float) {}

@Extern [lib: "bindings", name: "webgl_vertex_attrib_2fv"]
fun WebGLRenderingContext.vertex_attrib_2fv(index: Int, values: Float32Array) {}

@Extern [lib: "bindings", name: "webgl_vertex_attrib_3f"]
fun WebGLRenderingContext.vertex_attrib_3f(index: Int, x: Float, y: Float, z: Float) {}

@Extern [lib: "bindings", name: "webgl_vertex_attrib_3fv"]
fun WebGLRenderingContext.vertex_attrib_3fv(index: Int, values: Float32Array) {}

@Extern [lib: "bindings", name: "webgl_vertex_attrib_4f"]
fun WebGLRenderingContext.vertex_attrib_4f(index: Int, x: Float, y: Float, z: Float, w: Float) {}

@Extern [lib: "bindings", name: "webgl_vertex_attrib_4fv"]
fun WebGLRenderingContext.vertex_attrib_4fv(index: Int, values: Float32Array) {}

@Extern [lib: "bindings", name: "webgl_vertex_attrib_pointer"]
fun WebGLRenderingContext.vertex_attrib_pointer(index: Int, size: Int, type_constant: Int, normalized: Boolean, stride: Int, offset: Int) {}

// Drawing buffers

@Extern [lib: "bindings", name: "webgl_clear"]
fun WebGLRenderingContext.clear(mask: Int) {}

@Extern [lib: "bindings", name: "webgl_draw_arrays"]
fun WebGLRenderingContext.draw_arrays(mode: Int, first: Int, count: Int) {}

@Extern [lib: "bindings", name: "webgl_draw_elements"]
fun WebGLRenderingContext.draw_elements(mode: Int, count: Int, type_constant: Int, offset: Int) {}

@Extern [lib: "bindings", name: "webgl_finish"]
fun WebGLRenderingContext.finish() {}

@Extern [lib: "bindings", name: "webgl_flush"]
fun WebGLRenderingContext.flush() {}

// Color spaces

@Extern [lib: "bindings", name: "webgl_get_drawing_buffer_color_space"]
fun WebGLRenderingContext.get_drawing_buffer_color_space(): String {}

@Extern [lib: "bindings", name: "webgl_set_drawing_buffer_color_space"]
fun WebGLRenderingContext.set_drawing_buffer_color_space(color_space: String) {}

// Extensions

@Extern [lib: "bindings", name: "webgl_get_supported_extensions"]
fun WebGLRenderingContext.get_supported_extensions(): Array<String> {}

@Extern [lib: "bindings", name: "webgl_get_extension"]
fun WebGLRenderingContext.get_extension(extension_name: String): Optional<JsObject> {}
